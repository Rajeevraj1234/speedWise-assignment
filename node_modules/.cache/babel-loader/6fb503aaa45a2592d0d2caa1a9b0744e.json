{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.publicKey = void 0;\n\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst base_1 = require(\"./base\");\n\nconst publicKey = property => {\n  const layout = (0, buffer_layout_1.blob)(32, property);\n  const {\n    encode,\n    decode\n  } = (0, base_1.encodeDecode)(layout);\n  const publicKeyLayout = layout;\n\n  publicKeyLayout.decode = (buffer, offset) => {\n    const src = decode(buffer, offset);\n    return new web3_js_1.PublicKey(src);\n  };\n\n  publicKeyLayout.encode = (publicKey, buffer, offset) => {\n    const src = publicKey.toBuffer();\n    return encode(src, buffer, offset);\n  };\n\n  return publicKeyLayout;\n};\n\nexports.publicKey = publicKey;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEO,MAAMA,SAAS,GAAIC,QAAD,IAAyC;AAC9D,QAAMC,MAAM,GAAG,0BAAK,EAAL,EAASD,QAAT,CAAf;AACA,QAAM;AAAEE,UAAF;AAAUC;AAAV,MAAqB,yBAAaF,MAAb,CAA3B;AAEA,QAAMG,eAAe,GAAGH,MAAxB;;AAEAG,iBAAe,CAACD,MAAhB,GAAyB,CAACE,MAAD,EAAiBC,MAAjB,KAAmC;AACxD,UAAMC,GAAG,GAAGJ,MAAM,CAACE,MAAD,EAASC,MAAT,CAAlB;AACA,WAAO,IAAIE,mBAAJ,CAAcD,GAAd,CAAP;AACH,GAHD;;AAKAH,iBAAe,CAACF,MAAhB,GAAyB,CAACH,SAAD,EAAuBM,MAAvB,EAAuCC,MAAvC,KAAyD;AAC9E,UAAMC,GAAG,GAAGR,SAAS,CAACU,QAAV,EAAZ;AACA,WAAOP,MAAM,CAACK,GAAD,EAAMF,MAAN,EAAcC,MAAd,CAAb;AACH,GAHD;;AAKA,SAAOF,eAAP;AACH,CAjBM;;AAAMM,oBAASX,SAAT","names":["publicKey","property","layout","encode","decode","publicKeyLayout","buffer","offset","src","web3_js_1","toBuffer","exports"],"sources":["/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@solana/buffer-layout-utils/src/web3.ts"],"sourcesContent":["import { blob, Layout } from '@solana/buffer-layout';\nimport { PublicKey } from '@solana/web3.js';\nimport { encodeDecode } from './base';\n\nexport const publicKey = (property?: string): Layout<PublicKey> => {\n    const layout = blob(32, property);\n    const { encode, decode } = encodeDecode(layout);\n\n    const publicKeyLayout = layout as Layout<unknown> as Layout<PublicKey>;\n\n    publicKeyLayout.decode = (buffer: Buffer, offset: number) => {\n        const src = decode(buffer, offset);\n        return new PublicKey(src);\n    };\n\n    publicKeyLayout.encode = (publicKey: PublicKey, buffer: Buffer, offset: number) => {\n        const src = publicKey.toBuffer();\n        return encode(src, buffer, offset);\n    };\n\n    return publicKeyLayout;\n};\n"]},"metadata":{},"sourceType":"script"}