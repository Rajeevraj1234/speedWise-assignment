{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAssociatedTokenAccountInstruction = void 0;\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst constants_1 = require(\"../constants\");\n/**\n * Construct an AssociatedTokenAccount instruction\n *\n * @param payer                    Payer of the initialization fees\n * @param associatedToken          New associated token account\n * @param owner                    Owner of the new account\n * @param mint                     Token mint account\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\n\n\nfunction createAssociatedTokenAccountInstruction(payer, associatedToken, owner, mint) {\n  let programId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : constants_1.TOKEN_PROGRAM_ID;\n  let associatedTokenProgramId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : constants_1.ASSOCIATED_TOKEN_PROGRAM_ID;\n  const keys = [{\n    pubkey: payer,\n    isSigner: true,\n    isWritable: true\n  }, {\n    pubkey: associatedToken,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: owner,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: mint,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: web3_js_1.SystemProgram.programId,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: programId,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }];\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId: associatedTokenProgramId,\n    data: Buffer.alloc(0)\n  });\n}\n\nexports.createAssociatedTokenAccountInstruction = createAssociatedTokenAccountInstruction;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;AAEA;;;;;;;;;;;;;;AAYA,SAAgBA,uCAAhB,CACIC,KADJ,EAEIC,eAFJ,EAGIC,KAHJ,EAIIC,IAJJ,EAM0D;AAAA,MADtDC,SACsD,uEAD1CC,4BAC0C;AAAA,MAAtDC,wBAAsD,uEAA3BD,uCAA2B;AAEtD,QAAME,IAAI,GAAG,CACT;AAAEC,UAAM,EAAER,KAAV;AAAiBS,YAAQ,EAAE,IAA3B;AAAiCC,cAAU,EAAE;AAA7C,GADS,EAET;AAAEF,UAAM,EAAEP,eAAV;AAA2BQ,YAAQ,EAAE,KAArC;AAA4CC,cAAU,EAAE;AAAxD,GAFS,EAGT;AAAEF,UAAM,EAAEN,KAAV;AAAiBO,YAAQ,EAAE,KAA3B;AAAkCC,cAAU,EAAE;AAA9C,GAHS,EAIT;AAAEF,UAAM,EAAEL,IAAV;AAAgBM,YAAQ,EAAE,KAA1B;AAAiCC,cAAU,EAAE;AAA7C,GAJS,EAKT;AAAEF,UAAM,EAAEG,wBAAcP,SAAxB;AAAmCK,YAAQ,EAAE,KAA7C;AAAoDC,cAAU,EAAE;AAAhE,GALS,EAMT;AAAEF,UAAM,EAAEJ,SAAV;AAAqBK,YAAQ,EAAE,KAA/B;AAAsCC,cAAU,EAAE;AAAlD,GANS,EAOT;AAAEF,UAAM,EAAEG,4BAAV;AAA8BF,YAAQ,EAAE,KAAxC;AAA+CC,cAAU,EAAE;AAA3D,GAPS,CAAb;AAUA,SAAO,IAAIC,gCAAJ,CAA2B;AAC9BJ,QAD8B;AAE9BH,aAAS,EAAEE,wBAFmB;AAG9BM,QAAI,EAAEC,MAAM,CAACC,KAAP,CAAa,CAAb;AAHwB,GAA3B,CAAP;AAKH;;AAvBDC","names":["createAssociatedTokenAccountInstruction","payer","associatedToken","owner","mint","programId","constants_1","associatedTokenProgramId","keys","pubkey","isSigner","isWritable","web3_js_1","data","Buffer","alloc","exports"],"sources":["/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@solana/spl-token/src/instructions/associatedTokenAccount.ts"],"sourcesContent":["import { PublicKey, SystemProgram, SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants';\n\n/**\n * Construct an AssociatedTokenAccount instruction\n *\n * @param payer                    Payer of the initialization fees\n * @param associatedToken          New associated token account\n * @param owner                    Owner of the new account\n * @param mint                     Token mint account\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createAssociatedTokenAccountInstruction(\n    payer: PublicKey,\n    associatedToken: PublicKey,\n    owner: PublicKey,\n    mint: PublicKey,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = [\n        { pubkey: payer, isSigner: true, isWritable: true },\n        { pubkey: associatedToken, isSigner: false, isWritable: true },\n        { pubkey: owner, isSigner: false, isWritable: false },\n        { pubkey: mint, isSigner: false, isWritable: false },\n        { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n        { pubkey: programId, isSigner: false, isWritable: false },\n        { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n        keys,\n        programId: associatedTokenProgramId,\n        data: Buffer.alloc(0),\n    });\n}\n"]},"metadata":{},"sourceType":"script"}