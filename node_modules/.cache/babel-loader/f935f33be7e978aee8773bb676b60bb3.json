{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeInitializeAccountInstructionUnchecked = exports.decodeInitializeAccountInstruction = exports.createInitializeAccountInstruction = exports.initializeAccountInstructionData = void 0;\n\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst constants_1 = require(\"../constants\");\n\nconst errors_1 = require(\"../errors\");\n\nconst types_1 = require(\"./types\");\n/** TODO: docs */\n\n\nexports.initializeAccountInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction')]);\n/**\n * Construct an InitializeAccount instruction\n *\n * @param account   New token account\n * @param mint      Mint account\n * @param owner     Owner of the new account\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nfunction createInitializeAccountInstruction(account, mint, owner) {\n  let programId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : constants_1.TOKEN_PROGRAM_ID;\n  const keys = [{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: mint,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: owner,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }];\n  const data = Buffer.alloc(exports.initializeAccountInstructionData.span);\n  exports.initializeAccountInstructionData.encode({\n    instruction: types_1.TokenInstruction.InitializeAccount\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n\nexports.createInitializeAccountInstruction = createInitializeAccountInstruction;\n/**\n * Decode an InitializeAccount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nfunction decodeInitializeAccountInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constants_1.TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new errors_1.TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== exports.initializeAccountInstructionData.span) throw new errors_1.TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account,\n      mint,\n      owner,\n      rent\n    },\n    data\n  } = decodeInitializeAccountInstructionUnchecked(instruction);\n  if (data.instruction !== types_1.TokenInstruction.InitializeAccount) throw new errors_1.TokenInvalidInstructionTypeError();\n  if (!account || !mint || !owner || !rent) throw new errors_1.TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId,\n    keys: {\n      account,\n      mint,\n      owner,\n      rent\n    },\n    data\n  };\n}\n\nexports.decodeInitializeAccountInstruction = decodeInitializeAccountInstruction;\n/**\n * Decode an InitializeAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nfunction decodeInitializeAccountInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [account, mint, owner, rent],\n    data\n  } = _ref;\n  return {\n    programId,\n    keys: {\n      account,\n      mint,\n      owner,\n      rent\n    },\n    data: exports.initializeAccountInstructionData.decode(data)\n  };\n}\n\nexports.decodeInitializeAccountInstructionUnchecked = decodeInitializeAccountInstructionUnchecked;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAMA;AAOA;;;AACaA,2CAAmC,4BAAyC,CAAC,wBAAG,aAAH,CAAD,CAAzC,CAAnC;AAEb;;;;;;;;;;;AAUA,SAAgBC,kCAAhB,CACIC,OADJ,EAEIC,IAFJ,EAGIC,KAHJ,EAIgC;AAAA,MAA5BC,SAA4B,uEAAhBC,4BAAgB;AAE5B,QAAMC,IAAI,GAAG,CACT;AAAEC,UAAM,EAAEN,OAAV;AAAmBO,YAAQ,EAAE,KAA7B;AAAoCC,cAAU,EAAE;AAAhD,GADS,EAET;AAAEF,UAAM,EAAEL,IAAV;AAAgBM,YAAQ,EAAE,KAA1B;AAAiCC,cAAU,EAAE;AAA7C,GAFS,EAGT;AAAEF,UAAM,EAAEJ,KAAV;AAAiBK,YAAQ,EAAE,KAA3B;AAAkCC,cAAU,EAAE;AAA9C,GAHS,EAIT;AAAEF,UAAM,EAAEG,4BAAV;AAA8BF,YAAQ,EAAE,KAAxC;AAA+CC,cAAU,EAAE;AAA3D,GAJS,CAAb;AAOA,QAAME,IAAI,GAAGC,MAAM,CAACC,KAAP,CAAad,yCAAiCe,IAA9C,CAAb;AACAf,2CAAiCgB,MAAjC,CAAwC;AAAEC,eAAW,EAAEC,yBAAiBC;AAAhC,GAAxC,EAA6FP,IAA7F;AAEA,SAAO,IAAID,gCAAJ,CAA2B;AAAEJ,QAAF;AAAQF,aAAR;AAAmBO;AAAnB,GAA3B,CAAP;AACH;;AAjBDZ;AAiCA;;;;;;;;;AAQA,SAAgBoB,kCAAhB,CACIH,WADJ,EAEgC;AAAA,MAA5BZ,SAA4B,uEAAhBC,4BAAgB;AAE5B,MAAI,CAACW,WAAW,CAACZ,SAAZ,CAAsBgB,MAAtB,CAA6BhB,SAA7B,CAAL,EAA8C,MAAM,IAAIiB,4CAAJ,EAAN;AAC9C,MAAIL,WAAW,CAACL,IAAZ,CAAiBW,MAAjB,KAA4BvB,yCAAiCe,IAAjE,EAAuE,MAAM,IAAIO,yCAAJ,EAAN;AAEvE,QAAM;AACFf,QAAI,EAAE;AAAEL,aAAF;AAAWC,UAAX;AAAiBC,WAAjB;AAAwBoB;AAAxB,KADJ;AAEFZ;AAFE,MAGFa,2CAA2C,CAACR,WAAD,CAH/C;AAIA,MAAIL,IAAI,CAACK,WAAL,KAAqBC,yBAAiBC,iBAA1C,EAA6D,MAAM,IAAIG,yCAAJ,EAAN;AAC7D,MAAI,CAACpB,OAAD,IAAY,CAACC,IAAb,IAAqB,CAACC,KAAtB,IAA+B,CAACoB,IAApC,EAA0C,MAAM,IAAIF,yCAAJ,EAAN,CAVd,CAY5B;;AAEA,SAAO;AACHjB,aADG;AAEHE,QAAI,EAAE;AACFL,aADE;AAEFC,UAFE;AAGFC,WAHE;AAIFoB;AAJE,KAFH;AAQHZ;AARG,GAAP;AAUH;;AA1BDZ;AA0CA;;;;;;;;AAOA,SAAgByB,2CAAhB,OAIyB;AAAA,MAJmC;AACxDpB,aADwD;AAExDE,QAAI,EAAE,CAACL,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBoB,IAAvB,CAFkD;AAGxDZ;AAHwD,GAInC;AACrB,SAAO;AACHP,aADG;AAEHE,QAAI,EAAE;AACFL,aADE;AAEFC,UAFE;AAGFC,WAHE;AAIFoB;AAJE,KAFH;AAQHZ,QAAI,EAAEZ,yCAAiC0B,MAAjC,CAAwCd,IAAxC;AARH,GAAP;AAUH;;AAfDZ","names":["exports","createInitializeAccountInstruction","account","mint","owner","programId","constants_1","keys","pubkey","isSigner","isWritable","web3_js_1","data","Buffer","alloc","span","encode","instruction","types_1","InitializeAccount","decodeInitializeAccountInstruction","equals","errors_1","length","rent","decodeInitializeAccountInstructionUnchecked","decode"],"sources":["/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@solana/spl-token/src/instructions/initializeAccount.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { AccountMeta, PublicKey, SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors';\nimport { TokenInstruction } from './types';\n\n/** TODO: docs */\nexport interface InitializeAccountInstructionData {\n    instruction: TokenInstruction.InitializeAccount;\n}\n\n/** TODO: docs */\nexport const initializeAccountInstructionData = struct<InitializeAccountInstructionData>([u8('instruction')]);\n\n/**\n * Construct an InitializeAccount instruction\n *\n * @param account   New token account\n * @param mint      Mint account\n * @param owner     Owner of the new account\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeAccountInstruction(\n    account: PublicKey,\n    mint: PublicKey,\n    owner: PublicKey,\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = [\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: mint, isSigner: false, isWritable: false },\n        { pubkey: owner, isSigner: false, isWritable: false },\n        { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n    ];\n\n    const data = Buffer.alloc(initializeAccountInstructionData.span);\n    initializeAccountInstructionData.encode({ instruction: TokenInstruction.InitializeAccount }, data);\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid InitializeAccount instruction */\nexport interface DecodedInitializeAccountInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        mint: AccountMeta;\n        owner: AccountMeta;\n        rent: AccountMeta;\n    };\n    data: {\n        instruction: TokenInstruction.InitializeAccount;\n    };\n}\n\n/**\n * Decode an InitializeAccount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeAccountInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedInitializeAccountInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeAccountInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, mint, owner, rent },\n        data,\n    } = decodeInitializeAccountInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeAccount) throw new TokenInvalidInstructionTypeError();\n    if (!account || !mint || !owner || !rent) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            owner,\n            rent,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated InitializeAccount instruction */\nexport interface DecodedInitializeAccountInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        mint: AccountMeta | undefined;\n        owner: AccountMeta | undefined;\n        rent: AccountMeta | undefined;\n    };\n    data: {\n        instruction: number;\n    };\n}\n\n/**\n * Decode an InitializeAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeAccountInstructionUnchecked({\n    programId,\n    keys: [account, mint, owner, rent],\n    data,\n}: TransactionInstruction): DecodedInitializeAccountInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            owner,\n            rent,\n        },\n        data: initializeAccountInstructionData.decode(data),\n    };\n}\n"]},"metadata":{},"sourceType":"script"}