{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAssociatedTokenAccount = void 0;\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst constants_1 = require(\"../constants\");\n\nconst index_1 = require(\"../instructions/index\");\n\nconst index_2 = require(\"../state/index\");\n/**\n * Create and initialize a new associated token account\n *\n * @param connection               Connection to use\n * @param payer                    Payer of the transaction and initialization fees\n * @param mint                     Mint for the account\n * @param owner                    Owner of the new account\n * @param confirmOptions           Options for confirming the transaction\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Address of the new associated token account\n */\n\n\nfunction createAssociatedTokenAccount(connection, payer, mint, owner, confirmOptions) {\n  let programId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : constants_1.TOKEN_PROGRAM_ID;\n  let associatedTokenProgramId = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : constants_1.ASSOCIATED_TOKEN_PROGRAM_ID;\n  return __awaiter(this, void 0, void 0, function* () {\n    const associatedToken = yield (0, index_2.getAssociatedTokenAddress)(mint, owner, false, programId, associatedTokenProgramId);\n    const transaction = new web3_js_1.Transaction().add((0, index_1.createAssociatedTokenAccountInstruction)(payer.publicKey, associatedToken, owner, mint, programId, associatedTokenProgramId));\n    yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer], confirmOptions);\n    return associatedToken;\n  });\n}\n\nexports.createAssociatedTokenAccount = createAssociatedTokenAccount;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;AAEA;;;;;;;;;;;;;;;AAaA,SAAsBA,4BAAtB,CACIC,UADJ,EAEIC,KAFJ,EAGIC,IAHJ,EAIIC,KAJJ,EAKIC,cALJ,EAO0D;AAAA,MADtDC,SACsD,uEAD1CC,4BAC0C;AAAA,MAAtDC,wBAAsD,uEAA3BD,uCAA2B;;AAEtD,UAAME,eAAe,GAAG,MAAM,uCAA0BN,IAA1B,EAAgCC,KAAhC,EAAuC,KAAvC,EAA8CE,SAA9C,EAAyDE,wBAAzD,CAA9B;AAEA,UAAME,WAAW,GAAG,IAAIC,qBAAJ,GAAkBC,GAAlB,CAChB,qDACIV,KAAK,CAACW,SADV,EAEIJ,eAFJ,EAGIL,KAHJ,EAIID,IAJJ,EAKIG,SALJ,EAMIE,wBANJ,CADgB,CAApB;AAWA,UAAM,yCAA0BP,UAA1B,EAAsCS,WAAtC,EAAmD,CAACR,KAAD,CAAnD,EAA4DG,cAA5D,CAAN;AAEA,WAAOI,eAAP;AACH;AAAA;;AAzBDK","names":["createAssociatedTokenAccount","connection","payer","mint","owner","confirmOptions","programId","constants_1","associatedTokenProgramId","associatedToken","transaction","web3_js_1","add","publicKey","exports"],"sources":["/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@solana/spl-token/src/actions/createAssociatedTokenAccount.ts"],"sourcesContent":["import { ConfirmOptions, Connection, PublicKey, sendAndConfirmTransaction, Signer, Transaction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants';\nimport { createAssociatedTokenAccountInstruction } from '../instructions/index';\nimport { getAssociatedTokenAddress } from '../state/index';\n\n/**\n * Create and initialize a new associated token account\n *\n * @param connection               Connection to use\n * @param payer                    Payer of the transaction and initialization fees\n * @param mint                     Mint for the account\n * @param owner                    Owner of the new account\n * @param confirmOptions           Options for confirming the transaction\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Address of the new associated token account\n */\nexport async function createAssociatedTokenAccount(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    owner: PublicKey,\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID\n): Promise<PublicKey> {\n    const associatedToken = await getAssociatedTokenAddress(mint, owner, false, programId, associatedTokenProgramId);\n\n    const transaction = new Transaction().add(\n        createAssociatedTokenAccountInstruction(\n            payer.publicKey,\n            associatedToken,\n            owner,\n            mint,\n            programId,\n            associatedTokenProgramId\n        )\n    );\n\n    await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n\n    return associatedToken;\n}\n"]},"metadata":{},"sourceType":"script"}