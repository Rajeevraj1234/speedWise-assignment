{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAccount = void 0;\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst constants_1 = require(\"../constants\");\n\nconst index_1 = require(\"../instructions/index\");\n\nconst index_2 = require(\"../state/index\");\n\nconst createAssociatedTokenAccount_1 = require(\"./createAssociatedTokenAccount\");\n/**\n * Create and initialize a new token account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param mint           Mint for the account\n * @param owner          Owner of the new account\n * @param keypair        Optional keypair, defaulting to the associated token account for the `mint` and `owner`\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new token account\n */\n\n\nfunction createAccount(connection, payer, mint, owner, keypair, confirmOptions) {\n  let programId = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : constants_1.TOKEN_PROGRAM_ID;\n  return __awaiter(this, void 0, void 0, function* () {\n    // If a keypair isn't provided, create the associated token account and return its address\n    if (!keypair) return yield (0, createAssociatedTokenAccount_1.createAssociatedTokenAccount)(connection, payer, mint, owner, confirmOptions, programId); // Otherwise, create the account with the provided keypair and return its public key\n\n    const lamports = yield (0, index_2.getMinimumBalanceForRentExemptAccount)(connection);\n    const transaction = new web3_js_1.Transaction().add(web3_js_1.SystemProgram.createAccount({\n      fromPubkey: payer.publicKey,\n      newAccountPubkey: keypair.publicKey,\n      space: index_2.ACCOUNT_SIZE,\n      lamports,\n      programId\n    }), (0, index_1.createInitializeAccountInstruction)(keypair.publicKey, mint, owner, programId));\n    yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, keypair], confirmOptions);\n    return keypair.publicKey;\n  });\n}\n\nexports.createAccount = createAccount;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAUA;;AACA;;AACA;;AACA;AAEA;;;;;;;;;;;;;;;AAaA,SAAsBA,aAAtB,CACIC,UADJ,EAEIC,KAFJ,EAGIC,IAHJ,EAIIC,KAJJ,EAKIC,OALJ,EAMIC,cANJ,EAOgC;AAAA,MAA5BC,SAA4B,uEAAhBC,4BAAgB;;AAE5B;AACA,QAAI,CAACH,OAAL,EAAc,OAAO,MAAM,iEAA6BJ,UAA7B,EAAyCC,KAAzC,EAAgDC,IAAhD,EAAsDC,KAAtD,EAA6DE,cAA7D,EAA6EC,SAA7E,CAAb,EAEd;;AACA,UAAME,QAAQ,GAAG,MAAM,mDAAsCR,UAAtC,CAAvB;AAEA,UAAMS,WAAW,GAAG,IAAIC,qBAAJ,GAAkBC,GAAlB,CAChBD,wBAAcX,aAAd,CAA4B;AACxBa,gBAAU,EAAEX,KAAK,CAACY,SADM;AAExBC,sBAAgB,EAAEV,OAAO,CAACS,SAFF;AAGxBE,WAAK,EAAEC,oBAHiB;AAIxBR,cAJwB;AAKxBF;AALwB,KAA5B,CADgB,EAQhB,gDAAmCF,OAAO,CAACS,SAA3C,EAAsDX,IAAtD,EAA4DC,KAA5D,EAAmEG,SAAnE,CARgB,CAApB;AAWA,UAAM,yCAA0BN,UAA1B,EAAsCS,WAAtC,EAAmD,CAACR,KAAD,EAAQG,OAAR,CAAnD,EAAqEC,cAArE,CAAN;AAEA,WAAOD,OAAO,CAACS,SAAf;AACH;AAAA;;AA7BDI","names":["createAccount","connection","payer","mint","owner","keypair","confirmOptions","programId","constants_1","lamports","transaction","web3_js_1","add","fromPubkey","publicKey","newAccountPubkey","space","index_2","exports"],"sources":["/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@solana/spl-token/src/actions/createAccount.ts"],"sourcesContent":["import {\n    ConfirmOptions,\n    Connection,\n    Keypair,\n    PublicKey,\n    sendAndConfirmTransaction,\n    Signer,\n    SystemProgram,\n    Transaction,\n} from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport { createInitializeAccountInstruction } from '../instructions/index';\nimport { ACCOUNT_SIZE, getMinimumBalanceForRentExemptAccount } from '../state/index';\nimport { createAssociatedTokenAccount } from './createAssociatedTokenAccount';\n\n/**\n * Create and initialize a new token account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param mint           Mint for the account\n * @param owner          Owner of the new account\n * @param keypair        Optional keypair, defaulting to the associated token account for the `mint` and `owner`\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new token account\n */\nexport async function createAccount(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    owner: PublicKey,\n    keypair?: Keypair,\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<PublicKey> {\n    // If a keypair isn't provided, create the associated token account and return its address\n    if (!keypair) return await createAssociatedTokenAccount(connection, payer, mint, owner, confirmOptions, programId);\n\n    // Otherwise, create the account with the provided keypair and return its public key\n    const lamports = await getMinimumBalanceForRentExemptAccount(connection);\n\n    const transaction = new Transaction().add(\n        SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: keypair.publicKey,\n            space: ACCOUNT_SIZE,\n            lamports,\n            programId,\n        }),\n        createInitializeAccountInstruction(keypair.publicKey, mint, owner, programId)\n    );\n\n    await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n\n    return keypair.publicKey;\n}\n"]},"metadata":{},"sourceType":"script"}