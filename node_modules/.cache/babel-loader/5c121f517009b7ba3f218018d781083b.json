{"ast":null,"code":"import { createContext, useContext } from 'react';\nconst EMPTY_ARRAY = [];\nconst DEFAULT_CONTEXT = {\n  autoConnect: false,\n  connecting: false,\n  connected: false,\n  disconnecting: false,\n\n  select(_name) {\n    console.error(constructMissingProviderErrorMessage('get', 'select'));\n  },\n\n  connect() {\n    return Promise.reject(console.error(constructMissingProviderErrorMessage('get', 'connect')));\n  },\n\n  disconnect() {\n    return Promise.reject(console.error(constructMissingProviderErrorMessage('get', 'disconnect')));\n  },\n\n  sendTransaction(_transaction, _connection, _options) {\n    return Promise.reject(console.error(constructMissingProviderErrorMessage('get', 'sendTransaction')));\n  },\n\n  signTransaction(_transaction) {\n    return Promise.reject(console.error(constructMissingProviderErrorMessage('get', 'signTransaction')));\n  },\n\n  signAllTransactions(_transaction) {\n    return Promise.reject(console.error(constructMissingProviderErrorMessage('get', 'signAllTransactions')));\n  },\n\n  signMessage(_message) {\n    return Promise.reject(console.error(constructMissingProviderErrorMessage('get', 'signMessage')));\n  }\n\n};\nObject.defineProperty(DEFAULT_CONTEXT, 'wallets', {\n  get() {\n    console.error(constructMissingProviderErrorMessage('read', 'wallets'));\n    return EMPTY_ARRAY;\n  }\n\n});\nObject.defineProperty(DEFAULT_CONTEXT, 'wallet', {\n  get() {\n    console.error(constructMissingProviderErrorMessage('read', 'wallet'));\n    return null;\n  }\n\n});\nObject.defineProperty(DEFAULT_CONTEXT, 'publicKey', {\n  get() {\n    console.error(constructMissingProviderErrorMessage('read', 'publicKey'));\n    return null;\n  }\n\n});\n\nfunction constructMissingProviderErrorMessage(action, valueName) {\n  return 'You have tried to ' + ` ${action} \"${valueName}\"` + ' on a WalletContext without providing one.' + ' Make sure to render a WalletProvider' + ' as an ancestor of the component that uses ' + 'WalletContext';\n}\n\nexport const WalletContext = createContext(DEFAULT_CONTEXT);\nexport function useWallet() {\n  return useContext(WalletContext);\n}","map":{"version":3,"mappings":"AASA,SAASA,aAAT,EAAwBC,UAAxB,QAA0C,OAA1C;AA8BA,MAAMC,WAAW,GAAyB,EAA1C;AAEA,MAAMC,eAAe,GAAG;AACpBC,aAAW,EAAE,KADO;AAEpBC,YAAU,EAAE,KAFQ;AAGpBC,WAAS,EAAE,KAHS;AAIpBC,eAAa,EAAE,KAJK;;AAKpBC,QAAM,CAACC,KAAD,EAAkB;AACpBC,WAAO,CAACC,KAAR,CAAcC,oCAAoC,CAAC,KAAD,EAAQ,QAAR,CAAlD;AACH,GAPmB;;AAQpBC,SAAO;AACH,WAAOC,OAAO,CAACC,MAAR,CAAeL,OAAO,CAACC,KAAR,CAAcC,oCAAoC,CAAC,KAAD,EAAQ,SAAR,CAAlD,CAAf,CAAP;AACH,GAVmB;;AAWpBI,YAAU;AACN,WAAOF,OAAO,CAACC,MAAR,CAAeL,OAAO,CAACC,KAAR,CAAcC,oCAAoC,CAAC,KAAD,EAAQ,YAAR,CAAlD,CAAf,CAAP;AACH,GAbmB;;AAcpBK,iBAAe,CAACC,YAAD,EAA4BC,WAA5B,EAAqDC,QAArD,EAAsF;AACjG,WAAON,OAAO,CAACC,MAAR,CAAeL,OAAO,CAACC,KAAR,CAAcC,oCAAoC,CAAC,KAAD,EAAQ,iBAAR,CAAlD,CAAf,CAAP;AACH,GAhBmB;;AAiBpBS,iBAAe,CAACH,YAAD,EAA0B;AACrC,WAAOJ,OAAO,CAACC,MAAR,CAAeL,OAAO,CAACC,KAAR,CAAcC,oCAAoC,CAAC,KAAD,EAAQ,iBAAR,CAAlD,CAAf,CAAP;AACH,GAnBmB;;AAoBpBU,qBAAmB,CAACJ,YAAD,EAA4B;AAC3C,WAAOJ,OAAO,CAACC,MAAR,CAAeL,OAAO,CAACC,KAAR,CAAcC,oCAAoC,CAAC,KAAD,EAAQ,qBAAR,CAAlD,CAAf,CAAP;AACH,GAtBmB;;AAuBpBW,aAAW,CAACC,QAAD,EAAqB;AAC5B,WAAOV,OAAO,CAACC,MAAR,CAAeL,OAAO,CAACC,KAAR,CAAcC,oCAAoC,CAAC,KAAD,EAAQ,aAAR,CAAlD,CAAf,CAAP;AACH;;AAzBmB,CAAxB;AA2BAa,MAAM,CAACC,cAAP,CAAsBvB,eAAtB,EAAuC,SAAvC,EAAkD;AAC9CwB,KAAG;AACCjB,WAAO,CAACC,KAAR,CAAcC,oCAAoC,CAAC,MAAD,EAAS,SAAT,CAAlD;AACA,WAAOV,WAAP;AACH;;AAJ6C,CAAlD;AAMAuB,MAAM,CAACC,cAAP,CAAsBvB,eAAtB,EAAuC,QAAvC,EAAiD;AAC7CwB,KAAG;AACCjB,WAAO,CAACC,KAAR,CAAcC,oCAAoC,CAAC,MAAD,EAAS,QAAT,CAAlD;AACA,WAAO,IAAP;AACH;;AAJ4C,CAAjD;AAMAa,MAAM,CAACC,cAAP,CAAsBvB,eAAtB,EAAuC,WAAvC,EAAoD;AAChDwB,KAAG;AACCjB,WAAO,CAACC,KAAR,CAAcC,oCAAoC,CAAC,MAAD,EAAS,WAAT,CAAlD;AACA,WAAO,IAAP;AACH;;AAJ+C,CAApD;;AAOA,SAASA,oCAAT,CAA8CgB,MAA9C,EAA8DC,SAA9D,EAA+E;AAC3E,SACI,uBACA,IAAID,MAAM,KAAKC,SAAS,GADxB,GAEA,4CAFA,GAGA,uCAHA,GAIA,6CAJA,GAKA,eANJ;AAQH;;AAED,OAAO,MAAMC,aAAa,GAAG9B,aAAa,CAAqBG,eAArB,CAAnC;AAEP,OAAM,SAAU4B,SAAV,GAAmB;AACrB,SAAO9B,UAAU,CAAC6B,aAAD,CAAjB;AACH","names":["createContext","useContext","EMPTY_ARRAY","DEFAULT_CONTEXT","autoConnect","connecting","connected","disconnecting","select","_name","console","error","constructMissingProviderErrorMessage","connect","Promise","reject","disconnect","sendTransaction","_transaction","_connection","_options","signTransaction","signAllTransactions","signMessage","_message","Object","defineProperty","get","action","valueName","WalletContext","useWallet"],"sources":["/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@solana/wallet-adapter-react/src/useWallet.ts"],"sourcesContent":["import {\n    Adapter,\n    MessageSignerWalletAdapterProps,\n    SendTransactionOptions,\n    SignerWalletAdapterProps,\n    WalletName,\n    WalletReadyState,\n} from '@solana/wallet-adapter-base';\nimport { Connection, PublicKey, Transaction, TransactionSignature } from '@solana/web3.js';\nimport { createContext, useContext } from 'react';\n\nexport interface Wallet {\n    adapter: Adapter;\n    readyState: WalletReadyState;\n}\n\nexport interface WalletContextState {\n    autoConnect: boolean;\n    wallets: Wallet[];\n    wallet: Wallet | null;\n    publicKey: PublicKey | null;\n    connecting: boolean;\n    connected: boolean;\n    disconnecting: boolean;\n\n    select(walletName: WalletName): void;\n    connect(): Promise<void>;\n    disconnect(): Promise<void>;\n    sendTransaction(\n        transaction: Transaction,\n        connection: Connection,\n        options?: SendTransactionOptions\n    ): Promise<TransactionSignature>;\n\n    signTransaction: SignerWalletAdapterProps['signTransaction'] | undefined;\n    signAllTransactions: SignerWalletAdapterProps['signAllTransactions'] | undefined;\n    signMessage: MessageSignerWalletAdapterProps['signMessage'] | undefined;\n}\n\nconst EMPTY_ARRAY: ReadonlyArray<never> = [];\n\nconst DEFAULT_CONTEXT = {\n    autoConnect: false,\n    connecting: false,\n    connected: false,\n    disconnecting: false,\n    select(_name: WalletName) {\n        console.error(constructMissingProviderErrorMessage('get', 'select'));\n    },\n    connect() {\n        return Promise.reject(console.error(constructMissingProviderErrorMessage('get', 'connect')));\n    },\n    disconnect() {\n        return Promise.reject(console.error(constructMissingProviderErrorMessage('get', 'disconnect')));\n    },\n    sendTransaction(_transaction: Transaction, _connection: Connection, _options?: SendTransactionOptions) {\n        return Promise.reject(console.error(constructMissingProviderErrorMessage('get', 'sendTransaction')));\n    },\n    signTransaction(_transaction: Transaction) {\n        return Promise.reject(console.error(constructMissingProviderErrorMessage('get', 'signTransaction')));\n    },\n    signAllTransactions(_transaction: Transaction[]) {\n        return Promise.reject(console.error(constructMissingProviderErrorMessage('get', 'signAllTransactions')));\n    },\n    signMessage(_message: Uint8Array) {\n        return Promise.reject(console.error(constructMissingProviderErrorMessage('get', 'signMessage')));\n    },\n} as WalletContextState;\nObject.defineProperty(DEFAULT_CONTEXT, 'wallets', {\n    get() {\n        console.error(constructMissingProviderErrorMessage('read', 'wallets'));\n        return EMPTY_ARRAY;\n    },\n});\nObject.defineProperty(DEFAULT_CONTEXT, 'wallet', {\n    get() {\n        console.error(constructMissingProviderErrorMessage('read', 'wallet'));\n        return null;\n    },\n});\nObject.defineProperty(DEFAULT_CONTEXT, 'publicKey', {\n    get() {\n        console.error(constructMissingProviderErrorMessage('read', 'publicKey'));\n        return null;\n    },\n});\n\nfunction constructMissingProviderErrorMessage(action: string, valueName: string) {\n    return (\n        'You have tried to ' +\n        ` ${action} \"${valueName}\"` +\n        ' on a WalletContext without providing one.' +\n        ' Make sure to render a WalletProvider' +\n        ' as an ancestor of the component that uses ' +\n        'WalletContext'\n    );\n}\n\nexport const WalletContext = createContext<WalletContextState>(DEFAULT_CONTEXT as WalletContextState);\n\nexport function useWallet(): WalletContextState {\n    return useContext(WalletContext);\n}\n"]},"metadata":{},"sourceType":"module"}