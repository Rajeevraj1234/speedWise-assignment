{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMultisig = void 0;\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst constants_1 = require(\"../constants\");\n\nconst index_1 = require(\"../instructions/index\");\n\nconst index_2 = require(\"../state/index\");\n/**\n * Create and initialize a new multisig\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param signers        Full set of signers\n * @param m              Number of required signatures\n * @param keypair        Optional keypair, defaulting to a new random one\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new multisig\n */\n\n\nfunction createMultisig(connection, payer, signers, m) {\n  let keypair = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : web3_js_1.Keypair.generate();\n  let confirmOptions = arguments.length > 5 ? arguments[5] : undefined;\n  let programId = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : constants_1.TOKEN_PROGRAM_ID;\n  return __awaiter(this, void 0, void 0, function* () {\n    const lamports = yield (0, index_2.getMinimumBalanceForRentExemptMultisig)(connection);\n    const transaction = new web3_js_1.Transaction().add(web3_js_1.SystemProgram.createAccount({\n      fromPubkey: payer.publicKey,\n      newAccountPubkey: keypair.publicKey,\n      space: index_2.MULTISIG_SIZE,\n      lamports,\n      programId\n    }), (0, index_1.createInitializeMultisigInstruction)(keypair.publicKey, signers, m, programId));\n    yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, keypair], confirmOptions);\n    return keypair.publicKey;\n  });\n}\n\nexports.createMultisig = createMultisig;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAUA;;AACA;;AACA;AAEA;;;;;;;;;;;;;;;AAaA,SAAsBA,cAAtB,CACIC,UADJ,EAEIC,KAFJ,EAGIC,OAHJ,EAIIC,CAJJ,EAOgC;AAAA,MAF5BC,OAE4B,uEAFlBC,kBAAQC,QAAR,EAEkB;AAAA,MAD5BC,cAC4B;AAAA,MAA5BC,SAA4B,uEAAhBC,4BAAgB;;AAE5B,UAAMC,QAAQ,GAAG,MAAM,oDAAuCV,UAAvC,CAAvB;AAEA,UAAMW,WAAW,GAAG,IAAIN,qBAAJ,GAAkBO,GAAlB,CAChBP,wBAAcQ,aAAd,CAA4B;AACxBC,gBAAU,EAAEb,KAAK,CAACc,SADM;AAExBC,sBAAgB,EAAEZ,OAAO,CAACW,SAFF;AAGxBE,WAAK,EAAEC,qBAHiB;AAIxBR,cAJwB;AAKxBF;AALwB,KAA5B,CADgB,EAQhB,iDAAoCJ,OAAO,CAACW,SAA5C,EAAuDb,OAAvD,EAAgEC,CAAhE,EAAmEK,SAAnE,CARgB,CAApB;AAWA,UAAM,yCAA0BR,UAA1B,EAAsCW,WAAtC,EAAmD,CAACV,KAAD,EAAQG,OAAR,CAAnD,EAAqEG,cAArE,CAAN;AAEA,WAAOH,OAAO,CAACW,SAAf;AACH;AAAA;;AAzBDI","names":["createMultisig","connection","payer","signers","m","keypair","web3_js_1","generate","confirmOptions","programId","constants_1","lamports","transaction","add","createAccount","fromPubkey","publicKey","newAccountPubkey","space","index_2","exports"],"sources":["/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@solana/spl-token/src/actions/createMultisig.ts"],"sourcesContent":["import {\n    ConfirmOptions,\n    Connection,\n    Keypair,\n    PublicKey,\n    sendAndConfirmTransaction,\n    Signer,\n    SystemProgram,\n    Transaction,\n} from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport { createInitializeMultisigInstruction } from '../instructions/index';\nimport { getMinimumBalanceForRentExemptMultisig, MULTISIG_SIZE } from '../state/index';\n\n/**\n * Create and initialize a new multisig\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param signers        Full set of signers\n * @param m              Number of required signatures\n * @param keypair        Optional keypair, defaulting to a new random one\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new multisig\n */\nexport async function createMultisig(\n    connection: Connection,\n    payer: Signer,\n    signers: PublicKey[],\n    m: number,\n    keypair = Keypair.generate(),\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<PublicKey> {\n    const lamports = await getMinimumBalanceForRentExemptMultisig(connection);\n\n    const transaction = new Transaction().add(\n        SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: keypair.publicKey,\n            space: MULTISIG_SIZE,\n            lamports,\n            programId,\n        }),\n        createInitializeMultisigInstruction(keypair.publicKey, signers, m, programId)\n    );\n\n    await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n\n    return keypair.publicKey;\n}\n"]},"metadata":{},"sourceType":"script"}