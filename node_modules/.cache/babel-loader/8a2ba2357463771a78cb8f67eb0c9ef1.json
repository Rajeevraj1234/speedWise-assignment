{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeFreezeAccountInstructionUnchecked = exports.decodeFreezeAccountInstruction = exports.createFreezeAccountInstruction = exports.freezeAccountInstructionData = void 0;\n\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst constants_1 = require(\"../constants\");\n\nconst errors_1 = require(\"../errors\");\n\nconst internal_1 = require(\"./internal\");\n\nconst types_1 = require(\"./types\");\n/** TODO: docs */\n\n\nexports.freezeAccountInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction')]);\n/**\n * Construct a FreezeAccount instruction\n *\n * @param account      Account to freeze\n * @param mint         Mint account\n * @param authority    Mint freeze authority\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nfunction createFreezeAccountInstruction(account, mint, authority) {\n  let multiSigners = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  let programId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : constants_1.TOKEN_PROGRAM_ID;\n  const keys = (0, internal_1.addSigners)([{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: mint,\n    isSigner: false,\n    isWritable: false\n  }], authority, multiSigners);\n  const data = Buffer.alloc(exports.freezeAccountInstructionData.span);\n  exports.freezeAccountInstructionData.encode({\n    instruction: types_1.TokenInstruction.FreezeAccount\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n\nexports.createFreezeAccountInstruction = createFreezeAccountInstruction;\n/**\n * Decode a FreezeAccount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nfunction decodeFreezeAccountInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constants_1.TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new errors_1.TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== exports.freezeAccountInstructionData.span) throw new errors_1.TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account,\n      mint,\n      authority,\n      multiSigners\n    },\n    data\n  } = decodeFreezeAccountInstructionUnchecked(instruction);\n  if (data.instruction !== types_1.TokenInstruction.FreezeAccount) throw new errors_1.TokenInvalidInstructionTypeError();\n  if (!account || !mint || !authority) throw new errors_1.TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId,\n    keys: {\n      account,\n      mint,\n      authority,\n      multiSigners\n    },\n    data\n  };\n}\n\nexports.decodeFreezeAccountInstruction = decodeFreezeAccountInstruction;\n/**\n * Decode a FreezeAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nfunction decodeFreezeAccountInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [account, mint, authority, ...multiSigners],\n    data\n  } = _ref;\n  return {\n    programId,\n    keys: {\n      account,\n      mint,\n      authority,\n      multiSigners\n    },\n    data: exports.freezeAccountInstructionData.decode(data)\n  };\n}\n\nexports.decodeFreezeAccountInstructionUnchecked = decodeFreezeAccountInstructionUnchecked;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAMA;;AACA;AAOA;;;AACaA,uCAA+B,4BAAqC,CAAC,wBAAG,aAAH,CAAD,CAArC,CAA/B;AAEb;;;;;;;;;;;;AAWA,SAAgBC,8BAAhB,CACIC,OADJ,EAEIC,IAFJ,EAGIC,SAHJ,EAKgC;AAAA,MAD5BC,YAC4B,uEADH,EACG;AAAA,MAA5BC,SAA4B,uEAAhBC,4BAAgB;AAE5B,QAAMC,IAAI,GAAG,2BACT,CACI;AAAEC,UAAM,EAAEP,OAAV;AAAmBQ,YAAQ,EAAE,KAA7B;AAAoCC,cAAU,EAAE;AAAhD,GADJ,EAEI;AAAEF,UAAM,EAAEN,IAAV;AAAgBO,YAAQ,EAAE,KAA1B;AAAiCC,cAAU,EAAE;AAA7C,GAFJ,CADS,EAKTP,SALS,EAMTC,YANS,CAAb;AASA,QAAMO,IAAI,GAAGC,MAAM,CAACC,KAAP,CAAad,qCAA6Be,IAA1C,CAAb;AACAf,uCAA6BgB,MAA7B,CAAoC;AAAEC,eAAW,EAAEC,yBAAiBC;AAAhC,GAApC,EAAqFP,IAArF;AAEA,SAAO,IAAIQ,gCAAJ,CAA2B;AAAEZ,QAAF;AAAQF,aAAR;AAAmBM;AAAnB,GAA3B,CAAP;AACH;;AApBDZ;AAoCA;;;;;;;;;AAQA,SAAgBqB,8BAAhB,CACIJ,WADJ,EAEgC;AAAA,MAA5BX,SAA4B,uEAAhBC,4BAAgB;AAE5B,MAAI,CAACU,WAAW,CAACX,SAAZ,CAAsBgB,MAAtB,CAA6BhB,SAA7B,CAAL,EAA8C,MAAM,IAAIiB,4CAAJ,EAAN;AAC9C,MAAIN,WAAW,CAACL,IAAZ,CAAiBY,MAAjB,KAA4BxB,qCAA6Be,IAA7D,EAAmE,MAAM,IAAIQ,yCAAJ,EAAN;AAEnE,QAAM;AACFf,QAAI,EAAE;AAAEN,aAAF;AAAWC,UAAX;AAAiBC,eAAjB;AAA4BC;AAA5B,KADJ;AAEFO;AAFE,MAGFa,uCAAuC,CAACR,WAAD,CAH3C;AAIA,MAAIL,IAAI,CAACK,WAAL,KAAqBC,yBAAiBC,aAA1C,EAAyD,MAAM,IAAII,yCAAJ,EAAN;AACzD,MAAI,CAACrB,OAAD,IAAY,CAACC,IAAb,IAAqB,CAACC,SAA1B,EAAqC,MAAM,IAAImB,yCAAJ,EAAN,CAVT,CAY5B;;AAEA,SAAO;AACHjB,aADG;AAEHE,QAAI,EAAE;AACFN,aADE;AAEFC,UAFE;AAGFC,eAHE;AAIFC;AAJE,KAFH;AAQHO;AARG,GAAP;AAUH;;AA1BDZ;AA0CA;;;;;;;;AAOA,SAAgByB,uCAAhB,OAIyB;AAAA,MAJ+B;AACpDnB,aADoD;AAEpDE,QAAI,EAAE,CAACN,OAAD,EAAUC,IAAV,EAAgBC,SAAhB,EAA2B,GAAGC,YAA9B,CAF8C;AAGpDO;AAHoD,GAI/B;AACrB,SAAO;AACHN,aADG;AAEHE,QAAI,EAAE;AACFN,aADE;AAEFC,UAFE;AAGFC,eAHE;AAIFC;AAJE,KAFH;AAQHO,QAAI,EAAEZ,qCAA6B0B,MAA7B,CAAoCd,IAApC;AARH,GAAP;AAUH;;AAfDZ","names":["exports","createFreezeAccountInstruction","account","mint","authority","multiSigners","programId","constants_1","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","types_1","FreezeAccount","web3_js_1","decodeFreezeAccountInstruction","equals","errors_1","length","decodeFreezeAccountInstructionUnchecked","decode"],"sources":["/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@solana/spl-token/src/instructions/freezeAccount.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { AccountMeta, PublicKey, Signer, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors';\nimport { addSigners } from './internal';\nimport { TokenInstruction } from './types';\n\n/** TODO: docs */\nexport interface FreezeAccountInstructionData {\n    instruction: TokenInstruction.FreezeAccount;\n}\n\n/** TODO: docs */\nexport const freezeAccountInstructionData = struct<FreezeAccountInstructionData>([u8('instruction')]);\n\n/**\n * Construct a FreezeAccount instruction\n *\n * @param account      Account to freeze\n * @param mint         Mint account\n * @param authority    Mint freeze authority\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createFreezeAccountInstruction(\n    account: PublicKey,\n    mint: PublicKey,\n    authority: PublicKey,\n    multiSigners: Signer[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners(\n        [\n            { pubkey: account, isSigner: false, isWritable: true },\n            { pubkey: mint, isSigner: false, isWritable: false },\n        ],\n        authority,\n        multiSigners\n    );\n\n    const data = Buffer.alloc(freezeAccountInstructionData.span);\n    freezeAccountInstructionData.encode({ instruction: TokenInstruction.FreezeAccount }, data);\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid FreezeAccount instruction */\nexport interface DecodedFreezeAccountInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        mint: AccountMeta;\n        authority: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.FreezeAccount;\n    };\n}\n\n/**\n * Decode a FreezeAccount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeFreezeAccountInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedFreezeAccountInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== freezeAccountInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, mint, authority, multiSigners },\n        data,\n    } = decodeFreezeAccountInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.FreezeAccount) throw new TokenInvalidInstructionTypeError();\n    if (!account || !mint || !authority) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            authority,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated FreezeAccount instruction */\nexport interface DecodedFreezeAccountInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        mint: AccountMeta | undefined;\n        authority: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n    };\n}\n\n/**\n * Decode a FreezeAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeFreezeAccountInstructionUnchecked({\n    programId,\n    keys: [account, mint, authority, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedFreezeAccountInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            authority,\n            multiSigners,\n        },\n        data: freezeAccountInstructionData.decode(data),\n    };\n}\n"]},"metadata":{},"sourceType":"script"}