{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from './../constants.mjs';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from './../errors.mjs';\nimport { addSigners } from './internal.mjs';\nimport { TokenInstruction } from './types.mjs';\n/** TODO: docs */\n\nexport const revokeInstructionData = struct([u8('instruction')]);\n/**\n * Construct a Revoke instruction\n *\n * @param account      Address of the token account\n * @param owner        Owner of the account\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nexport function createRevokeInstruction(account, owner) {\n  let multiSigners = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  let programId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : TOKEN_PROGRAM_ID;\n  const keys = addSigners([{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }], owner, multiSigners);\n  const data = Buffer.alloc(revokeInstructionData.span);\n  revokeInstructionData.encode({\n    instruction: TokenInstruction.Revoke\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\n * Decode a Revoke instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nexport function decodeRevokeInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== revokeInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account,\n      owner,\n      multiSigners\n    },\n    data\n  } = decodeRevokeInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.Revoke) throw new TokenInvalidInstructionTypeError();\n  if (!account || !owner) throw new TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId,\n    keys: {\n      account,\n      owner,\n      multiSigners\n    },\n    data\n  };\n}\n/**\n * Decode a Revoke instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nexport function decodeRevokeInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [account, owner, ...multiSigners],\n    data\n  } = _ref;\n  return {\n    programId,\n    keys: {\n      account,\n      owner,\n      multiSigners\n    },\n    data: revokeInstructionData.decode(data)\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,MAAT,EAAiBC,EAAjB,QAA2B,uBAA3B;AACA,SAAyCC,sBAAzC,QAAuE,iBAAvE;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SACIC,gCADJ,EAEIC,gCAFJ,EAGIC,mCAHJ,EAIIC,gCAJJ,QAKO,iBALP;AAMA,SAASC,UAAT,QAA2B,gBAA3B;AACA,SAASC,gBAAT,QAAiC,aAAjC;AAOA;;AACA,OAAO,MAAMC,qBAAqB,GAAGV,MAAM,CAAwB,CAACC,EAAE,CAAC,aAAD,CAAH,CAAxB,CAApC;AAEP;;;;;;;;;;;AAUA,OAAM,SAAUU,uBAAV,CACFC,OADE,EAEFC,KAFE,EAI0B;AAAA,MAD5BC,YAC4B,uEADH,EACG;AAAA,MAA5BC,SAA4B,uEAAhBZ,gBAAgB;AAE5B,QAAMa,IAAI,GAAGR,UAAU,CAAC,CAAC;AAAES,UAAM,EAAEL,OAAV;AAAmBM,YAAQ,EAAE,KAA7B;AAAoCC,cAAU,EAAE;AAAhD,GAAD,CAAD,EAA2DN,KAA3D,EAAkEC,YAAlE,CAAvB;AAEA,QAAMM,IAAI,GAAGC,MAAM,CAACC,KAAP,CAAaZ,qBAAqB,CAACa,IAAnC,CAAb;AACAb,uBAAqB,CAACc,MAAtB,CAA6B;AAAEC,eAAW,EAAEhB,gBAAgB,CAACiB;AAAhC,GAA7B,EAAuEN,IAAvE;AAEA,SAAO,IAAIlB,sBAAJ,CAA2B;AAAEc,QAAF;AAAQD,aAAR;AAAmBK;AAAnB,GAA3B,CAAP;AACH;AAeD;;;;;;;;;AAQA,OAAM,SAAUO,uBAAV,CACFF,WADE,EAE0B;AAAA,MAA5BV,SAA4B,uEAAhBZ,gBAAgB;AAE5B,MAAI,CAACsB,WAAW,CAACV,SAAZ,CAAsBa,MAAtB,CAA6Bb,SAA7B,CAAL,EAA8C,MAAM,IAAIT,mCAAJ,EAAN;AAC9C,MAAImB,WAAW,CAACL,IAAZ,CAAiBS,MAAjB,KAA4BnB,qBAAqB,CAACa,IAAtD,EAA4D,MAAM,IAAInB,gCAAJ,EAAN;AAE5D,QAAM;AACFY,QAAI,EAAE;AAAEJ,aAAF;AAAWC,WAAX;AAAkBC;AAAlB,KADJ;AAEFM;AAFE,MAGFU,gCAAgC,CAACL,WAAD,CAHpC;AAIA,MAAIL,IAAI,CAACK,WAAL,KAAqBhB,gBAAgB,CAACiB,MAA1C,EAAkD,MAAM,IAAInB,gCAAJ,EAAN;AAClD,MAAI,CAACK,OAAD,IAAY,CAACC,KAAjB,EAAwB,MAAM,IAAIR,gCAAJ,EAAN,CAVI,CAY5B;;AAEA,SAAO;AACHU,aADG;AAEHC,QAAI,EAAE;AACFJ,aADE;AAEFC,WAFE;AAGFC;AAHE,KAFH;AAOHM;AAPG,GAAP;AASH;AAeD;;;;;;;;AAOA,OAAM,SAAUU,gCAAV,OAImB;AAAA,MAJwB;AAC7Cf,aAD6C;AAE7CC,QAAI,EAAE,CAACJ,OAAD,EAAUC,KAAV,EAAiB,GAAGC,YAApB,CAFuC;AAG7CM;AAH6C,GAIxB;AACrB,SAAO;AACHL,aADG;AAEHC,QAAI,EAAE;AACFJ,aADE;AAEFC,WAFE;AAGFC;AAHE,KAFH;AAOHM,QAAI,EAAEV,qBAAqB,CAACqB,MAAtB,CAA6BX,IAA7B;AAPH,GAAP;AASH","names":["struct","u8","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","addSigners","TokenInstruction","revokeInstructionData","createRevokeInstruction","account","owner","multiSigners","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","Revoke","decodeRevokeInstruction","equals","length","decodeRevokeInstructionUnchecked","decode"],"sources":["/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@solana/spl-token/src/instructions/revoke.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { AccountMeta, PublicKey, Signer, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors';\nimport { addSigners } from './internal';\nimport { TokenInstruction } from './types';\n\n/** TODO: docs */\nexport interface RevokeInstructionData {\n    instruction: TokenInstruction.Revoke;\n}\n\n/** TODO: docs */\nexport const revokeInstructionData = struct<RevokeInstructionData>([u8('instruction')]);\n\n/**\n * Construct a Revoke instruction\n *\n * @param account      Address of the token account\n * @param owner        Owner of the account\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createRevokeInstruction(\n    account: PublicKey,\n    owner: PublicKey,\n    multiSigners: Signer[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners([{ pubkey: account, isSigner: false, isWritable: true }], owner, multiSigners);\n\n    const data = Buffer.alloc(revokeInstructionData.span);\n    revokeInstructionData.encode({ instruction: TokenInstruction.Revoke }, data);\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid Revoke instruction */\nexport interface DecodedRevokeInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        owner: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.Revoke;\n    };\n}\n\n/**\n * Decode a Revoke instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeRevokeInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedRevokeInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== revokeInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, owner, multiSigners },\n        data,\n    } = decodeRevokeInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.Revoke) throw new TokenInvalidInstructionTypeError();\n    if (!account || !owner) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated Revoke instruction */\nexport interface DecodedRevokeInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        owner: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n    };\n}\n\n/**\n * Decode a Revoke instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeRevokeInstructionUnchecked({\n    programId,\n    keys: [account, owner, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedRevokeInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n            owner,\n            multiSigners,\n        },\n        data: revokeInstructionData.decode(data),\n    };\n}\n"]},"metadata":{},"sourceType":"module"}