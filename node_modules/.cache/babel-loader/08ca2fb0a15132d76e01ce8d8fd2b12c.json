{"ast":null,"code":"import { useEffect, useRef, useState } from 'react';\nexport function useLocalStorage(key, defaultState) {\n  const state = useState(() => {\n    try {\n      const value = localStorage.getItem(key);\n      if (value) return JSON.parse(value);\n    } catch (error) {\n      if (typeof window !== 'undefined') {\n        console.error(error);\n      }\n    }\n\n    return defaultState;\n  });\n  const value = state[0];\n  const isFirstRender = useRef(true);\n  useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n\n    try {\n      if (value === null) {\n        localStorage.removeItem(key);\n      } else {\n        localStorage.setItem(key, JSON.stringify(value));\n      }\n    } catch (error) {\n      if (typeof window !== 'undefined') {\n        console.error(error);\n      }\n    }\n  }, [value]);\n  return state;\n}","map":{"version":3,"mappings":"AAAA,SAAgBA,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AAEA,OAAM,SAAUC,eAAV,CAA6BC,GAA7B,EAA0CC,YAA1C,EAAyD;AAC3D,QAAMC,KAAK,GAAGJ,QAAQ,CAAI,MAAK;AAC3B,QAAI;AACA,YAAMK,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqBL,GAArB,CAAd;AACA,UAAIG,KAAJ,EAAW,OAAOG,IAAI,CAACC,KAAL,CAAWJ,KAAX,CAAP;AACd,KAHD,CAGE,OAAOK,KAAP,EAAc;AACZ,UAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AAC/BC,eAAO,CAACF,KAAR,CAAcA,KAAd;AACH;AACJ;;AAED,WAAOP,YAAP;AACH,GAXqB,CAAtB;AAYA,QAAME,KAAK,GAAGD,KAAK,CAAC,CAAD,CAAnB;AAEA,QAAMS,aAAa,GAAGd,MAAM,CAAC,IAAD,CAA5B;AACAD,WAAS,CAAC,MAAK;AACX,QAAIe,aAAa,CAACC,OAAlB,EAA2B;AACvBD,mBAAa,CAACC,OAAd,GAAwB,KAAxB;AACA;AACH;;AACD,QAAI;AACA,UAAIT,KAAK,KAAK,IAAd,EAAoB;AAChBC,oBAAY,CAACS,UAAb,CAAwBb,GAAxB;AACH,OAFD,MAEO;AACHI,oBAAY,CAACU,OAAb,CAAqBd,GAArB,EAA0BM,IAAI,CAACS,SAAL,CAAeZ,KAAf,CAA1B;AACH;AACJ,KAND,CAME,OAAOK,KAAP,EAAc;AACZ,UAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AAC/BC,eAAO,CAACF,KAAR,CAAcA,KAAd;AACH;AACJ;AACJ,GAhBQ,EAgBN,CAACL,KAAD,CAhBM,CAAT;AAkBA,SAAOD,KAAP;AACH","names":["useEffect","useRef","useState","useLocalStorage","key","defaultState","state","value","localStorage","getItem","JSON","parse","error","window","console","isFirstRender","current","removeItem","setItem","stringify"],"sources":["/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@solana/wallet-adapter-react/src/useLocalStorage.ts"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\nexport function useLocalStorage<T>(key: string, defaultState: T): [T, React.Dispatch<React.SetStateAction<T>>] {\n    const state = useState<T>(() => {\n        try {\n            const value = localStorage.getItem(key);\n            if (value) return JSON.parse(value) as T;\n        } catch (error) {\n            if (typeof window !== 'undefined') {\n                console.error(error);\n            }\n        }\n\n        return defaultState;\n    });\n    const value = state[0];\n\n    const isFirstRender = useRef(true);\n    useEffect(() => {\n        if (isFirstRender.current) {\n            isFirstRender.current = false;\n            return;\n        }\n        try {\n            if (value === null) {\n                localStorage.removeItem(key);\n            } else {\n                localStorage.setItem(key, JSON.stringify(value));\n            }\n        } catch (error) {\n            if (typeof window !== 'undefined') {\n                console.error(error);\n            }\n        }\n    }, [value]);\n\n    return state;\n}\n"]},"metadata":{},"sourceType":"module"}