{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeApproveInstructionUnchecked = exports.decodeApproveInstruction = exports.createApproveInstruction = exports.approveInstructionData = void 0;\n\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\n\nconst buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst constants_1 = require(\"../constants\");\n\nconst errors_1 = require(\"../errors\");\n\nconst internal_1 = require(\"./internal\");\n\nconst types_1 = require(\"./types\");\n/** TODO: docs */\n\n\nexports.approveInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_utils_1.u64)('amount')]);\n/**\n * Construct an Approve instruction\n *\n * @param account      Account to set the delegate for\n * @param delegate     Account authorized to transfer tokens from the account\n * @param owner        Owner of the account\n * @param amount       Maximum number of tokens the delegate may transfer\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nfunction createApproveInstruction(account, delegate, owner, amount) {\n  let multiSigners = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  let programId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : constants_1.TOKEN_PROGRAM_ID;\n  const keys = (0, internal_1.addSigners)([{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: delegate,\n    isSigner: false,\n    isWritable: false\n  }], owner, multiSigners);\n  const data = Buffer.alloc(exports.approveInstructionData.span);\n  exports.approveInstructionData.encode({\n    instruction: types_1.TokenInstruction.Approve,\n    amount: BigInt(amount)\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n\nexports.createApproveInstruction = createApproveInstruction;\n/**\n * Decode an Approve instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nfunction decodeApproveInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constants_1.TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new errors_1.TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== exports.approveInstructionData.span) throw new errors_1.TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account,\n      delegate,\n      owner,\n      multiSigners\n    },\n    data\n  } = decodeApproveInstructionUnchecked(instruction);\n  if (data.instruction !== types_1.TokenInstruction.Approve) throw new errors_1.TokenInvalidInstructionTypeError();\n  if (!account || !delegate || !owner) throw new errors_1.TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId,\n    keys: {\n      account,\n      delegate,\n      owner,\n      multiSigners\n    },\n    data\n  };\n}\n\nexports.decodeApproveInstruction = decodeApproveInstruction;\n/**\n * Decode an Approve instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nfunction decodeApproveInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [account, delegate, owner, ...multiSigners],\n    data\n  } = _ref;\n  return {\n    programId,\n    keys: {\n      account,\n      delegate,\n      owner,\n      multiSigners\n    },\n    data: exports.approveInstructionData.decode(data)\n  };\n}\n\nexports.decodeApproveInstructionUnchecked = decodeApproveInstructionUnchecked;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAMA;;AACA;AAQA;;;AACaA,iCAAyB,4BAA+B,CAAC,wBAAG,aAAH,CAAD,EAAoB,+BAAI,QAAJ,CAApB,CAA/B,CAAzB;AAEb;;;;;;;;;;;;;AAYA,SAAgBC,wBAAhB,CACIC,OADJ,EAEIC,QAFJ,EAGIC,KAHJ,EAIIC,MAJJ,EAMgC;AAAA,MAD5BC,YAC4B,uEADH,EACG;AAAA,MAA5BC,SAA4B,uEAAhBC,4BAAgB;AAE5B,QAAMC,IAAI,GAAG,2BACT,CACI;AAAEC,UAAM,EAAER,OAAV;AAAmBS,YAAQ,EAAE,KAA7B;AAAoCC,cAAU,EAAE;AAAhD,GADJ,EAEI;AAAEF,UAAM,EAAEP,QAAV;AAAoBQ,YAAQ,EAAE,KAA9B;AAAqCC,cAAU,EAAE;AAAjD,GAFJ,CADS,EAKTR,KALS,EAMTE,YANS,CAAb;AASA,QAAMO,IAAI,GAAGC,MAAM,CAACC,KAAP,CAAaf,+BAAuBgB,IAApC,CAAb;AACAhB,iCAAuBiB,MAAvB,CACI;AACIC,eAAW,EAAEC,yBAAiBC,OADlC;AAEIf,UAAM,EAAEgB,MAAM,CAAChB,MAAD;AAFlB,GADJ,EAKIQ,IALJ;AAQA,SAAO,IAAIS,gCAAJ,CAA2B;AAAEb,QAAF;AAAQF,aAAR;AAAmBM;AAAnB,GAA3B,CAAP;AACH;;AA3BDb;AA4CA;;;;;;;;;AAQA,SAAgBuB,wBAAhB,CACIL,WADJ,EAEgC;AAAA,MAA5BX,SAA4B,uEAAhBC,4BAAgB;AAE5B,MAAI,CAACU,WAAW,CAACX,SAAZ,CAAsBiB,MAAtB,CAA6BjB,SAA7B,CAAL,EAA8C,MAAM,IAAIkB,4CAAJ,EAAN;AAC9C,MAAIP,WAAW,CAACL,IAAZ,CAAiBa,MAAjB,KAA4B1B,+BAAuBgB,IAAvD,EAA6D,MAAM,IAAIS,yCAAJ,EAAN;AAE7D,QAAM;AACFhB,QAAI,EAAE;AAAEP,aAAF;AAAWC,cAAX;AAAqBC,WAArB;AAA4BE;AAA5B,KADJ;AAEFO;AAFE,MAGFc,iCAAiC,CAACT,WAAD,CAHrC;AAIA,MAAIL,IAAI,CAACK,WAAL,KAAqBC,yBAAiBC,OAA1C,EAAmD,MAAM,IAAIK,yCAAJ,EAAN;AACnD,MAAI,CAACvB,OAAD,IAAY,CAACC,QAAb,IAAyB,CAACC,KAA9B,EAAqC,MAAM,IAAIqB,yCAAJ,EAAN,CAVT,CAY5B;;AAEA,SAAO;AACHlB,aADG;AAEHE,QAAI,EAAE;AACFP,aADE;AAEFC,cAFE;AAGFC,WAHE;AAIFE;AAJE,KAFH;AAQHO;AARG,GAAP;AAUH;;AA1BDb;AA2CA;;;;;;;;AAOA,SAAgB2B,iCAAhB,OAIyB;AAAA,MAJyB;AAC9CpB,aAD8C;AAE9CE,QAAI,EAAE,CAACP,OAAD,EAAUC,QAAV,EAAoBC,KAApB,EAA2B,GAAGE,YAA9B,CAFwC;AAG9CO;AAH8C,GAIzB;AACrB,SAAO;AACHN,aADG;AAEHE,QAAI,EAAE;AACFP,aADE;AAEFC,cAFE;AAGFC,WAHE;AAIFE;AAJE,KAFH;AAQHO,QAAI,EAAEb,+BAAuB4B,MAAvB,CAA8Bf,IAA9B;AARH,GAAP;AAUH;;AAfDb","names":["exports","createApproveInstruction","account","delegate","owner","amount","multiSigners","programId","constants_1","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","types_1","Approve","BigInt","web3_js_1","decodeApproveInstruction","equals","errors_1","length","decodeApproveInstructionUnchecked","decode"],"sources":["/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@solana/spl-token/src/instructions/approve.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { AccountMeta, PublicKey, Signer, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors';\nimport { addSigners } from './internal';\nimport { TokenInstruction } from './types';\n\n/** TODO: docs */\nexport interface ApproveInstructionData {\n    instruction: TokenInstruction.Approve;\n    amount: bigint;\n}\n\n/** TODO: docs */\nexport const approveInstructionData = struct<ApproveInstructionData>([u8('instruction'), u64('amount')]);\n\n/**\n * Construct an Approve instruction\n *\n * @param account      Account to set the delegate for\n * @param delegate     Account authorized to transfer tokens from the account\n * @param owner        Owner of the account\n * @param amount       Maximum number of tokens the delegate may transfer\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createApproveInstruction(\n    account: PublicKey,\n    delegate: PublicKey,\n    owner: PublicKey,\n    amount: number | bigint,\n    multiSigners: Signer[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners(\n        [\n            { pubkey: account, isSigner: false, isWritable: true },\n            { pubkey: delegate, isSigner: false, isWritable: false },\n        ],\n        owner,\n        multiSigners\n    );\n\n    const data = Buffer.alloc(approveInstructionData.span);\n    approveInstructionData.encode(\n        {\n            instruction: TokenInstruction.Approve,\n            amount: BigInt(amount),\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid Approve instruction */\nexport interface DecodedApproveInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        delegate: AccountMeta;\n        owner: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.Approve;\n        amount: bigint;\n    };\n}\n\n/**\n * Decode an Approve instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeApproveInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedApproveInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== approveInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, delegate, owner, multiSigners },\n        data,\n    } = decodeApproveInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.Approve) throw new TokenInvalidInstructionTypeError();\n    if (!account || !delegate || !owner) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            delegate,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated Approve instruction */\nexport interface DecodedApproveInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        delegate: AccountMeta | undefined;\n        owner: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n        amount: bigint;\n    };\n}\n\n/**\n * Decode an Approve instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeApproveInstructionUnchecked({\n    programId,\n    keys: [account, delegate, owner, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedApproveInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n            delegate,\n            owner,\n            multiSigners,\n        },\n        data: approveInstructionData.decode(data),\n    };\n}\n"]},"metadata":{},"sourceType":"script"}