{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from './../constants.mjs';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from './../errors.mjs';\nimport { addSigners } from './internal.mjs';\nimport { TokenInstruction } from './types.mjs';\n/** TODO: docs */\n\nexport const transferInstructionData = struct([u8('instruction'), u64('amount')]);\n/**\n * Construct a Transfer instruction\n *\n * @param source       Source account\n * @param destination  Destination account\n * @param owner        Owner of the source account\n * @param amount       Number of tokens to transfer\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nexport function createTransferInstruction(source, destination, owner, amount) {\n  let multiSigners = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  let programId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : TOKEN_PROGRAM_ID;\n  const keys = addSigners([{\n    pubkey: source,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: destination,\n    isSigner: false,\n    isWritable: true\n  }], owner, multiSigners);\n  const data = Buffer.alloc(transferInstructionData.span);\n  transferInstructionData.encode({\n    instruction: TokenInstruction.Transfer,\n    amount: BigInt(amount)\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\n * Decode a Transfer instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nexport function decodeTransferInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== transferInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      source,\n      destination,\n      owner,\n      multiSigners\n    },\n    data\n  } = decodeTransferInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.Transfer) throw new TokenInvalidInstructionTypeError();\n  if (!source || !destination || !owner) throw new TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId,\n    keys: {\n      source,\n      destination,\n      owner,\n      multiSigners\n    },\n    data\n  };\n}\n/**\n * Decode a Transfer instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nexport function decodeTransferInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [source, destination, owner, ...multiSigners],\n    data\n  } = _ref;\n  return {\n    programId,\n    keys: {\n      source,\n      destination,\n      owner,\n      multiSigners\n    },\n    data: transferInstructionData.decode(data)\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,MAAT,EAAiBC,EAAjB,QAA2B,uBAA3B;AACA,SAASC,GAAT,QAAoB,6BAApB;AACA,SAAyCC,sBAAzC,QAAuE,iBAAvE;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SACIC,gCADJ,EAEIC,gCAFJ,EAGIC,mCAHJ,EAIIC,gCAJJ,QAKO,iBALP;AAMA,SAASC,UAAT,QAA2B,gBAA3B;AACA,SAASC,gBAAT,QAAiC,aAAjC;AAQA;;AACA,OAAO,MAAMC,uBAAuB,GAAGX,MAAM,CAA0B,CAACC,EAAE,CAAC,aAAD,CAAH,EAAoBC,GAAG,CAAC,QAAD,CAAvB,CAA1B,CAAtC;AAEP;;;;;;;;;;;;;AAYA,OAAM,SAAUU,yBAAV,CACFC,MADE,EAEFC,WAFE,EAGFC,KAHE,EAIFC,MAJE,EAM0B;AAAA,MAD5BC,YAC4B,uEADH,EACG;AAAA,MAA5BC,SAA4B,uEAAhBd,gBAAgB;AAE5B,QAAMe,IAAI,GAAGV,UAAU,CACnB,CACI;AAAEW,UAAM,EAAEP,MAAV;AAAkBQ,YAAQ,EAAE,KAA5B;AAAmCC,cAAU,EAAE;AAA/C,GADJ,EAEI;AAAEF,UAAM,EAAEN,WAAV;AAAuBO,YAAQ,EAAE,KAAjC;AAAwCC,cAAU,EAAE;AAApD,GAFJ,CADmB,EAKnBP,KALmB,EAMnBE,YANmB,CAAvB;AASA,QAAMM,IAAI,GAAGC,MAAM,CAACC,KAAP,CAAad,uBAAuB,CAACe,IAArC,CAAb;AACAf,yBAAuB,CAACgB,MAAxB,CACI;AACIC,eAAW,EAAElB,gBAAgB,CAACmB,QADlC;AAEIb,UAAM,EAAEc,MAAM,CAACd,MAAD;AAFlB,GADJ,EAKIO,IALJ;AAQA,SAAO,IAAIpB,sBAAJ,CAA2B;AAAEgB,QAAF;AAAQD,aAAR;AAAmBK;AAAnB,GAA3B,CAAP;AACH;AAiBD;;;;;;;;;AAQA,OAAM,SAAUQ,yBAAV,CACFH,WADE,EAE0B;AAAA,MAA5BV,SAA4B,uEAAhBd,gBAAgB;AAE5B,MAAI,CAACwB,WAAW,CAACV,SAAZ,CAAsBc,MAAtB,CAA6Bd,SAA7B,CAAL,EAA8C,MAAM,IAAIX,mCAAJ,EAAN;AAC9C,MAAIqB,WAAW,CAACL,IAAZ,CAAiBU,MAAjB,KAA4BtB,uBAAuB,CAACe,IAAxD,EAA8D,MAAM,IAAIrB,gCAAJ,EAAN;AAE9D,QAAM;AACFc,QAAI,EAAE;AAAEN,YAAF;AAAUC,iBAAV;AAAuBC,WAAvB;AAA8BE;AAA9B,KADJ;AAEFM;AAFE,MAGFW,kCAAkC,CAACN,WAAD,CAHtC;AAIA,MAAIL,IAAI,CAACK,WAAL,KAAqBlB,gBAAgB,CAACmB,QAA1C,EAAoD,MAAM,IAAIrB,gCAAJ,EAAN;AACpD,MAAI,CAACK,MAAD,IAAW,CAACC,WAAZ,IAA2B,CAACC,KAAhC,EAAuC,MAAM,IAAIT,gCAAJ,EAAN,CAVX,CAY5B;;AAEA,SAAO;AACHY,aADG;AAEHC,QAAI,EAAE;AACFN,YADE;AAEFC,iBAFE;AAGFC,WAHE;AAIFE;AAJE,KAFH;AAQHM;AARG,GAAP;AAUH;AAiBD;;;;;;;;AAOA,OAAM,SAAUW,kCAAV,OAImB;AAAA,MAJ0B;AAC/ChB,aAD+C;AAE/CC,QAAI,EAAE,CAACN,MAAD,EAASC,WAAT,EAAsBC,KAAtB,EAA6B,GAAGE,YAAhC,CAFyC;AAG/CM;AAH+C,GAI1B;AACrB,SAAO;AACHL,aADG;AAEHC,QAAI,EAAE;AACFN,YADE;AAEFC,iBAFE;AAGFC,WAHE;AAIFE;AAJE,KAFH;AAQHM,QAAI,EAAEZ,uBAAuB,CAACwB,MAAxB,CAA+BZ,IAA/B;AARH,GAAP;AAUH","names":["struct","u8","u64","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","addSigners","TokenInstruction","transferInstructionData","createTransferInstruction","source","destination","owner","amount","multiSigners","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","Transfer","BigInt","decodeTransferInstruction","equals","length","decodeTransferInstructionUnchecked","decode"],"sources":["/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@solana/spl-token/src/instructions/transfer.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { AccountMeta, PublicKey, Signer, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors';\nimport { addSigners } from './internal';\nimport { TokenInstruction } from './types';\n\n/** TODO: docs */\nexport interface TransferInstructionData {\n    instruction: TokenInstruction.Transfer;\n    amount: bigint;\n}\n\n/** TODO: docs */\nexport const transferInstructionData = struct<TransferInstructionData>([u8('instruction'), u64('amount')]);\n\n/**\n * Construct a Transfer instruction\n *\n * @param source       Source account\n * @param destination  Destination account\n * @param owner        Owner of the source account\n * @param amount       Number of tokens to transfer\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createTransferInstruction(\n    source: PublicKey,\n    destination: PublicKey,\n    owner: PublicKey,\n    amount: number | bigint,\n    multiSigners: Signer[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners(\n        [\n            { pubkey: source, isSigner: false, isWritable: true },\n            { pubkey: destination, isSigner: false, isWritable: true },\n        ],\n        owner,\n        multiSigners\n    );\n\n    const data = Buffer.alloc(transferInstructionData.span);\n    transferInstructionData.encode(\n        {\n            instruction: TokenInstruction.Transfer,\n            amount: BigInt(amount),\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid Transfer instruction */\nexport interface DecodedTransferInstruction {\n    programId: PublicKey;\n    keys: {\n        source: AccountMeta;\n        destination: AccountMeta;\n        owner: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.Transfer;\n        amount: bigint;\n    };\n}\n\n/**\n * Decode a Transfer instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeTransferInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedTransferInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== transferInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { source, destination, owner, multiSigners },\n        data,\n    } = decodeTransferInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.Transfer) throw new TokenInvalidInstructionTypeError();\n    if (!source || !destination || !owner) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            source,\n            destination,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated Transfer instruction */\nexport interface DecodedTransferInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        source: AccountMeta | undefined;\n        destination: AccountMeta | undefined;\n        owner: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n        amount: bigint;\n    };\n}\n\n/**\n * Decode a Transfer instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeTransferInstructionUnchecked({\n    programId,\n    keys: [source, destination, owner, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedTransferInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            source,\n            destination,\n            owner,\n            multiSigners,\n        },\n        data: transferInstructionData.decode(data),\n    };\n}\n"]},"metadata":{},"sourceType":"module"}