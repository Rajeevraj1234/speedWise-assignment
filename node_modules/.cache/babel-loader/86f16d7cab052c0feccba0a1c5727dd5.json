{"ast":null,"code":"import EventEmitter from 'eventemitter3';\nimport { PublicKey } from '@solana/web3.js';\nimport bs58 from 'bs58';\n\nclass Wallet extends EventEmitter {\n  constructor(provider, network) {\n    var _this;\n\n    super();\n    _this = this;\n\n    this._handleMessage = e => {\n      if (this._injectedProvider && e.source === window || e.origin === this._providerUrl.origin && e.source === this._popup) {\n        if (e.data.method === 'connected') {\n          const newPublicKey = new PublicKey(e.data.params.publicKey);\n\n          if (!this._publicKey || !this._publicKey.equals(newPublicKey)) {\n            if (this._publicKey && !this._publicKey.equals(newPublicKey)) {\n              this._handleDisconnect();\n            }\n\n            this._publicKey = newPublicKey;\n            this._autoApprove = !!e.data.params.autoApprove;\n            this.emit('connect', this._publicKey);\n          }\n        } else if (e.data.method === 'disconnected') {\n          this._handleDisconnect();\n        } else if (e.data.result || e.data.error) {\n          if (this._responsePromises.has(e.data.id)) {\n            const [resolve, reject] = this._responsePromises.get(e.data.id);\n\n            if (e.data.result) {\n              resolve(e.data.result);\n            } else {\n              reject(new Error(e.data.error));\n            }\n          }\n        }\n      }\n    };\n\n    this._handleConnect = () => {\n      if (!this._handlerAdded) {\n        this._handlerAdded = true;\n        window.addEventListener('message', this._handleMessage);\n        window.addEventListener('beforeunload', this.disconnect);\n      }\n\n      if (this._injectedProvider) {\n        return new Promise(resolve => {\n          this._sendRequest('connect', {});\n\n          resolve();\n        });\n      } else {\n        window.name = 'parent';\n        this._popup = window.open(this._providerUrl.toString(), '_blank', 'location,resizable,width=460,height=675');\n        return new Promise(resolve => {\n          this.once('connect', resolve);\n        });\n      }\n    };\n\n    this._handleDisconnect = () => {\n      if (this._handlerAdded) {\n        this._handlerAdded = false;\n        window.removeEventListener('message', this._handleMessage);\n        window.removeEventListener('beforeunload', this.disconnect);\n      }\n\n      if (this._publicKey) {\n        this._publicKey = null;\n        this.emit('disconnect');\n      }\n\n      this._responsePromises.forEach((_ref, id) => {\n        let [resolve, reject] = _ref;\n\n        this._responsePromises.delete(id);\n\n        reject('Wallet disconnected');\n      });\n    };\n\n    this._sendRequest = async function (method, params) {\n      if (method !== 'connect' && !_this.connected) {\n        throw new Error('Wallet not connected');\n      }\n\n      const requestId = _this._nextRequestId;\n      ++_this._nextRequestId;\n      return new Promise((resolve, reject) => {\n        _this._responsePromises.set(requestId, [resolve, reject]);\n\n        if (_this._injectedProvider) {\n          _this._injectedProvider.postMessage({\n            jsonrpc: '2.0',\n            id: requestId,\n            method,\n            params: {\n              network: _this._network,\n              ...params\n            }\n          });\n        } else {\n          _this._popup.postMessage({\n            jsonrpc: '2.0',\n            id: requestId,\n            method,\n            params\n          }, _this._providerUrl.origin);\n\n          if (!_this.autoApprove) {\n            _this._popup.focus();\n          }\n        }\n      });\n    };\n\n    this.connect = () => {\n      if (this._popup) {\n        this._popup.close();\n      }\n\n      return this._handleConnect();\n    };\n\n    this.disconnect = async function () {\n      if (_this._injectedProvider) {\n        await _this._sendRequest('disconnect', {});\n      }\n\n      if (_this._popup) {\n        _this._popup.close();\n      }\n\n      _this._handleDisconnect();\n    };\n\n    this.sign = async function (data, display) {\n      if (!(data instanceof Uint8Array)) {\n        throw new Error('Data must be an instance of Uint8Array');\n      }\n\n      const response = await _this._sendRequest('sign', {\n        data,\n        display\n      });\n      const signature = bs58.decode(response.signature);\n      const publicKey = new PublicKey(response.publicKey);\n      return {\n        signature,\n        publicKey\n      };\n    };\n\n    this.signTransaction = async function (transaction) {\n      const response = await _this._sendRequest('signTransaction', {\n        message: bs58.encode(transaction.serializeMessage())\n      });\n      const signature = bs58.decode(response.signature);\n      const publicKey = new PublicKey(response.publicKey);\n      transaction.addSignature(publicKey, signature);\n      return transaction;\n    };\n\n    this.signAllTransactions = async function (transactions) {\n      const response = await _this._sendRequest('signAllTransactions', {\n        messages: transactions.map(tx => bs58.encode(tx.serializeMessage()))\n      });\n      const signatures = response.signatures.map(s => bs58.decode(s));\n      const publicKey = new PublicKey(response.publicKey);\n      transactions = transactions.map((tx, idx) => {\n        tx.addSignature(publicKey, signatures[idx]);\n        return tx;\n      });\n      return transactions;\n    };\n\n    if (isInjectedProvider(provider)) {\n      this._injectedProvider = provider;\n    } else if (isString(provider)) {\n      this._providerUrl = new URL(provider);\n      this._providerUrl.hash = new URLSearchParams({\n        origin: window.location.origin,\n        network\n      }).toString();\n    } else {\n      throw new Error('provider parameter must be an injected provider or a URL string.');\n    }\n\n    this._network = network;\n    this._publicKey = null;\n    this._autoApprove = false;\n    this._popup = null;\n    this._handlerAdded = false;\n    this._nextRequestId = 1;\n    this._responsePromises = new Map();\n  }\n\n  get publicKey() {\n    return this._publicKey;\n  }\n\n  get connected() {\n    return this._publicKey !== null;\n  }\n\n  get autoApprove() {\n    return this._autoApprove;\n  }\n\n}\n\nfunction isString(a) {\n  return typeof a === 'string';\n}\n\nfunction isInjectedProvider(a) {\n  return isObject(a) && isFunction(a.postMessage);\n}\n\nfunction isObject(a) {\n  return typeof a === 'object' && a !== null;\n}\n\nfunction isFunction(a) {\n  return typeof a === 'function';\n}\n\nexport default Wallet;","map":{"version":3,"mappings":"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","names":["Wallet","EventEmitter","constructor","provider","network","_this","_handleMessage","e","_injectedProvider","source","window","origin","_providerUrl","_popup","data","method","newPublicKey","PublicKey","params","publicKey","_publicKey","equals","_handleDisconnect","_autoApprove","autoApprove","emit","result","error","_responsePromises","has","id","resolve","reject","get","Error","_handleConnect","_handlerAdded","addEventListener","disconnect","Promise","_sendRequest","name","open","toString","once","removeEventListener","forEach","delete","connected","requestId","_nextRequestId","set","postMessage","jsonrpc","_network","focus","connect","close","sign","display","Uint8Array","response","signature","bs58","decode","signTransaction","transaction","message","encode","serializeMessage","addSignature","signAllTransactions","transactions","messages","map","tx","signatures","s","idx","isInjectedProvider","isString","URL","hash","URLSearchParams","location","Map","a","isObject","isFunction"],"sources":["/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@solflare-wallet/sdk/node_modules/@project-serum/sol-wallet-adapter/src/index.js"],"sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { PublicKey } from '@solana/web3.js';\nimport bs58 from 'bs58';\n\nexport default class Wallet extends EventEmitter {\n  constructor(provider, network) {\n    super();\n    if (isInjectedProvider(provider)) {\n      this._injectedProvider = provider;\n    } else if (isString(provider)) {\n      this._providerUrl = new URL(provider);\n      this._providerUrl.hash = new URLSearchParams({\n        origin: window.location.origin,\n        network,\n      }).toString();\n    } else {\n      throw new Error(\n        'provider parameter must be an injected provider or a URL string.',\n      );\n    }\n    this._network = network;\n    this._publicKey = null;\n    this._autoApprove = false;\n    this._popup = null;\n    this._handlerAdded = false;\n    this._nextRequestId = 1;\n    this._responsePromises = new Map();\n  }\n\n  _handleMessage = (e) => {\n    if (\n      (this._injectedProvider && e.source === window) ||\n      (e.origin === this._providerUrl.origin && e.source === this._popup)\n    ) {\n      if (e.data.method === 'connected') {\n        const newPublicKey = new PublicKey(e.data.params.publicKey);\n        if (!this._publicKey || !this._publicKey.equals(newPublicKey)) {\n          if (this._publicKey && !this._publicKey.equals(newPublicKey)) {\n            this._handleDisconnect();\n          }\n          this._publicKey = newPublicKey;\n          this._autoApprove = !!e.data.params.autoApprove;\n          this.emit('connect', this._publicKey);\n        }\n      } else if (e.data.method === 'disconnected') {\n        this._handleDisconnect();\n      } else if (e.data.result || e.data.error) {\n        if (this._responsePromises.has(e.data.id)) {\n          const [resolve, reject] = this._responsePromises.get(e.data.id);\n          if (e.data.result) {\n            resolve(e.data.result);\n          } else {\n            reject(new Error(e.data.error));\n          }\n        }\n      }\n    }\n  };\n\n  _handleConnect = () => {\n    if (!this._handlerAdded) {\n      this._handlerAdded = true;\n      window.addEventListener('message', this._handleMessage);\n      window.addEventListener('beforeunload', this.disconnect);\n    }\n    if (this._injectedProvider) {\n      return new Promise((resolve) => {\n        this._sendRequest('connect', {});\n        resolve();\n      });\n    } else {\n      window.name = 'parent';\n      this._popup = window.open(\n        this._providerUrl.toString(),\n        '_blank',\n        'location,resizable,width=460,height=675',\n      );\n      return new Promise((resolve) => {\n        this.once('connect', resolve);\n      });\n    }\n  };\n\n  _handleDisconnect = () => {\n    if (this._handlerAdded) {\n      this._handlerAdded = false;\n      window.removeEventListener('message', this._handleMessage);\n      window.removeEventListener('beforeunload', this.disconnect);\n    }\n    if (this._publicKey) {\n      this._publicKey = null;\n      this.emit('disconnect');\n    }\n    this._responsePromises.forEach(([resolve, reject], id) => {\n      this._responsePromises.delete(id);\n      reject('Wallet disconnected');\n    });\n  };\n\n  _sendRequest = async (method, params) => {\n    if (method !== 'connect' && !this.connected) {\n      throw new Error('Wallet not connected');\n    }\n    const requestId = this._nextRequestId;\n    ++this._nextRequestId;\n    return new Promise((resolve, reject) => {\n      this._responsePromises.set(requestId, [resolve, reject]);\n      if (this._injectedProvider) {\n        this._injectedProvider.postMessage({\n          jsonrpc: '2.0',\n          id: requestId,\n          method,\n          params: {\n            network: this._network,\n            ...params,\n          },\n        });\n      } else {\n        this._popup.postMessage(\n          {\n            jsonrpc: '2.0',\n            id: requestId,\n            method,\n            params,\n          },\n          this._providerUrl.origin,\n        );\n\n        if (!this.autoApprove) {\n          this._popup.focus();\n        }\n      }\n    });\n  };\n\n  get publicKey() {\n    return this._publicKey;\n  }\n\n  get connected() {\n    return this._publicKey !== null;\n  }\n\n  get autoApprove() {\n    return this._autoApprove;\n  }\n\n  connect = () => {\n    if (this._popup) {\n      this._popup.close();\n    }\n    return this._handleConnect();\n  };\n\n  disconnect = async () => {\n    if (this._injectedProvider) {\n      await this._sendRequest('disconnect', {});\n    }\n    if (this._popup) {\n      this._popup.close();\n    }\n    this._handleDisconnect();\n  };\n\n  sign = async (data, display) => {\n    if (!(data instanceof Uint8Array)) {\n      throw new Error('Data must be an instance of Uint8Array');\n    }\n\n    const response = await this._sendRequest('sign', {\n      data,\n      display,\n    });\n    const signature = bs58.decode(response.signature);\n    const publicKey = new PublicKey(response.publicKey);\n    return {\n      signature,\n      publicKey,\n    };\n  };\n\n  signTransaction = async (transaction) => {\n    const response = await this._sendRequest('signTransaction', {\n      message: bs58.encode(transaction.serializeMessage()),\n    });\n    const signature = bs58.decode(response.signature);\n    const publicKey = new PublicKey(response.publicKey);\n    transaction.addSignature(publicKey, signature);\n    return transaction;\n  };\n\n  signAllTransactions = async (transactions) => {\n    const response = await this._sendRequest('signAllTransactions', {\n      messages: transactions.map((tx) => bs58.encode(tx.serializeMessage())),\n    });\n    const signatures = response.signatures.map((s) => bs58.decode(s));\n    const publicKey = new PublicKey(response.publicKey);\n    transactions = transactions.map((tx, idx) => {\n      tx.addSignature(publicKey, signatures[idx]);\n      return tx;\n    });\n    return transactions;\n  };\n}\n\nfunction isString(a) {\n  return typeof a === 'string';\n}\n\nfunction isInjectedProvider(a) {\n  return isObject(a) && isFunction(a.postMessage);\n}\n\nfunction isObject(a) {\n  return typeof a === 'object' && a !== null;\n}\n\nfunction isFunction(a) {\n  return typeof a === 'function';\n}\n"]},"metadata":{},"sourceType":"module"}