{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.u256be = exports.u256 = exports.u192be = exports.u192 = exports.u128be = exports.u128 = exports.u64be = exports.u64 = exports.bigIntBE = exports.bigInt = void 0;\n\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\n\nconst bigint_buffer_1 = require(\"bigint-buffer\");\n\nconst base_1 = require(\"./base\");\n\nconst bigInt = length => property => {\n  const layout = (0, buffer_layout_1.blob)(length, property);\n  const {\n    encode,\n    decode\n  } = (0, base_1.encodeDecode)(layout);\n  const bigIntLayout = layout;\n\n  bigIntLayout.decode = (buffer, offset) => {\n    const src = decode(buffer, offset);\n    return (0, bigint_buffer_1.toBigIntLE)(Buffer.from(src));\n  };\n\n  bigIntLayout.encode = (bigInt, buffer, offset) => {\n    const src = (0, bigint_buffer_1.toBufferLE)(bigInt, length);\n    return encode(src, buffer, offset);\n  };\n\n  return bigIntLayout;\n};\n\nexports.bigInt = bigInt;\n\nconst bigIntBE = length => property => {\n  const layout = (0, buffer_layout_1.blob)(length, property);\n  const {\n    encode,\n    decode\n  } = (0, base_1.encodeDecode)(layout);\n  const bigIntLayout = layout;\n\n  bigIntLayout.decode = (buffer, offset) => {\n    const src = decode(buffer, offset);\n    return (0, bigint_buffer_1.toBigIntBE)(Buffer.from(src));\n  };\n\n  bigIntLayout.encode = (bigInt, buffer, offset) => {\n    const src = (0, bigint_buffer_1.toBufferBE)(bigInt, length);\n    return encode(src, buffer, offset);\n  };\n\n  return bigIntLayout;\n};\n\nexports.bigIntBE = bigIntBE;\nexports.u64 = (0, exports.bigInt)(8);\nexports.u64be = (0, exports.bigIntBE)(8);\nexports.u128 = (0, exports.bigInt)(16);\nexports.u128be = (0, exports.bigIntBE)(16);\nexports.u192 = (0, exports.bigInt)(24);\nexports.u192be = (0, exports.bigIntBE)(24);\nexports.u256 = (0, exports.bigInt)(32);\nexports.u256be = (0, exports.bigIntBE)(32);","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEO,MAAMA,MAAM,GACdC,MAAD,IACCC,QAAD,IAAsC;AAClC,QAAMC,MAAM,GAAG,0BAAKF,MAAL,EAAaC,QAAb,CAAf;AACA,QAAM;AAAEE,UAAF;AAAUC;AAAV,MAAqB,yBAAaF,MAAb,CAA3B;AAEA,QAAMG,YAAY,GAAGH,MAArB;;AAEAG,cAAY,CAACD,MAAb,GAAsB,CAACE,MAAD,EAAiBC,MAAjB,KAAmC;AACrD,UAAMC,GAAG,GAAGJ,MAAM,CAACE,MAAD,EAASC,MAAT,CAAlB;AACA,WAAO,gCAAWE,MAAM,CAACC,IAAP,CAAYF,GAAZ,CAAX,CAAP;AACH,GAHD;;AAKAH,cAAY,CAACF,MAAb,GAAsB,CAACJ,MAAD,EAAiBO,MAAjB,EAAiCC,MAAjC,KAAmD;AACrE,UAAMC,GAAG,GAAG,gCAAWT,MAAX,EAAmBC,MAAnB,CAAZ;AACA,WAAOG,MAAM,CAACK,GAAD,EAAMF,MAAN,EAAcC,MAAd,CAAb;AACH,GAHD;;AAKA,SAAOF,YAAP;AACH,CAnBE;;AAAMM,iBAAMZ,MAAN;;AAqBN,MAAMa,QAAQ,GAChBZ,MAAD,IACCC,QAAD,IAAsC;AAClC,QAAMC,MAAM,GAAG,0BAAKF,MAAL,EAAaC,QAAb,CAAf;AACA,QAAM;AAAEE,UAAF;AAAUC;AAAV,MAAqB,yBAAaF,MAAb,CAA3B;AAEA,QAAMG,YAAY,GAAGH,MAArB;;AAEAG,cAAY,CAACD,MAAb,GAAsB,CAACE,MAAD,EAAiBC,MAAjB,KAAmC;AACrD,UAAMC,GAAG,GAAGJ,MAAM,CAACE,MAAD,EAASC,MAAT,CAAlB;AACA,WAAO,gCAAWE,MAAM,CAACC,IAAP,CAAYF,GAAZ,CAAX,CAAP;AACH,GAHD;;AAKAH,cAAY,CAACF,MAAb,GAAsB,CAACJ,MAAD,EAAiBO,MAAjB,EAAiCC,MAAjC,KAAmD;AACrE,UAAMC,GAAG,GAAG,gCAAWT,MAAX,EAAmBC,MAAnB,CAAZ;AACA,WAAOG,MAAM,CAACK,GAAD,EAAMF,MAAN,EAAcC,MAAd,CAAb;AACH,GAHD;;AAKA,SAAOF,YAAP;AACH,CAnBE;;AAAMM,mBAAQC,QAAR;AAqBAD,cAAM,oBAAO,CAAP,CAAN;AAEAA,gBAAQ,sBAAS,CAAT,CAAR;AAEAA,eAAO,oBAAO,EAAP,CAAP;AAEAA,iBAAS,sBAAS,EAAT,CAAT;AAEAA,eAAO,oBAAO,EAAP,CAAP;AAEAA,iBAAS,sBAAS,EAAT,CAAT;AAEAA,eAAO,oBAAO,EAAP,CAAP;AAEAA,iBAAS,sBAAS,EAAT,CAAT","names":["bigInt","length","property","layout","encode","decode","bigIntLayout","buffer","offset","src","Buffer","from","exports","bigIntBE"],"sources":["/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@solana/buffer-layout-utils/src/bigint.ts"],"sourcesContent":["import { blob, Layout } from '@solana/buffer-layout';\nimport { toBigIntBE, toBigIntLE, toBufferBE, toBufferLE } from 'bigint-buffer';\nimport { encodeDecode } from './base';\n\nexport const bigInt =\n    (length: number) =>\n    (property?: string): Layout<bigint> => {\n        const layout = blob(length, property);\n        const { encode, decode } = encodeDecode(layout);\n\n        const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n        bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n            const src = decode(buffer, offset);\n            return toBigIntLE(Buffer.from(src));\n        };\n\n        bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n            const src = toBufferLE(bigInt, length);\n            return encode(src, buffer, offset);\n        };\n\n        return bigIntLayout;\n    };\n\nexport const bigIntBE =\n    (length: number) =>\n    (property?: string): Layout<bigint> => {\n        const layout = blob(length, property);\n        const { encode, decode } = encodeDecode(layout);\n\n        const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n        bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n            const src = decode(buffer, offset);\n            return toBigIntBE(Buffer.from(src));\n        };\n\n        bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n            const src = toBufferBE(bigInt, length);\n            return encode(src, buffer, offset);\n        };\n\n        return bigIntLayout;\n    };\n\nexport const u64 = bigInt(8);\n\nexport const u64be = bigIntBE(8);\n\nexport const u128 = bigInt(16);\n\nexport const u128be = bigIntBE(16);\n\nexport const u192 = bigInt(24);\n\nexport const u192be = bigIntBE(24);\n\nexport const u256 = bigInt(32);\n\nexport const u256be = bigIntBE(32);\n"]},"metadata":{},"sourceType":"script"}