{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeRevokeInstructionUnchecked = exports.decodeRevokeInstruction = exports.createRevokeInstruction = exports.revokeInstructionData = void 0;\n\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst constants_1 = require(\"../constants\");\n\nconst errors_1 = require(\"../errors\");\n\nconst internal_1 = require(\"./internal\");\n\nconst types_1 = require(\"./types\");\n/** TODO: docs */\n\n\nexports.revokeInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction')]);\n/**\n * Construct a Revoke instruction\n *\n * @param account      Address of the token account\n * @param owner        Owner of the account\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nfunction createRevokeInstruction(account, owner) {\n  let multiSigners = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  let programId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : constants_1.TOKEN_PROGRAM_ID;\n  const keys = (0, internal_1.addSigners)([{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }], owner, multiSigners);\n  const data = Buffer.alloc(exports.revokeInstructionData.span);\n  exports.revokeInstructionData.encode({\n    instruction: types_1.TokenInstruction.Revoke\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n\nexports.createRevokeInstruction = createRevokeInstruction;\n/**\n * Decode a Revoke instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nfunction decodeRevokeInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constants_1.TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new errors_1.TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== exports.revokeInstructionData.span) throw new errors_1.TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account,\n      owner,\n      multiSigners\n    },\n    data\n  } = decodeRevokeInstructionUnchecked(instruction);\n  if (data.instruction !== types_1.TokenInstruction.Revoke) throw new errors_1.TokenInvalidInstructionTypeError();\n  if (!account || !owner) throw new errors_1.TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId,\n    keys: {\n      account,\n      owner,\n      multiSigners\n    },\n    data\n  };\n}\n\nexports.decodeRevokeInstruction = decodeRevokeInstruction;\n/**\n * Decode a Revoke instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nfunction decodeRevokeInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [account, owner, ...multiSigners],\n    data\n  } = _ref;\n  return {\n    programId,\n    keys: {\n      account,\n      owner,\n      multiSigners\n    },\n    data: exports.revokeInstructionData.decode(data)\n  };\n}\n\nexports.decodeRevokeInstructionUnchecked = decodeRevokeInstructionUnchecked;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAMA;;AACA;AAOA;;;AACaA,gCAAwB,4BAA8B,CAAC,wBAAG,aAAH,CAAD,CAA9B,CAAxB;AAEb;;;;;;;;;;;AAUA,SAAgBC,uBAAhB,CACIC,OADJ,EAEIC,KAFJ,EAIgC;AAAA,MAD5BC,YAC4B,uEADH,EACG;AAAA,MAA5BC,SAA4B,uEAAhBC,4BAAgB;AAE5B,QAAMC,IAAI,GAAG,2BAAW,CAAC;AAAEC,UAAM,EAAEN,OAAV;AAAmBO,YAAQ,EAAE,KAA7B;AAAoCC,cAAU,EAAE;AAAhD,GAAD,CAAX,EAAqEP,KAArE,EAA4EC,YAA5E,CAAb;AAEA,QAAMO,IAAI,GAAGC,MAAM,CAACC,KAAP,CAAab,8BAAsBc,IAAnC,CAAb;AACAd,gCAAsBe,MAAtB,CAA6B;AAAEC,eAAW,EAAEC,yBAAiBC;AAAhC,GAA7B,EAAuEP,IAAvE;AAEA,SAAO,IAAIQ,gCAAJ,CAA2B;AAAEZ,QAAF;AAAQF,aAAR;AAAmBM;AAAnB,GAA3B,CAAP;AACH;;AAZDX;AA2BA;;;;;;;;;AAQA,SAAgBoB,uBAAhB,CACIJ,WADJ,EAEgC;AAAA,MAA5BX,SAA4B,uEAAhBC,4BAAgB;AAE5B,MAAI,CAACU,WAAW,CAACX,SAAZ,CAAsBgB,MAAtB,CAA6BhB,SAA7B,CAAL,EAA8C,MAAM,IAAIiB,4CAAJ,EAAN;AAC9C,MAAIN,WAAW,CAACL,IAAZ,CAAiBY,MAAjB,KAA4BvB,8BAAsBc,IAAtD,EAA4D,MAAM,IAAIQ,yCAAJ,EAAN;AAE5D,QAAM;AACFf,QAAI,EAAE;AAAEL,aAAF;AAAWC,WAAX;AAAkBC;AAAlB,KADJ;AAEFO;AAFE,MAGFa,gCAAgC,CAACR,WAAD,CAHpC;AAIA,MAAIL,IAAI,CAACK,WAAL,KAAqBC,yBAAiBC,MAA1C,EAAkD,MAAM,IAAII,yCAAJ,EAAN;AAClD,MAAI,CAACpB,OAAD,IAAY,CAACC,KAAjB,EAAwB,MAAM,IAAImB,yCAAJ,EAAN,CAVI,CAY5B;;AAEA,SAAO;AACHjB,aADG;AAEHE,QAAI,EAAE;AACFL,aADE;AAEFC,WAFE;AAGFC;AAHE,KAFH;AAOHO;AAPG,GAAP;AASH;;AAzBDX;AAwCA;;;;;;;;AAOA,SAAgBwB,gCAAhB,OAIyB;AAAA,MAJwB;AAC7CnB,aAD6C;AAE7CE,QAAI,EAAE,CAACL,OAAD,EAAUC,KAAV,EAAiB,GAAGC,YAApB,CAFuC;AAG7CO;AAH6C,GAIxB;AACrB,SAAO;AACHN,aADG;AAEHE,QAAI,EAAE;AACFL,aADE;AAEFC,WAFE;AAGFC;AAHE,KAFH;AAOHO,QAAI,EAAEX,8BAAsByB,MAAtB,CAA6Bd,IAA7B;AAPH,GAAP;AASH;;AAdDX","names":["exports","createRevokeInstruction","account","owner","multiSigners","programId","constants_1","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","types_1","Revoke","web3_js_1","decodeRevokeInstruction","equals","errors_1","length","decodeRevokeInstructionUnchecked","decode"],"sources":["/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@solana/spl-token/src/instructions/revoke.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { AccountMeta, PublicKey, Signer, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors';\nimport { addSigners } from './internal';\nimport { TokenInstruction } from './types';\n\n/** TODO: docs */\nexport interface RevokeInstructionData {\n    instruction: TokenInstruction.Revoke;\n}\n\n/** TODO: docs */\nexport const revokeInstructionData = struct<RevokeInstructionData>([u8('instruction')]);\n\n/**\n * Construct a Revoke instruction\n *\n * @param account      Address of the token account\n * @param owner        Owner of the account\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createRevokeInstruction(\n    account: PublicKey,\n    owner: PublicKey,\n    multiSigners: Signer[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners([{ pubkey: account, isSigner: false, isWritable: true }], owner, multiSigners);\n\n    const data = Buffer.alloc(revokeInstructionData.span);\n    revokeInstructionData.encode({ instruction: TokenInstruction.Revoke }, data);\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid Revoke instruction */\nexport interface DecodedRevokeInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        owner: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.Revoke;\n    };\n}\n\n/**\n * Decode a Revoke instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeRevokeInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedRevokeInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== revokeInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, owner, multiSigners },\n        data,\n    } = decodeRevokeInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.Revoke) throw new TokenInvalidInstructionTypeError();\n    if (!account || !owner) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated Revoke instruction */\nexport interface DecodedRevokeInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        owner: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n    };\n}\n\n/**\n * Decode a Revoke instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeRevokeInstructionUnchecked({\n    programId,\n    keys: [account, owner, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedRevokeInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n            owner,\n            multiSigners,\n        },\n        data: revokeInstructionData.decode(data),\n    };\n}\n"]},"metadata":{},"sourceType":"script"}