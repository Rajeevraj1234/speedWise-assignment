{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { PublicKey } from '@solana/web3.js';\nimport { createLoggerMiddleware, COMMUNICATION_JRPC_METHODS, COMMUNICATION_NOTIFICATIONS, PROVIDER_JRPC_METHODS, PROVIDER_NOTIFICATIONS } from '@toruslabs/base-controllers';\nimport { setAPIKey } from '@toruslabs/http-helpers';\nimport { SafeEventEmitter, ObjectMultiplex, createStreamMiddleware, JRPCEngine, createIdRemapMiddleware, getRpcPromiseCallback, BasePostMessageStream } from '@toruslabs/openlogin-jrpc';\nimport { ethErrors, EthereumRpcError } from 'eth-rpc-errors';\nimport { duplex } from 'is-stream';\nimport pump from 'pump';\nimport loglevel from 'loglevel';\nimport dequal from 'fast-deep-equal';\nvar messages = {\n  errors: {\n    disconnected: () => \"Torus: Lost connection to Torus.\",\n    permanentlyDisconnected: () => \"Torus: Disconnected from iframe. Page reload required.\",\n    unsupportedSync: method => \"Torus: The Torus Ethereum provider does not support synchronous methods like \".concat(method, \" without a callback parameter.\"),\n    invalidDuplexStream: () => \"Must provide a Node.js-style duplex stream.\",\n    invalidOptions: maxEventListeners => \"Invalid options. Received: { maxEventListeners: \".concat(maxEventListeners, \"}\"),\n    invalidRequestArgs: () => \"Expected a single, non-array, object argument.\",\n    invalidRequestMethod: () => \"'args.method' must be a non-empty string.\",\n    invalidRequestParams: () => \"'args.params' must be an object or array if provided.\",\n    invalidLoggerObject: () => \"'args.logger' must be an object if provided.\",\n    invalidLoggerMethod: method => \"'args.logger' must include required method '\".concat(method, \"'.\")\n  },\n  info: {\n    connected: chainId => \"Torus: Connected to chain with ID \\\"\".concat(chainId, \"\\\".\")\n  },\n  warnings: {}\n};\nconst PAYMENT_PROVIDER = {\n  MOONPAY: \"moonpay\",\n  WYRE: \"wyre\",\n  RAMPNETWORK: \"rampnetwork\",\n  XANPOOL: \"xanpool\",\n  MERCURYO: \"mercuryo\",\n  TRANSAK: \"transak\"\n};\nconst TORUS_BUILD_ENV = {\n  PRODUCTION: \"production\",\n  DEVELOPMENT: \"development\",\n  TESTING: \"testing\"\n};\nconst BUTTON_POSITION = {\n  BOTTOM_LEFT: \"bottom-left\",\n  TOP_LEFT: \"top-left\",\n  BOTTOM_RIGHT: \"bottom-right\",\n  TOP_RIGHT: \"top-right\"\n};\nconst LOGIN_PROVIDER = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\",\n  TWITCH: \"twitch\",\n  APPLE: \"apple\",\n  LINE: \"line\",\n  GITHUB: \"github\",\n  KAKAO: \"kakao\",\n  LINKEDIN: \"linkedin\",\n  TWITTER: \"twitter\",\n  WEIBO: \"weibo\",\n  WECHAT: \"wechat\",\n  EMAIL_PASSWORDLESS: \"email_passwordless\"\n};\nconst translations = {\n  en: {\n    embed: {\n      continue: \"Continue\",\n      actionRequired: \"Authorization required\",\n      pendingAction: \"Click continue to proceed with your request in a popup\",\n      cookiesRequired: \"Cookies Required\",\n      enableCookies: \"Please enable cookies in your browser preferences to access Torus\",\n      clickHere: \"More Info\"\n    }\n  },\n  de: {\n    embed: {\n      continue: \"Fortsetzen\",\n      actionRequired: \"Autorisierung erforderlich\",\n      pendingAction: \"Klicken Sie in einem Popup auf Weiter, um mit Ihrer Anfrage fortzufahren\",\n      cookiesRequired: \"Cookies benötigt\",\n      enableCookies: \"Bitte aktivieren Sie Cookies in Ihren Browsereinstellungen, um auf Torus zuzugreifen\",\n      clickHere: \"Mehr Info\"\n    }\n  },\n  ja: {\n    embed: {\n      continue: \"継続する\",\n      actionRequired: \"認証が必要です\",\n      pendingAction: \"続行をクリックして、ポップアップでリクエストを続行します\",\n      cookiesRequired: \"必要なクッキー\",\n      enableCookies: \"Torusにアクセスするには、ブラウザの設定でCookieを有効にしてください。\",\n      clickHere: \"詳しくは\"\n    }\n  },\n  ko: {\n    embed: {\n      continue: \"계속하다\",\n      actionRequired: \"승인 필요\",\n      pendingAction: \"팝업에서 요청을 진행하려면 계속을 클릭하십시오.\",\n      cookiesRequired: \"쿠키 필요\",\n      enableCookies: \"브라우저 환경 설정에서 쿠키를 활성화하여 Torus에 액세스하십시오.\",\n      clickHere: \"더 많은 정보\"\n    }\n  },\n  zh: {\n    embed: {\n      continue: \"继续\",\n      actionRequired: \"需要授权\",\n      pendingAction: \"单击继续以在弹出窗口中继续您的请求\",\n      cookiesRequired: \"必填Cookie\",\n      enableCookies: \"请在您的浏览器首选项中启用cookie以访问Torus。\",\n      clickHere: \"更多信息\"\n    }\n  }\n};\nvar configuration = {\n  supportedVerifierList: [LOGIN_PROVIDER.GOOGLE, LOGIN_PROVIDER.REDDIT, LOGIN_PROVIDER.DISCORD],\n  api: \"https://api.tor.us\",\n  translations,\n  prodTorusUrl: \"\",\n  localStorageKey: \"torus-\".concat(window.location.hostname)\n};\nvar log = loglevel.getLogger(\"solana-embed\");\n/**\n * json-rpc-engine middleware that logs RPC errors and and validates req.method.\n *\n * @param log - The logging API to use.\n * @returns  json-rpc-engine middleware function\n */\n\nfunction createErrorMiddleware() {\n  return (req, res, next) => {\n    // json-rpc-engine will terminate the request when it notices this error\n    if (typeof req.method !== \"string\" || !req.method) {\n      res.error = ethErrors.rpc.invalidRequest({\n        message: \"The request 'method' must be a non-empty string.\",\n        data: req\n      });\n    }\n\n    next(done => {\n      const {\n        error\n      } = res;\n\n      if (!error) {\n        return done();\n      }\n\n      log.error(\"Torus - RPC Error: \".concat(error.message), error);\n      return done();\n    });\n  };\n}\n/**\n * Logs a stream disconnection error. Emits an 'error' if given an\n * EventEmitter that has listeners for the 'error' event.\n *\n * @param log - The logging API to use.\n * @param remoteLabel - The label of the disconnected stream.\n * @param error - The associated error to log.\n * @param emitter - The logging API to use.\n */\n\n\nfunction logStreamDisconnectWarning(remoteLabel, error, emitter) {\n  let warningMsg = \"Torus: Lost connection to \\\"\".concat(remoteLabel, \"\\\".\");\n\n  if (error !== null && error !== void 0 && error.stack) {\n    warningMsg += \"\\n\".concat(error.stack);\n  }\n\n  log.warn(warningMsg);\n\n  if (emitter && emitter.listenerCount(\"error\") > 0) {\n    emitter.emit(\"error\", warningMsg);\n  }\n}\n\nconst getWindowId = () => Math.random().toString(36).slice(2);\n\nconst getTorusUrl = async buildEnv => {\n  let torusUrl;\n  let logLevel; // const versionUsed = version;\n  // log.info(\"solana embed version used: \", versionUsed);\n\n  switch (buildEnv) {\n    case \"testing\":\n      torusUrl = \"https://solana-testing.tor.us\";\n      logLevel = \"debug\";\n      break;\n\n    case \"development\":\n      torusUrl = \"http://localhost:8080\";\n      logLevel = \"debug\";\n      break;\n\n    default:\n      torusUrl = \"https://solana.tor.us\";\n      logLevel = \"error\";\n      break;\n  }\n\n  return {\n    torusUrl,\n    logLevel\n  };\n};\n\nconst getUserLanguage = () => {\n  let userLanguage = window.navigator.language || \"en-US\";\n  const userLanguages = userLanguage.split(\"-\");\n  userLanguage = Object.prototype.hasOwnProperty.call(configuration.translations, userLanguages[0]) ? userLanguages[0] : \"en\";\n  return userLanguage;\n};\n\nconst FEATURES_PROVIDER_CHANGE_WINDOW = {\n  height: 660,\n  width: 375\n};\nconst FEATURES_DEFAULT_WALLET_WINDOW = {\n  height: 740,\n  width: 1315\n};\nconst FEATURES_DEFAULT_POPUP_WINDOW = {\n  height: 700,\n  width: 1200\n};\nconst FEATURES_CONFIRM_WINDOW = {\n  height: 600,\n  width: 400\n};\n\nfunction storageAvailable(type) {\n  let storage;\n\n  try {\n    storage = window[type];\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return e && ( // everything except Firefox\n    e.code === 22 || // Firefox\n    e.code === 1014 || // test name field too, because code might not be present\n    // everything except Firefox\n    e.name === \"QuotaExceededError\" || // Firefox\n    e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") && // acknowledge QuotaExceededError only if there's something already stored\n    storage && storage.length !== 0;\n  }\n}\n/**\n * popup handler utils\n */\n\n\nfunction getPopupFeatures(_ref) {\n  let {\n    width: w,\n    height: h\n  } = _ref; // Fixes dual-screen position                             Most browsers      Firefox\n\n  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n  const width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : window.screen.width;\n  const height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : window.screen.height;\n  const systemZoom = 1; // No reliable estimate\n\n  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  const features = \"titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=\".concat(h / systemZoom, \",width=\").concat(w / systemZoom, \",top=\").concat(top, \",left=\").concat(left);\n  return features;\n}\n\nclass BaseProvider extends SafeEventEmitter {\n  /**\n   * Indicating that this provider is a Torus provider.\n   */\n  constructor(connectionStream, _ref) {\n    let {\n      maxEventListeners = 100,\n      jsonRpcStreamName = \"provider\"\n    } = _ref;\n    super();\n\n    _defineProperty(this, \"isTorus\", void 0);\n\n    _defineProperty(this, \"_rpcEngine\", void 0);\n\n    _defineProperty(this, \"jsonRpcConnectionEvents\", void 0);\n\n    _defineProperty(this, \"_state\", void 0);\n\n    if (!duplex(connectionStream)) {\n      throw new Error(messages.errors.invalidDuplexStream());\n    }\n\n    this.isTorus = true;\n    this.setMaxListeners(maxEventListeners);\n    this._handleConnect = this._handleConnect.bind(this);\n    this._handleDisconnect = this._handleDisconnect.bind(this);\n    this._handleStreamDisconnect = this._handleStreamDisconnect.bind(this);\n    this._rpcRequest = this._rpcRequest.bind(this);\n    this._initializeState = this._initializeState.bind(this);\n    this.request = this.request.bind(this);\n    this.sendAsync = this.sendAsync.bind(this); // this.enable = this.enable.bind(this);\n    // setup connectionStream multiplexing\n\n    const mux = new ObjectMultiplex();\n    pump(connectionStream, mux, connectionStream, this._handleStreamDisconnect.bind(this, \"Torus\")); // ignore phishing warning message (handled elsewhere)\n\n    mux.ignoreStream(\"phishing\"); // setup own event listeners\n    // connect to async provider\n\n    const jsonRpcConnection = createStreamMiddleware();\n    pump(jsonRpcConnection.stream, mux.createStream(jsonRpcStreamName), jsonRpcConnection.stream, this._handleStreamDisconnect.bind(this, \"Torus RpcProvider\")); // handle RPC requests via dapp-side rpc engine\n\n    const rpcEngine = new JRPCEngine();\n    rpcEngine.push(createIdRemapMiddleware());\n    rpcEngine.push(createErrorMiddleware());\n    rpcEngine.push(createLoggerMiddleware({\n      origin: location.origin\n    }));\n    rpcEngine.push(jsonRpcConnection.middleware);\n    this._rpcEngine = rpcEngine;\n    this.jsonRpcConnectionEvents = jsonRpcConnection.events;\n  }\n  /**\n   * Submits an RPC request for the given method, with the given params.\n   * Resolves with the result of the method call, or rejects on error.\n   */\n\n\n  async request(args) {\n    if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestArgs(),\n        data: args\n      });\n    }\n\n    const {\n      method,\n      params\n    } = args;\n\n    if (typeof method !== \"string\" || method.length === 0) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestMethod(),\n        data: args\n      });\n    }\n\n    if (params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestParams(),\n        data: args\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      this._rpcRequest({\n        method,\n        params\n      }, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n\n\n  send(payload, callback) {\n    this._rpcRequest(payload, callback);\n  }\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n\n\n  sendAsync(payload) {\n    return new Promise((resolve, reject) => {\n      this._rpcRequest(payload, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n  /**\n   * Called when connection is lost to critical streams.\n   *\n   * emits TorusInpageProvider#disconnect\n   */\n\n\n  _handleStreamDisconnect(streamName, error) {\n    logStreamDisconnectWarning(streamName, error, this);\n\n    this._handleDisconnect(false, error ? error.message : undefined);\n  }\n\n}\n\nconst handleEvent = function (handle, eventName, handler) {\n  for (var _len = arguments.length, handlerArgs = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n    handlerArgs[_key - 3] = arguments[_key];\n  }\n\n  const handlerWrapper = () => {\n    handler(...handlerArgs);\n    handle.removeEventListener(eventName, handlerWrapper);\n  };\n\n  handle.addEventListener(eventName, handlerWrapper);\n};\n\nasync function documentReady() {\n  return new Promise(resolve => {\n    if (document.readyState !== \"loading\") {\n      resolve();\n    } else {\n      handleEvent(document, \"DOMContentLoaded\", resolve);\n    }\n  });\n}\n\nconst htmlToElement = html => {\n  const template = window.document.createElement(\"template\");\n  const trimmedHtml = html.trim(); // Never return a text node of whitespace as the result\n\n  template.innerHTML = trimmedHtml;\n  return template.content.firstChild;\n};\n\nclass PopupHandler extends SafeEventEmitter {\n  constructor(_ref) {\n    let {\n      url,\n      target,\n      features\n    } = _ref;\n    super();\n\n    _defineProperty(this, \"url\", void 0);\n\n    _defineProperty(this, \"target\", void 0);\n\n    _defineProperty(this, \"features\", void 0);\n\n    _defineProperty(this, \"window\", void 0);\n\n    _defineProperty(this, \"windowTimer\", void 0);\n\n    _defineProperty(this, \"iClosedWindow\", void 0);\n\n    this.url = url;\n    this.target = target || \"_blank\";\n    this.features = features || getPopupFeatures(FEATURES_DEFAULT_POPUP_WINDOW);\n    this.window = undefined;\n    this.windowTimer = undefined;\n    this.iClosedWindow = false;\n\n    this._setupTimer();\n  }\n\n  _setupTimer() {\n    this.windowTimer = Number(setInterval(() => {\n      if (this.window && this.window.closed) {\n        clearInterval(this.windowTimer);\n\n        if (!this.iClosedWindow) {\n          this.emit(\"close\");\n        }\n\n        this.iClosedWindow = false;\n        this.window = undefined;\n      }\n\n      if (this.window === undefined) clearInterval(this.windowTimer);\n    }, 500));\n  }\n\n  open() {\n    var _this$window;\n\n    this.window = window.open(this.url.href, this.target, this.features);\n    if ((_this$window = this.window) !== null && _this$window !== void 0 && _this$window.focus) this.window.focus();\n    return Promise.resolve();\n  }\n\n  close() {\n    this.iClosedWindow = true;\n    if (this.window) this.window.close();\n  }\n\n  redirect(locationReplaceOnRedirect) {\n    if (locationReplaceOnRedirect) {\n      window.location.replace(this.url.href);\n    } else {\n      window.location.href = this.url.href;\n    }\n  }\n\n}\n\nfunction ownKeys$2(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nclass TorusCommunicationProvider extends BaseProvider {\n  constructor(connectionStream, _ref) {\n    let {\n      maxEventListeners = 100,\n      jsonRpcStreamName = \"provider\"\n    } = _ref;\n    super(connectionStream, {\n      maxEventListeners,\n      jsonRpcStreamName\n    }); // private state\n\n    _defineProperty(this, \"embedTranslations\", void 0);\n\n    _defineProperty(this, \"torusUrl\", void 0);\n\n    _defineProperty(this, \"dappStorageKey\", void 0);\n\n    _defineProperty(this, \"windowRefs\", void 0);\n\n    _defineProperty(this, \"tryWindowHandle\", void 0);\n\n    _defineProperty(this, \"torusAlertContainer\", void 0);\n\n    _defineProperty(this, \"torusIframe\", void 0);\n\n    this._state = _objectSpread$2({}, TorusCommunicationProvider._defaultState); // public state\n\n    this.torusUrl = \"\";\n    this.dappStorageKey = \"\";\n    const languageTranslations = configuration.translations[getUserLanguage()];\n    this.embedTranslations = languageTranslations.embed;\n    this.windowRefs = {}; // setup own event listeners\n    // EIP-1193 connect\n\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n\n    const notificationHandler = payload => {\n      const {\n        method,\n        params\n      } = payload;\n\n      if (method === COMMUNICATION_NOTIFICATIONS.IFRAME_STATUS) {\n        const {\n          isFullScreen,\n          rid\n        } = params;\n\n        this._displayIframe({\n          isFull: isFullScreen,\n          rid: rid\n        });\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CREATE_WINDOW) {\n        const {\n          windowId,\n          url\n        } = params;\n\n        this._createPopupBlockAlert(windowId, url);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CLOSE_WINDOW) {\n        this._handleCloseWindow(params);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_IN) {\n        const {\n          currentLoginProvider\n        } = params;\n        this._state.isLoggedIn = true;\n        this._state.currentLoginProvider = currentLoginProvider;\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_OUT) {\n        this._state.isLoggedIn = false;\n        this._state.currentLoginProvider = null;\n\n        this._displayIframe();\n      }\n    };\n\n    this.jsonRpcConnectionEvents.on(\"notification\", notificationHandler);\n  }\n\n  get isLoggedIn() {\n    return this._state.isLoggedIn;\n  }\n\n  get isIFrameFullScreen() {\n    return this._state.isIFrameFullScreen;\n  }\n  /**\n   * Returns whether the inPage provider is connected to Torus.\n   */\n\n\n  isConnected() {\n    return this._state.isConnected;\n  }\n\n  async _initializeState(params) {\n    try {\n      const {\n        torusUrl,\n        dappStorageKey,\n        torusAlertContainer,\n        torusIframe\n      } = params;\n      this.torusUrl = torusUrl;\n      this.dappStorageKey = dappStorageKey;\n      this.torusAlertContainer = torusAlertContainer;\n      this.torusIframe = torusIframe;\n      this.torusIframe.addEventListener(\"load\", () => {\n        // only do this if iframe is not full screen\n        if (!this._state.isIFrameFullScreen) this._displayIframe();\n      });\n      const {\n        currentLoginProvider,\n        isLoggedIn\n      } = await this.request({\n        method: COMMUNICATION_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: []\n      }); // indicate that we've connected, for EIP-1193 compliance\n\n      this._handleConnect(currentLoginProvider, isLoggedIn);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized communication state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n\n  _handleWindow(windowId) {\n    let {\n      url,\n      target,\n      features\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const finalUrl = new URL(url || \"\".concat(this.torusUrl, \"/redirect?windowId=\").concat(windowId));\n\n    if (this.dappStorageKey) {\n      // If multiple instances, it returns the first one\n      if (finalUrl.hash) finalUrl.hash += \"&dappStorageKey=\".concat(this.dappStorageKey);else finalUrl.hash = \"#dappStorageKey=\".concat(this.dappStorageKey);\n    }\n\n    const handledWindow = new PopupHandler({\n      url: finalUrl,\n      target,\n      features\n    });\n    handledWindow.open();\n\n    if (!handledWindow.window) {\n      this._createPopupBlockAlert(windowId, finalUrl.href);\n\n      return;\n    } // Add to collection only if window is opened\n\n\n    this.windowRefs[windowId] = handledWindow; // We tell the iframe that the window has been successfully opened\n\n    this.request({\n      method: COMMUNICATION_JRPC_METHODS.OPENED_WINDOW,\n      params: {\n        windowId\n      }\n    });\n    handledWindow.once(\"close\", () => {\n      // user closed the window\n      delete this.windowRefs[windowId];\n      this.request({\n        method: COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW,\n        params: {\n          windowId\n        }\n      });\n    });\n  }\n\n  _displayIframe() {\n    let {\n      isFull = false,\n      rid = \"\"\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const style = {}; // set phase\n\n    if (!isFull) {\n      style.display = this._state.torusWidgetVisibility ? \"block\" : \"none\";\n      style.height = \"70px\";\n      style.width = \"70px\";\n\n      switch (this._state.buttonPosition) {\n        case BUTTON_POSITION.TOP_LEFT:\n          style.top = \"0px\";\n          style.left = \"0px\";\n          style.right = \"auto\";\n          style.bottom = \"auto\";\n          break;\n\n        case BUTTON_POSITION.TOP_RIGHT:\n          style.top = \"0px\";\n          style.right = \"0px\";\n          style.left = \"auto\";\n          style.bottom = \"auto\";\n          break;\n\n        case BUTTON_POSITION.BOTTOM_RIGHT:\n          style.bottom = \"0px\";\n          style.right = \"0px\";\n          style.top = \"auto\";\n          style.left = \"auto\";\n          break;\n\n        case BUTTON_POSITION.BOTTOM_LEFT:\n        default:\n          style.bottom = \"0px\";\n          style.left = \"0px\";\n          style.top = \"auto\";\n          style.right = \"auto\";\n          break;\n      }\n    } else {\n      style.display = \"block\";\n      style.width = \"100%\";\n      style.height = \"100%\";\n      style.top = \"0px\";\n      style.right = \"0px\";\n      style.left = \"0px\";\n      style.bottom = \"0px\";\n    }\n\n    Object.assign(this.torusIframe.style, style);\n    this._state.isIFrameFullScreen = isFull;\n    this.request({\n      method: COMMUNICATION_JRPC_METHODS.IFRAME_STATUS,\n      params: {\n        isIFrameFullScreen: isFull,\n        rid\n      }\n    });\n  }\n\n  hideTorusButton() {\n    this._state.torusWidgetVisibility = false;\n\n    this._displayIframe();\n  }\n\n  showTorusButton() {\n    this._state.torusWidgetVisibility = true;\n\n    this._displayIframe();\n  }\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n\n\n  _rpcRequest(payload, callback) {\n    const cb = callback;\n    const _payload = payload;\n\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n    }\n\n    this.tryWindowHandle(_payload, cb);\n  }\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param currentLoginProvider - The login Provider\n   * emits TorusInpageProvider#connect\n   */\n\n\n  _handleConnect(currentLoginProvider, isLoggedIn) {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", {\n        currentLoginProvider,\n        isLoggedIn\n      });\n      log.debug(messages.info.connected(currentLoginProvider));\n    }\n  }\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n\n\n  _handleDisconnect(isRecoverable, errorMessage) {\n    if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !isRecoverable) {\n      this._state.isConnected = false;\n      let error;\n\n      if (isRecoverable) {\n        error = new EthereumRpcError(1013, // Try again later\n        errorMessage || messages.errors.disconnected());\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(1011, // Internal error\n        errorMessage || messages.errors.permanentlyDisconnected());\n        log.error(error);\n        this._state.currentLoginProvider = null;\n        this._state.isLoggedIn = false;\n        this._state.torusWidgetVisibility = false;\n        this._state.isIFrameFullScreen = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n\n      this.emit(\"disconnect\", error);\n    }\n  } // Called if the iframe wants to close the window cause it is done processing the request\n\n\n  _handleCloseWindow(params) {\n    const {\n      windowId\n    } = params;\n\n    if (this.windowRefs[windowId]) {\n      this.windowRefs[windowId].close();\n      delete this.windowRefs[windowId];\n    }\n  }\n\n  async _createPopupBlockAlert(windowId, url) {\n    const logoUrl = this.getLogoUrl();\n    const torusAlert = htmlToElement('<div id=\"torusAlert\" class=\"torus-alert--v2\">' + \"<div id=\\\"torusAlert__logo\\\"><img src=\\\"\".concat(logoUrl, \"\\\" /></div>\") + \"<div>\" + \"<h1 id=\\\"torusAlert__title\\\">\".concat(this.embedTranslations.actionRequired, \"</h1>\") + \"<p id=\\\"torusAlert__desc\\\">\".concat(this.embedTranslations.pendingAction, \"</p>\") + \"</div>\" + \"</div>\");\n    const successAlert = htmlToElement(\"<div><a id=\\\"torusAlert__btn\\\">\".concat(this.embedTranslations.continue, \"</a></div>\"));\n    const btnContainer = htmlToElement('<div id=\"torusAlert__btn-container\"></div>');\n    btnContainer.appendChild(successAlert);\n    torusAlert.appendChild(btnContainer);\n\n    const bindOnLoad = () => {\n      successAlert.addEventListener(\"click\", () => {\n        this._handleWindow(windowId, {\n          url,\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW)\n        });\n\n        torusAlert.remove();\n        if (this.torusAlertContainer.children.length === 0) this.torusAlertContainer.style.display = \"none\";\n      });\n    };\n\n    const attachOnLoad = () => {\n      this.torusAlertContainer.appendChild(torusAlert);\n    };\n\n    await documentReady();\n    attachOnLoad();\n    bindOnLoad();\n    this.torusAlertContainer.style.display = \"block\";\n  }\n\n  getLogoUrl() {\n    const logoUrl = \"\".concat(this.torusUrl, \"/images/torus_icon-blue.svg\");\n    return logoUrl;\n  }\n\n}\n\n_defineProperty(TorusCommunicationProvider, \"_defaultState\", {\n  buttonPosition: \"bottom-left\",\n  currentLoginProvider: null,\n  isIFrameFullScreen: false,\n  hasEmittedConnection: false,\n  torusWidgetVisibility: false,\n  initialized: false,\n  isLoggedIn: false,\n  isPermanentlyDisconnected: false,\n  isConnected: false\n});\n\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nclass TorusInPageProvider extends BaseProvider {\n  /**\n   * The chain ID of the currently connected Solana chain.\n   * See [chainId.network]{@link https://chainid.network} for more information.\n   */\n\n  /**\n   * The user's currently selected Solana address.\n   * If null, Torus is either locked or the user has not permitted any\n   * addresses to be viewed.\n   */\n  constructor(connectionStream, _ref) {\n    let {\n      maxEventListeners = 100,\n      jsonRpcStreamName = \"provider\"\n    } = _ref;\n    super(connectionStream, {\n      maxEventListeners,\n      jsonRpcStreamName\n    }); // private state\n\n    _defineProperty(this, \"chainId\", void 0);\n\n    _defineProperty(this, \"selectedAddress\", void 0);\n\n    _defineProperty(this, \"tryWindowHandle\", void 0);\n\n    this._state = _objectSpread$1({}, TorusInPageProvider._defaultState); // public state\n\n    this.selectedAddress = null;\n    this.chainId = null;\n    this._handleAccountsChanged = this._handleAccountsChanged.bind(this);\n    this._handleChainChanged = this._handleChainChanged.bind(this);\n    this._handleUnlockStateChanged = this._handleUnlockStateChanged.bind(this); // setup own event listeners\n    // EIP-1193 connect\n\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n\n    const jsonRpcNotificationHandler = payload => {\n      const {\n        method,\n        params\n      } = payload;\n\n      if (method === PROVIDER_NOTIFICATIONS.ACCOUNTS_CHANGED) {\n        this._handleAccountsChanged(params);\n      } else if (method === PROVIDER_NOTIFICATIONS.UNLOCK_STATE_CHANGED) {\n        this._handleUnlockStateChanged(params);\n      } else if (method === PROVIDER_NOTIFICATIONS.CHAIN_CHANGED) {\n        this._handleChainChanged(params);\n      }\n    }; // json rpc notification listener\n\n\n    this.jsonRpcConnectionEvents.on(\"notification\", jsonRpcNotificationHandler);\n  }\n  /**\n   * Returns whether the inpage provider is connected to Torus.\n   */\n\n\n  isConnected() {\n    return this._state.isConnected;\n  } // Private Methods\n  //= ===================\n\n  /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */\n\n\n  async _initializeState() {\n    try {\n      const {\n        accounts,\n        chainId,\n        isUnlocked\n      } = await this.request({\n        method: PROVIDER_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: []\n      }); // indicate that we've connected, for EIP-1193 compliance\n\n      this.emit(\"connect\", {\n        chainId\n      });\n\n      this._handleChainChanged({\n        chainId\n      });\n\n      this._handleUnlockStateChanged({\n        accounts,\n        isUnlocked\n      });\n\n      this._handleAccountsChanged(accounts);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized provider state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n\n\n  _rpcRequest(payload, callback) {\n    let isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let cb = callback;\n    const _payload = payload;\n\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n\n      if (_payload.method === \"solana_accounts\" || _payload.method === \"solana_requestAccounts\") {\n        // handle accounts changing\n        cb = (err, res) => {\n          this._handleAccountsChanged(res.result || [], _payload.method === \"solana_accounts\", isInternal);\n\n          callback(err, res);\n        };\n      } else if (_payload.method === \"wallet_getProviderState\") {\n        this._rpcEngine.handle(payload, cb);\n\n        return;\n      }\n    }\n\n    this.tryWindowHandle(_payload, cb);\n  }\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits TorusInpageProvider#connect\n   */\n\n\n  _handleConnect(chainId) {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", {\n        chainId\n      });\n      log.debug(messages.info.connected(chainId));\n    }\n  }\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n\n\n  _handleDisconnect(isRecoverable, errorMessage) {\n    if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !isRecoverable) {\n      this._state.isConnected = false;\n      let error;\n\n      if (isRecoverable) {\n        error = new EthereumRpcError(1013, // Try again later\n        errorMessage || messages.errors.disconnected());\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(1011, // Internal error\n        errorMessage || messages.errors.permanentlyDisconnected());\n        log.error(error);\n        this.chainId = null;\n        this._state.accounts = null;\n        this.selectedAddress = null;\n        this._state.isUnlocked = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n\n      this.emit(\"disconnect\", error);\n    }\n  }\n  /**\n   * Called when accounts may have changed.\n   */\n\n\n  _handleAccountsChanged(accounts) {\n    let isEthAccounts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false; // defensive programming\n\n    let finalAccounts = accounts;\n\n    if (!Array.isArray(finalAccounts)) {\n      log.error(\"Torus: Received non-array accounts parameter. Please report this bug.\", finalAccounts);\n      finalAccounts = [];\n    }\n\n    for (const account of accounts) {\n      if (typeof account !== \"string\") {\n        log.error(\"Torus: Received non-string account. Please report this bug.\", accounts);\n        finalAccounts = [];\n        break;\n      }\n    } // emit accountsChanged if anything about the accounts array has changed\n\n\n    if (!dequal(this._state.accounts, finalAccounts)) {\n      // we should always have the correct accounts even before solana_accounts\n      // returns, except in cases where isInternal is true\n      if (isEthAccounts && Array.isArray(this._state.accounts) && this._state.accounts.length > 0 && !isInternal) {\n        log.error('Torus: \"solana_accounts\" unexpectedly updated accounts. Please report this bug.', finalAccounts);\n      }\n\n      this._state.accounts = finalAccounts;\n      this.emit(\"accountsChanged\", finalAccounts);\n    } // handle selectedAddress\n\n\n    if (this.selectedAddress !== finalAccounts[0]) {\n      this.selectedAddress = finalAccounts[0] || null;\n    }\n  }\n  /**\n   * Upon receipt of a new chainId and networkVersion, emits corresponding\n   * events and sets relevant public state.\n   * Does nothing if neither the chainId nor the networkVersion are different\n   * from existing values.\n   *\n   * emits TorusInpageProvider#chainChanged\n   * @param networkInfo - An object with network info.\n   */\n\n\n  _handleChainChanged() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (!chainId) {\n      log.error(\"Torus: Received invalid network parameters. Please report this bug.\", {\n        chainId\n      });\n      return;\n    }\n\n    if (chainId === \"loading\") {\n      this._handleDisconnect(true);\n    } else {\n      this._handleConnect(chainId);\n\n      if (chainId !== this.chainId) {\n        this.chainId = chainId;\n\n        if (this._state.initialized) {\n          this.emit(\"chainChanged\", this.chainId);\n        }\n      }\n    }\n  }\n  /**\n   * Upon receipt of a new isUnlocked state, sets relevant public state.\n   * Calls the accounts changed handler with the received accounts, or an empty\n   * array.\n   *\n   * Does nothing if the received value is equal to the existing value.\n   * There are no lock/unlock events.\n   *\n   * @param opts - Options bag.\n   */\n\n\n  _handleUnlockStateChanged() {\n    let {\n      accounts,\n      isUnlocked\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (typeof isUnlocked !== \"boolean\") {\n      log.error(\"Torus: Received invalid isUnlocked parameter. Please report this bug.\", {\n        isUnlocked\n      });\n      return;\n    }\n\n    if (isUnlocked !== this._state.isUnlocked) {\n      this._state.isUnlocked = isUnlocked;\n\n      this._handleAccountsChanged(accounts || []);\n    }\n  }\n\n}\n\n_defineProperty(TorusInPageProvider, \"_defaultState\", {\n  accounts: null,\n  isConnected: false,\n  isUnlocked: false,\n  initialized: false,\n  isPermanentlyDisconnected: false,\n  hasEmittedConnection: false\n});\n/**\n * Returns whether the given image URL exists\n */\n\n\nfunction imgExists(url) {\n  return new Promise((resolve, reject) => {\n    try {\n      const img = document.createElement(\"img\");\n\n      img.onload = () => resolve(true);\n\n      img.onerror = () => resolve(false);\n\n      img.src = url;\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n/**\n * Extracts a name for the site from the DOM\n */\n\n\nconst getSiteName = window => {\n  const {\n    document\n  } = window;\n  const siteName = document.querySelector('head > meta[property=\"og:site_name\"]');\n\n  if (siteName) {\n    return siteName.content;\n  }\n\n  const metaTitle = document.querySelector('head > meta[name=\"title\"]');\n\n  if (metaTitle) {\n    return metaTitle.content;\n  }\n\n  if (document.title && document.title.length > 0) {\n    return document.title;\n  }\n\n  return window.location.hostname;\n};\n/**\n * Extracts an icon for the site from the DOM\n */\n\n\nasync function getSiteIcon(window) {\n  try {\n    const {\n      document\n    } = window; // Use the site's favicon if it exists\n\n    let icon = document.querySelector('head > link[rel=\"shortcut icon\"]');\n\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    } // Search through available icons in no particular order\n\n\n    icon = Array.from(document.querySelectorAll('head > link[rel=\"icon\"]')).find(_icon => Boolean(_icon.href));\n\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    }\n\n    return \"\";\n  } catch (error) {\n    return \"\";\n  }\n}\n/**\n * Gets site metadata and returns it\n *\n */\n\n\nconst getSiteMetadata = async () => ({\n  name: getSiteName(window),\n  icon: await getSiteIcon(window)\n});\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nconst PROVIDER_UNSAFE_METHODS = [\"send_transaction\", \"sign_transaction\", \"sign_all_transactions\", \"sign_message\", \"connect\"];\nconst COMMUNICATION_UNSAFE_METHODS = [COMMUNICATION_JRPC_METHODS.SET_PROVIDER];\nconst isLocalStorageAvailable = storageAvailable(\"localStorage\"); // preload for iframe doesn't work https://bugs.chromium.org/p/chromium/issues/detail?id=593267\n\n(async function preLoadIframe() {\n  try {\n    if (typeof document === \"undefined\") return;\n    const torusIframeHtml = document.createElement(\"link\");\n    const {\n      torusUrl\n    } = await getTorusUrl(\"production\");\n    torusIframeHtml.href = \"\".concat(torusUrl, \"/frame\");\n    torusIframeHtml.crossOrigin = \"anonymous\";\n    torusIframeHtml.type = \"text/html\";\n    torusIframeHtml.rel = \"prefetch\";\n\n    if (torusIframeHtml.relList && torusIframeHtml.relList.supports) {\n      if (torusIframeHtml.relList.supports(\"prefetch\")) {\n        document.head.appendChild(torusIframeHtml);\n      }\n    }\n  } catch (error) {\n    log.warn(error);\n  }\n})();\n\nclass Torus {\n  constructor() {\n    let {\n      modalZIndex = 99999\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _defineProperty(this, \"isInitialized\", void 0);\n\n    _defineProperty(this, \"torusAlert\", void 0);\n\n    _defineProperty(this, \"modalZIndex\", void 0);\n\n    _defineProperty(this, \"alertZIndex\", void 0);\n\n    _defineProperty(this, \"requestedLoginProvider\", void 0);\n\n    _defineProperty(this, \"provider\", void 0);\n\n    _defineProperty(this, \"communicationProvider\", void 0);\n\n    _defineProperty(this, \"dappStorageKey\", void 0);\n\n    _defineProperty(this, \"torusAlertContainer\", void 0);\n\n    _defineProperty(this, \"torusUrl\", void 0);\n\n    _defineProperty(this, \"torusIframe\", void 0);\n\n    _defineProperty(this, \"styleLink\", void 0);\n\n    this.torusUrl = \"\";\n    this.isInitialized = false; // init done\n\n    this.requestedLoginProvider = null;\n    this.modalZIndex = modalZIndex;\n    this.alertZIndex = modalZIndex + 1000;\n    this.dappStorageKey = \"\";\n  }\n\n  get isLoggedIn() {\n    if (!this.communicationProvider) return false;\n    return this.communicationProvider.isLoggedIn;\n  }\n\n  async init() {\n    let {\n      buildEnv = TORUS_BUILD_ENV.PRODUCTION,\n      enableLogging = false,\n      network,\n      showTorusButton = false,\n      useLocalStorage = false,\n      buttonPosition = BUTTON_POSITION.BOTTOM_LEFT,\n      apiKey = \"torus-default\",\n      extraParams = {}\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (this.isInitialized) throw new Error(\"Already initialized\");\n    setAPIKey(apiKey);\n    const {\n      torusUrl,\n      logLevel\n    } = await getTorusUrl(buildEnv);\n    log.info(torusUrl, \"url loaded\");\n    this.torusUrl = torusUrl;\n    log.setDefaultLevel(logLevel);\n    if (enableLogging) log.enableAll();else log.disableAll();\n    const dappStorageKey = this.handleDappStorageKey(useLocalStorage);\n    const torusIframeUrl = new URL(torusUrl);\n    if (torusIframeUrl.pathname.endsWith(\"/\")) torusIframeUrl.pathname += \"frame\";else torusIframeUrl.pathname += \"/frame\";\n    const hashParams = new URLSearchParams();\n    if (dappStorageKey) hashParams.append(\"dappStorageKey\", dappStorageKey);\n    hashParams.append(\"origin\", window.location.origin);\n    torusIframeUrl.hash = hashParams.toString(); // Iframe code\n\n    this.torusIframe = htmlToElement(\"<iframe\\n        id=\\\"torusIframe\\\"\\n        class=\\\"torusIframe\\\"\\n        src=\\\"\".concat(torusIframeUrl.href, \"\\\"\\n        style=\\\"display: none; position: fixed; top: 0; right: 0; width: 100%;\\n        height: 100%; border: none; border-radius: 0; z-index: \").concat(this.modalZIndex.toString(), \"\\\"\\n      ></iframe>\"));\n    this.torusAlertContainer = htmlToElement(\"<div id=\\\"torusAlertContainer\\\" style=\\\"display:none; z-index: \".concat(this.alertZIndex.toString(), \"\\\"></div>\"));\n    this.styleLink = htmlToElement(\"<link href=\\\"\".concat(torusUrl, \"/css/widget.css\\\" rel=\\\"stylesheet\\\" type=\\\"text/css\\\">\"));\n\n    const handleSetup = async () => {\n      return new Promise((resolve, reject) => {\n        try {\n          window.document.head.appendChild(this.styleLink);\n          window.document.body.appendChild(this.torusIframe);\n          window.document.body.appendChild(this.torusAlertContainer);\n          this.torusIframe.addEventListener(\"load\", async () => {\n            const dappMetadata = await getSiteMetadata(); // send init params here\n\n            this.torusIframe.contentWindow.postMessage({\n              buttonPosition,\n              apiKey,\n              network,\n              dappMetadata,\n              extraParams\n            }, torusIframeUrl.origin);\n            await this._setupWeb3({\n              torusUrl\n            });\n            if (showTorusButton) this.showTorusButton();else this.hideTorusButton();\n            this.isInitialized = true;\n            window.torus = this;\n            resolve();\n          });\n        } catch (error) {\n          reject(error);\n        }\n      });\n    };\n\n    await documentReady();\n    await handleSetup();\n  }\n\n  async login() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n\n    try {\n      this.requestedLoginProvider = params.loginProvider || null;\n\n      if (!this.requestedLoginProvider) {\n        this.communicationProvider._displayIframe({\n          isFull: true\n        });\n      } // If user is already logged in, we assume they have given access to the website\n\n\n      const res = await new Promise((resolve, reject) => {\n        // We use this method because we want to update inPage provider state with account info\n        this.provider._rpcRequest({\n          method: \"solana_requestAccounts\",\n          params: [this.requestedLoginProvider, params.login_hint]\n        }, getRpcPromiseCallback(resolve, reject));\n      });\n\n      if (Array.isArray(res) && res.length > 0) {\n        return res;\n      } // This would never happen, but just in case\n\n\n      throw new Error(\"Login failed\");\n    } catch (error) {\n      log.error(\"login failed\", error);\n      throw error;\n    } finally {\n      if (this.communicationProvider.isIFrameFullScreen) this.communicationProvider._displayIframe();\n    }\n  }\n\n  async loginWithPrivateKey(loginParams) {\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n    const {\n      privateKey,\n      userInfo\n    } = loginParams;\n    const {\n      success\n    } = await this.communicationProvider.request({\n      method: \"login_with_private_key\",\n      params: {\n        privateKey,\n        userInfo\n      }\n    });\n    if (!success) throw new Error(\"Login Failed\");\n  }\n\n  async logout() {\n    if (!this.communicationProvider.isLoggedIn) throw new Error(\"Not logged in\");\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.LOGOUT,\n      params: []\n    });\n    this.requestedLoginProvider = null;\n  }\n\n  async cleanUp() {\n    if (this.communicationProvider.isLoggedIn) {\n      await this.logout();\n    }\n\n    this.clearInit();\n  }\n\n  clearInit() {\n    function isElement(element) {\n      return element instanceof Element || element instanceof Document;\n    }\n\n    if (isElement(this.styleLink) && window.document.body.contains(this.styleLink)) {\n      this.styleLink.remove();\n      this.styleLink = undefined;\n    }\n\n    if (isElement(this.torusIframe) && window.document.body.contains(this.torusIframe)) {\n      this.torusIframe.remove();\n      this.torusIframe = undefined;\n    }\n\n    if (isElement(this.torusAlertContainer) && window.document.body.contains(this.torusAlertContainer)) {\n      this.torusAlert = undefined;\n      this.torusAlertContainer.remove();\n      this.torusAlertContainer = undefined;\n    }\n\n    this.isInitialized = false;\n  }\n\n  hideTorusButton() {\n    this.communicationProvider.hideTorusButton();\n  }\n\n  showTorusButton() {\n    this.communicationProvider.showTorusButton();\n  }\n\n  async setProvider(params) {\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.SET_PROVIDER,\n      params: _objectSpread({}, params)\n    });\n  }\n\n  async showWallet(path) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const instanceId = await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.WALLET_INSTANCE_ID,\n      params: []\n    });\n    const finalPath = path ? \"/\".concat(path) : \"\";\n    const finalUrl = new URL(\"\".concat(this.torusUrl, \"/wallet\").concat(finalPath)); // Using URL constructor to prevent js injection and allow parameter validation.!\n\n    finalUrl.searchParams.append(\"instanceId\", instanceId);\n    Object.keys(params).forEach(x => {\n      finalUrl.searchParams.append(x, params[x]);\n    });\n\n    if (this.dappStorageKey) {\n      finalUrl.hash = \"#dappStorageKey=\".concat(this.dappStorageKey);\n    } // No need to track this window state. Hence, no _handleWindow call.\n\n\n    const walletWindow = new PopupHandler({\n      url: finalUrl,\n      features: getPopupFeatures(FEATURES_DEFAULT_WALLET_WINDOW)\n    });\n    walletWindow.open();\n  }\n\n  async getUserInfo() {\n    const userInfoResponse = await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.USER_INFO,\n      params: []\n    });\n    return userInfoResponse;\n  }\n\n  async initiateTopup(provider, params) {\n    if (!this.isInitialized) throw new Error(\"Torus is not initialized\");\n    const windowId = getWindowId();\n\n    this.communicationProvider._handleWindow(windowId);\n\n    const topupResponse = await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.TOPUP,\n      params: {\n        provider,\n        params,\n        windowId\n      }\n    });\n    return topupResponse;\n  } // Solana specific API\n\n\n  async getAccounts() {\n    const response = await this.provider.request({\n      method: \"getAccounts\",\n      params: []\n    });\n    return response;\n  }\n\n  async sendTransaction(transaction) {\n    const response = await this.provider.request({\n      method: \"send_transaction\",\n      params: {\n        message: transaction.serialize({\n          requireAllSignatures: false\n        }).toString(\"hex\")\n      }\n    });\n    return response;\n  }\n\n  async signTransaction(transaction) {\n    const response = await this.provider.request({\n      method: \"sign_transaction\",\n      params: {\n        message: transaction.serializeMessage().toString(\"hex\"),\n        messageOnly: true\n      }\n    }); // reconstruct signature pair\n\n    const parsed = JSON.parse(response);\n    const signature = {\n      publicKey: new PublicKey(parsed.publicKey),\n      signature: Buffer.from(parsed.signature, \"hex\")\n    };\n    transaction.addSignature(signature.publicKey, signature.signature);\n    return transaction;\n  }\n\n  async signAllTransactions(transactions) {\n    const encodedMessage = transactions.map(tx => {\n      return tx.serializeMessage().toString(\"hex\");\n    });\n    const responses = await this.provider.request({\n      method: \"sign_all_transactions\",\n      params: {\n        message: encodedMessage,\n        messageOnly: true\n      }\n    }); // reconstruct signature pairs\n\n    const signatures = responses.map(item => {\n      const parsed = JSON.parse(item);\n      return {\n        publicKey: new PublicKey(parsed.publicKey),\n        signature: Buffer.from(parsed.signature, \"hex\")\n      };\n    });\n    transactions.forEach((tx, idx) => {\n      tx.addSignature(signatures[idx].publicKey, signatures[idx].signature);\n      return tx;\n    });\n    return transactions;\n  }\n\n  async signMessage(data) {\n    const response = await this.provider.request({\n      method: \"sign_message\",\n      params: {\n        data\n      }\n    });\n    return response;\n  }\n\n  async getGaslessPublicKey() {\n    const response = await this.provider.request({\n      method: \"get_gasless_public_key\",\n      params: []\n    });\n    return response;\n  } // async connect(): Promise<boolean> {\n  //   const response = (await this.provider.request({\n  //     method: \"connect\",\n  //     params: {},\n  //   })) as boolean;\n  //   return response;\n  // }\n\n\n  handleDappStorageKey(useLocalStorage) {\n    let dappStorageKey = \"\";\n\n    if (isLocalStorageAvailable && useLocalStorage) {\n      const storedKey = window.localStorage.getItem(configuration.localStorageKey);\n      if (storedKey) dappStorageKey = storedKey;else {\n        const generatedKey = \"torus-app-\".concat(getWindowId());\n        window.localStorage.setItem(configuration.localStorageKey, generatedKey);\n        dappStorageKey = generatedKey;\n      }\n    }\n\n    this.dappStorageKey = dappStorageKey;\n    return dappStorageKey;\n  }\n\n  async _setupWeb3(providerParams) {\n    log.info(\"setupWeb3 running\"); // setup background connection\n\n    const providerStream = new BasePostMessageStream({\n      name: \"embed_torus\",\n      target: \"iframe_torus\",\n      targetWindow: this.torusIframe.contentWindow\n    }); // We create another LocalMessageDuplexStream for communication between dapp <> iframe\n\n    const communicationStream = new BasePostMessageStream({\n      name: \"embed_communication\",\n      target: \"iframe_communication\",\n      targetWindow: this.torusIframe.contentWindow\n    }); // compose the inPage provider\n\n    const inPageProvider = new TorusInPageProvider(providerStream, {});\n    const communicationProvider = new TorusCommunicationProvider(communicationStream, {});\n\n    inPageProvider.tryWindowHandle = (payload, cb) => {\n      const _payload = payload;\n\n      if (!Array.isArray(_payload) && PROVIDER_UNSAFE_METHODS.includes(_payload.method)) {\n        if (!this.communicationProvider.isLoggedIn) throw new Error(\"User Not Logged In\");\n        const windowId = getWindowId();\n\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW)\n        }); // for inPageProvider methods sending windowId in request instead of params\n        // as params might be positional.\n\n\n        _payload.windowId = windowId;\n      }\n\n      inPageProvider._rpcEngine.handle(_payload, cb);\n    };\n\n    communicationProvider.tryWindowHandle = (payload, cb) => {\n      const _payload = payload;\n\n      if (!Array.isArray(_payload) && COMMUNICATION_UNSAFE_METHODS.includes(_payload.method)) {\n        const windowId = getWindowId();\n\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_PROVIDER_CHANGE_WINDOW) // todo: are these features generic for all\n\n        }); // for communication methods sending window id in jrpc req params\n\n\n        _payload.params.windowId = windowId;\n      }\n\n      communicationProvider._rpcEngine.handle(_payload, cb);\n    }; // detect solana_requestAccounts and pipe to enable for now\n\n\n    const detectAccountRequestPrototypeModifier = m => {\n      const originalMethod = inPageProvider[m]; // eslint-disable-next-line @typescript-eslint/no-this-alias\n\n      const self = this;\n\n      inPageProvider[m] = function providerFunc(request, cb) {\n        const {\n          method,\n          params = []\n        } = request;\n\n        if (method === \"solana_requestAccounts\") {\n          if (!cb) return self.login({\n            loginProvider: params[0]\n          });\n          self.login({\n            loginProvider: params[0]\n          }) // eslint-disable-next-line promise/no-callback-in-promise\n          .then(res => cb(null, res)) // eslint-disable-next-line promise/no-callback-in-promise\n          .catch(err => cb(err));\n        }\n\n        return originalMethod.apply(this, [request, cb]);\n      };\n    }; // Detects call to solana_requestAccounts in request & sendAsync and passes to login\n\n\n    detectAccountRequestPrototypeModifier(\"request\");\n    detectAccountRequestPrototypeModifier(\"sendAsync\");\n    detectAccountRequestPrototypeModifier(\"send\");\n    const proxiedInPageProvider = new Proxy(inPageProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true\n    });\n    const proxiedCommunicationProvider = new Proxy(communicationProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true\n    });\n    this.provider = proxiedInPageProvider;\n    this.communicationProvider = proxiedCommunicationProvider;\n    await Promise.all([inPageProvider._initializeState(), communicationProvider._initializeState(_objectSpread(_objectSpread({}, providerParams), {}, {\n      dappStorageKey: this.dappStorageKey,\n      torusAlertContainer: this.torusAlertContainer,\n      torusIframe: this.torusIframe\n    }))]);\n    log.debug(\"Torus - injected provider\");\n  }\n\n}\n\nexport { BUTTON_POSITION, LOGIN_PROVIDER, PAYMENT_PROVIDER, TORUS_BUILD_ENV, TorusInPageProvider, Torus as default };","map":{"version":3,"mappings":"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","names":["errors","disconnected","permanentlyDisconnected","unsupportedSync","method","invalidDuplexStream","invalidOptions","maxEventListeners","invalidRequestArgs","invalidRequestMethod","invalidRequestParams","invalidLoggerObject","invalidLoggerMethod","info","connected","chainId","warnings","PAYMENT_PROVIDER","MOONPAY","WYRE","RAMPNETWORK","XANPOOL","MERCURYO","TRANSAK","TORUS_BUILD_ENV","PRODUCTION","DEVELOPMENT","TESTING","BUTTON_POSITION","BOTTOM_LEFT","TOP_LEFT","BOTTOM_RIGHT","TOP_RIGHT","LOGIN_PROVIDER","GOOGLE","FACEBOOK","REDDIT","DISCORD","TWITCH","APPLE","LINE","GITHUB","KAKAO","LINKEDIN","TWITTER","WEIBO","WECHAT","EMAIL_PASSWORDLESS","translations","en","embed","continue","actionRequired","pendingAction","cookiesRequired","enableCookies","clickHere","de","ja","ko","zh","supportedVerifierList","api","prodTorusUrl","localStorageKey","window","location","hostname","loglevel","getLogger","createErrorMiddleware","req","res","next","error","ethErrors","rpc","invalidRequest","message","data","done","log","logStreamDisconnectWarning","remoteLabel","emitter","warningMsg","stack","warn","listenerCount","emit","getWindowId","Math","random","toString","slice","getTorusUrl","buildEnv","torusUrl","logLevel","getUserLanguage","userLanguage","navigator","language","userLanguages","split","Object","prototype","hasOwnProperty","call","config","FEATURES_PROVIDER_CHANGE_WINDOW","height","width","FEATURES_DEFAULT_WALLET_WINDOW","FEATURES_DEFAULT_POPUP_WINDOW","FEATURES_CONFIRM_WINDOW","storageAvailable","type","storage","x","setItem","removeItem","e","code","name","length","getPopupFeatures","_ref","w","h","dualScreenLeft","screenLeft","undefined","screenX","dualScreenTop","screenTop","screenY","innerWidth","document","documentElement","clientWidth","screen","innerHeight","clientHeight","systemZoom","left","abs","top","features","BaseProvider","SafeEventEmitter","constructor","jsonRpcStreamName","_defineProperty","isDuplexStream","connectionStream","Error","messages","isTorus","setMaxListeners","_handleConnect","bind","_handleDisconnect","_handleStreamDisconnect","_rpcRequest","_initializeState","request","sendAsync","mux","ObjectMultiplex","pump","ignoreStream","jsonRpcConnection","createStreamMiddleware","stream","createStream","rpcEngine","JRPCEngine","push","createIdRemapMiddleware","createLoggerMiddleware","origin","middleware","_rpcEngine","jsonRpcConnectionEvents","events","args","Array","isArray","params","Promise","resolve","reject","getRpcPromiseCallback","send","payload","callback","streamName","handleEvent","handle","eventName","handler","handlerArgs","arguments","handlerWrapper","removeEventListener","addEventListener","documentReady","readyState","htmlToElement","html","template","createElement","trimmedHtml","trim","innerHTML","content","firstChild","PopupHandler","url","target","windowTimer","iClosedWindow","_setupTimer","Number","setInterval","closed","clearInterval","open","href","focus","close","redirect","locationReplaceOnRedirect","replace","TorusCommunicationProvider","_state","_defaultState","dappStorageKey","languageTranslations","configuration","embedTranslations","windowRefs","on","isConnected","notificationHandler","COMMUNICATION_NOTIFICATIONS","IFRAME_STATUS","isFullScreen","rid","_displayIframe","isFull","CREATE_WINDOW","windowId","_createPopupBlockAlert","CLOSE_WINDOW","_handleCloseWindow","USER_LOGGED_IN","currentLoginProvider","isLoggedIn","USER_LOGGED_OUT","isIFrameFullScreen","torusAlertContainer","torusIframe","COMMUNICATION_JRPC_METHODS","GET_PROVIDER_STATE","initialized","_handleWindow","finalUrl","URL","concat","hash","handledWindow","OPENED_WINDOW","once","CLOSED_WINDOW","style","display","torusWidgetVisibility","buttonPosition","right","bottom","assign","hideTorusButton","showTorusButton","cb","_payload","jsonrpc","tryWindowHandle","debug","isRecoverable","errorMessage","isPermanentlyDisconnected","EthereumRpcError","logoUrl","getLogoUrl","torusAlert","successAlert","btnContainer","appendChild","bindOnLoad","remove","children","attachOnLoad","hasEmittedConnection","TorusInPageProvider","selectedAddress","_handleAccountsChanged","_handleChainChanged","_handleUnlockStateChanged","jsonRpcNotificationHandler","PROVIDER_NOTIFICATIONS","ACCOUNTS_CHANGED","UNLOCK_STATE_CHANGED","CHAIN_CHANGED","accounts","isUnlocked","PROVIDER_JRPC_METHODS","isInternal","err","result","isEthAccounts","finalAccounts","account","dequal","imgExists","img","onload","onerror","src","getSiteName","siteName","querySelector","metaTitle","title","getSiteIcon","icon","from","querySelectorAll","find","_icon","Boolean","getSiteMetadata","PROVIDER_UNSAFE_METHODS","COMMUNICATION_UNSAFE_METHODS","SET_PROVIDER","isLocalStorageAvailable","preLoadIframe","torusIframeHtml","crossOrigin","rel","relList","supports","head","Torus","modalZIndex","isInitialized","requestedLoginProvider","alertZIndex","communicationProvider","init","enableLogging","network","useLocalStorage","apiKey","extraParams","setAPIKey","setDefaultLevel","enableAll","disableAll","handleDappStorageKey","torusIframeUrl","pathname","endsWith","hashParams","URLSearchParams","append","styleLink","handleSetup","body","dappMetadata","contentWindow","postMessage","_setupWeb3","torus","login","loginProvider","provider","login_hint","loginWithPrivateKey","loginParams","privateKey","userInfo","success","logout","LOGOUT","cleanUp","clearInit","isElement","element","Element","Document","contains","setProvider","showWallet","path","instanceId","WALLET_INSTANCE_ID","finalPath","searchParams","keys","forEach","walletWindow","getUserInfo","userInfoResponse","USER_INFO","initiateTopup","topupResponse","TOPUP","getAccounts","response","sendTransaction","transaction","serialize","requireAllSignatures","signTransaction","serializeMessage","messageOnly","parsed","JSON","parse","signature","publicKey","PublicKey","Buffer","addSignature","signAllTransactions","transactions","encodedMessage","map","tx","responses","signatures","item","idx","signMessage","getGaslessPublicKey","storedKey","localStorage","getItem","generatedKey","providerParams","providerStream","BasePostMessageStream","targetWindow","communicationStream","inPageProvider","includes","detectAccountRequestPrototypeModifier","m","originalMethod","self","providerFunc","then","catch","apply","proxiedInPageProvider","Proxy","deleteProperty","proxiedCommunicationProvider","all"],"sources":["/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@toruslabs/solana-embed/src/messages.ts","/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@toruslabs/solana-embed/src/interfaces.ts","/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@toruslabs/solana-embed/src/config.ts","/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@toruslabs/solana-embed/src/loglevel.ts","/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@toruslabs/solana-embed/src/utils.ts","/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@toruslabs/solana-embed/src/baseProvider.ts","/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@toruslabs/solana-embed/src/embedUtils.ts","/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@toruslabs/solana-embed/src/PopupHandler.ts","/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@toruslabs/solana-embed/src/communicationProvider.ts","/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@toruslabs/solana-embed/src/inPageProvider.ts","/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@toruslabs/solana-embed/src/siteMetadata.ts","/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@toruslabs/solana-embed/src/embed.ts"],"sourcesContent":["export default {\n  errors: {\n    disconnected: (): string => \"Torus: Lost connection to Torus.\",\n    permanentlyDisconnected: (): string => \"Torus: Disconnected from iframe. Page reload required.\",\n    unsupportedSync: (method: string): string =>\n      `Torus: The Torus Ethereum provider does not support synchronous methods like ${method} without a callback parameter.`,\n    invalidDuplexStream: (): string => \"Must provide a Node.js-style duplex stream.\",\n    invalidOptions: (maxEventListeners: number): string => `Invalid options. Received: { maxEventListeners: ${maxEventListeners}}`,\n    invalidRequestArgs: (): string => `Expected a single, non-array, object argument.`,\n    invalidRequestMethod: (): string => `'args.method' must be a non-empty string.`,\n    invalidRequestParams: (): string => `'args.params' must be an object or array if provided.`,\n    invalidLoggerObject: (): string => `'args.logger' must be an object if provided.`,\n    invalidLoggerMethod: (method: string): string => `'args.logger' must include required method '${method}'.`,\n  },\n  info: {\n    connected: (chainId: string): string => `Torus: Connected to chain with ID \"${chainId}\".`,\n  },\n  warnings: {},\n};\n","import { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\n\nexport const PAYMENT_PROVIDER = {\n  MOONPAY: \"moonpay\",\n  WYRE: \"wyre\",\n  RAMPNETWORK: \"rampnetwork\",\n  XANPOOL: \"xanpool\",\n  MERCURYO: \"mercuryo\",\n  TRANSAK: \"transak\",\n} as const;\n\nexport const TORUS_BUILD_ENV = {\n  PRODUCTION: \"production\",\n  DEVELOPMENT: \"development\",\n  TESTING: \"testing\",\n} as const;\n\nexport type PAYMENT_PROVIDER_TYPE = typeof PAYMENT_PROVIDER[keyof typeof PAYMENT_PROVIDER];\n\nexport type TORUS_BUILD_ENV_TYPE = typeof TORUS_BUILD_ENV[keyof typeof TORUS_BUILD_ENV];\n\nexport const BUTTON_POSITION = {\n  BOTTOM_LEFT: \"bottom-left\",\n  TOP_LEFT: \"top-left\",\n  BOTTOM_RIGHT: \"bottom-right\",\n  TOP_RIGHT: \"top-right\",\n} as const;\n\nexport type EMBED_TRANSLATION_ITEM = {\n  continue: string;\n  actionRequired: string;\n  pendingAction: string;\n  cookiesRequired: string;\n  enableCookies: string;\n  clickHere: string;\n};\n\nexport type BUTTON_POSITION_TYPE = typeof BUTTON_POSITION[keyof typeof BUTTON_POSITION];\n\nexport type WALLET_PATH = \"transfer\" | \"topup\" | \"home\" | \"settings\" | \"history\";\n\nexport const LOGIN_PROVIDER = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\",\n  TWITCH: \"twitch\",\n  APPLE: \"apple\",\n  LINE: \"line\",\n  GITHUB: \"github\",\n  KAKAO: \"kakao\",\n  LINKEDIN: \"linkedin\",\n  TWITTER: \"twitter\",\n  WEIBO: \"weibo\",\n  WECHAT: \"wechat\",\n  EMAIL_PASSWORDLESS: \"email_passwordless\",\n} as const;\n\nexport type LOGIN_PROVIDER_TYPE = typeof LOGIN_PROVIDER[keyof typeof LOGIN_PROVIDER];\n\nexport interface TorusCtorArgs {\n  /**\n   * Z-index of the modal and iframe\n   * @defaultValue 99999\n   */\n  modalZIndex?: number;\n}\n\nexport interface NetworkInterface {\n  /**\n   * Block explorer url for the chain\n   * @example https://explorer.solana.com/\n   */\n  blockExplorerUrl: string;\n  /**\n   * Logo url for the base token\n   */\n  logo: string;\n  /**\n   * Name for ticker\n   * @example 'Solana'\n   */\n  tickerName: string;\n  /**\n   * Symbol for ticker\n   * @example SOL\n   */\n  ticker: string;\n  /**\n   * RPC target Url for the chain\n   * @example https://api.devnet.solana.com/\n   */\n  rpcTarget: string;\n  /**\n   * Chain Id parameter(hex with 0x prefix) for the network. Mandatory for all networks. (assign one with a map to network identifier for platforms)\n   * @example 0x1 for mainnet, 0x2 for testnet, 0x3 for devnet,  'loading' if not connected to anything yet or connection fails\n   * @defaultValue 'loading'\n   */\n  chainId: string;\n  /**\n   * Display name for the network\n   */\n  displayName: string;\n}\n\nexport interface PaymentParams {\n  /**\n   * Address to send the funds to\n   */\n  selectedAddress?: string;\n  /**\n   * Default fiat currency for the user to make the payment in\n   */\n  selectedCurrency?: string;\n  /**\n   * Amount to buy in the selectedCurrency\n   */\n  fiatValue?: number;\n  /**\n   * Cryptocurrency to buy\n   */\n  selectedCryptoCurrency?: string;\n  /**\n   * Amount Cryptocurrency to buy\n   */\n  cryptoAmount?: number;\n}\n\nexport interface LoginParams {\n  loginProvider?: string;\n}\n\nexport interface UserInfo {\n  /**\n   * Email of the logged in user\n   */\n  email: string;\n  /**\n   * Full name of the logged in user\n   */\n  name: string;\n  /**\n   * Profile image of the logged in user\n   */\n  profileImage: string;\n  /**\n   * verifier of the logged in user (google, facebook etc)\n   */\n  verifier: string;\n  /**\n   * Verifier Id of the logged in user\n   *\n   * email for google,\n   * id for facebook,\n   * username for reddit,\n   * id for twitch,\n   * id for discord\n   */\n  verifierId: string;\n}\n\nexport interface LocaleLinks<T> {\n  /**\n   * Item corresponding to english\n   */\n  en?: T;\n  /**\n   * Item corresponding to japanese\n   */\n  ja?: T;\n  /**\n   * Item corresponding to korean\n   */\n  ko?: T;\n  /**\n   * Item corresponding to german\n   */\n  de?: T;\n  /**\n   * Item corresponding to chinese (simplified)\n   */\n  zh?: T;\n  /**\n   * Item corresponding to spanish\n   */\n  es?: T;\n}\n\nexport type NetworkLabel = \"mainnet-beta\" | \"testnet\" | \"devnet\";\n\nexport interface TorusParams {\n  /**\n   * Determines where the torus widget is visible on the page.\n   * @defaultValue bottom-left\n   */\n  buttonPosition?: BUTTON_POSITION_TYPE;\n  /**\n   * Api key\n   * Get yours today at {@link https://developer.tor.us | Dashboard}\n   */\n  apiKey?: string;\n\n  /**\n   * Torus Network Object\n   */\n  network?: NetworkInterface | NetworkLabel;\n  /**\n   * Build Environment of Torus.\n   *\n   * production uses https://solana.tor.us,\n   *\n   * development uses http://localhost:8080 (expects torus-website to be run locally),\n   *\n   * testing uses https://solana-testing.tor.us (latest internal build)\n   * @defaultValue production\n   */\n  buildEnv?: TORUS_BUILD_ENV_TYPE;\n  /**\n   * Enables or disables logging.\n   *\n   * Defaults to false in prod and true in other environments\n   */\n  enableLogging?: boolean;\n  /**\n   * whether to show/hide torus widget.\n   *\n   * Defaults to true\n   * @defaultValue true\n   */\n  showTorusButton?: boolean;\n  /**\n   * Prefers to use localStorage instead of sessionStorage for torus iframe. Allows longer lived sessions\n   *\n   * Defaults to false\n   * @defaultValue false\n   */\n  useLocalStorage?: boolean;\n  /**\n   * Allows passing external data for initialize\n   *\n   * Defaults to empty object\n   */\n  extraParams?: { [keyof: string]: string };\n}\n\nexport interface TorusLoginParams {\n  loginProvider?: LOGIN_PROVIDER_TYPE;\n  login_hint?: string;\n}\n\nexport interface ProviderOptions {\n  /**\n   * The name of the stream used to connect to the wallet.\n   */\n  jsonRpcStreamName?: string;\n\n  /**\n   * The maximum number of event listeners.\n   */\n  maxEventListeners?: number;\n}\n\nexport interface BaseProviderState {\n  isConnected: boolean;\n  initialized: boolean;\n  isPermanentlyDisconnected: boolean;\n  hasEmittedConnection: boolean;\n}\n\nexport interface InPageProviderState extends BaseProviderState {\n  accounts: null | string[];\n  isUnlocked: boolean;\n}\n\nexport interface CommunicationProviderState extends BaseProviderState {\n  buttonPosition: string;\n  isLoggedIn: boolean;\n  torusWidgetVisibility: boolean;\n  currentLoginProvider: LOGIN_PROVIDER_TYPE;\n  isIFrameFullScreen: boolean;\n}\n\nexport type Maybe<T> = Partial<T> | T | null | undefined;\n\nexport interface UnValidatedJsonRpcRequest extends JRPCRequest<unknown> {\n  windowId?: string;\n}\n\nexport interface RequestArguments<T> {\n  /** The RPC method to request. */\n  method: string;\n\n  /** The params of the RPC method, if any. */\n  params?: T;\n}\n","import { EMBED_TRANSLATION_ITEM, LocaleLinks, LOGIN_PROVIDER } from \"./interfaces\";\n\nconst translations = {\n  en: {\n    embed: {\n      continue: \"Continue\",\n      actionRequired: \"Authorization required\",\n      pendingAction: \"Click continue to proceed with your request in a popup\",\n      cookiesRequired: \"Cookies Required\",\n      enableCookies: \"Please enable cookies in your browser preferences to access Torus\",\n      clickHere: \"More Info\",\n    },\n  },\n  de: {\n    embed: {\n      continue: \"Fortsetzen\",\n      actionRequired: \"Autorisierung erforderlich\",\n      pendingAction: \"Klicken Sie in einem Popup auf Weiter, um mit Ihrer Anfrage fortzufahren\",\n      cookiesRequired: \"Cookies benötigt\",\n      enableCookies: \"Bitte aktivieren Sie Cookies in Ihren Browsereinstellungen, um auf Torus zuzugreifen\",\n      clickHere: \"Mehr Info\",\n    },\n  },\n  ja: {\n    embed: {\n      continue: \"継続する\",\n      actionRequired: \"認証が必要です\",\n      pendingAction: \"続行をクリックして、ポップアップでリクエストを続行します\",\n      cookiesRequired: \"必要なクッキー\",\n      enableCookies: \"Torusにアクセスするには、ブラウザの設定でCookieを有効にしてください。\",\n      clickHere: \"詳しくは\",\n    },\n  },\n  ko: {\n    embed: {\n      continue: \"계속하다\",\n      actionRequired: \"승인 필요\",\n      pendingAction: \"팝업에서 요청을 진행하려면 계속을 클릭하십시오.\",\n      cookiesRequired: \"쿠키 필요\",\n      enableCookies: \"브라우저 환경 설정에서 쿠키를 활성화하여 Torus에 액세스하십시오.\",\n      clickHere: \"더 많은 정보\",\n    },\n  },\n  zh: {\n    embed: {\n      continue: \"继续\",\n      actionRequired: \"需要授权\",\n      pendingAction: \"单击继续以在弹出窗口中继续您的请求\",\n      cookiesRequired: \"必填Cookie\",\n      enableCookies: \"请在您的浏览器首选项中启用cookie以访问Torus。\",\n      clickHere: \"更多信息\",\n    },\n  },\n} as LocaleLinks<{ embed: EMBED_TRANSLATION_ITEM }>;\n\nexport default {\n  supportedVerifierList: [LOGIN_PROVIDER.GOOGLE, LOGIN_PROVIDER.REDDIT, LOGIN_PROVIDER.DISCORD],\n  api: \"https://api.tor.us\",\n  translations,\n  prodTorusUrl: \"\",\n  localStorageKey: `torus-${window.location.hostname}`,\n};\n","import loglevel from \"loglevel\";\n\nexport default loglevel.getLogger(\"solana-embed\");\n","import { JRPCMiddleware, SafeEventEmitter } from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\nimport { LogLevelDesc } from \"loglevel\";\n\nimport config from \"./config\";\nimport { NetworkInterface, NetworkLabel } from \"./interfaces\";\nimport log from \"./loglevel\";\n\n// utility functions\n\n/**\n * json-rpc-engine middleware that logs RPC errors and and validates req.method.\n *\n * @param log - The logging API to use.\n * @returns  json-rpc-engine middleware function\n */\nexport function createErrorMiddleware(): JRPCMiddleware<unknown, unknown> {\n  return (req, res, next) => {\n    // json-rpc-engine will terminate the request when it notices this error\n    if (typeof req.method !== \"string\" || !req.method) {\n      res.error = ethErrors.rpc.invalidRequest({\n        message: `The request 'method' must be a non-empty string.`,\n        data: req,\n      });\n    }\n\n    next((done) => {\n      const { error } = res;\n      if (!error) {\n        return done();\n      }\n      log.error(`Torus - RPC Error: ${error.message}`, error);\n      return done();\n    });\n  };\n}\n\n/**\n * Logs a stream disconnection error. Emits an 'error' if given an\n * EventEmitter that has listeners for the 'error' event.\n *\n * @param log - The logging API to use.\n * @param remoteLabel - The label of the disconnected stream.\n * @param error - The associated error to log.\n * @param emitter - The logging API to use.\n */\nexport function logStreamDisconnectWarning(remoteLabel: string, error: Error, emitter: SafeEventEmitter): void {\n  let warningMsg = `Torus: Lost connection to \"${remoteLabel}\".`;\n  if (error?.stack) {\n    warningMsg += `\\n${error.stack}`;\n  }\n  log.warn(warningMsg);\n  if (emitter && emitter.listenerCount(\"error\") > 0) {\n    emitter.emit(\"error\", warningMsg);\n  }\n}\n\nexport const getWindowId = (): string => Math.random().toString(36).slice(2);\n\nexport const getTorusUrl = async (buildEnv: string): Promise<{ torusUrl: string; logLevel: LogLevelDesc }> => {\n  let torusUrl: string;\n  let logLevel: LogLevelDesc;\n  // const versionUsed = version;\n  // log.info(\"solana embed version used: \", versionUsed);\n  switch (buildEnv) {\n    case \"testing\":\n      torusUrl = \"https://solana-testing.tor.us\";\n      logLevel = \"debug\";\n      break;\n    case \"development\":\n      torusUrl = \"http://localhost:8080\";\n      logLevel = \"debug\";\n      break;\n    default:\n      torusUrl = `https://solana.tor.us`;\n      logLevel = \"error\";\n      break;\n  }\n  return { torusUrl, logLevel };\n};\n\nexport const getUserLanguage = (): string => {\n  let userLanguage = window.navigator.language || \"en-US\";\n  const userLanguages = userLanguage.split(\"-\");\n  userLanguage = Object.prototype.hasOwnProperty.call(config.translations, userLanguages[0]) ? userLanguages[0] : \"en\";\n  return userLanguage;\n};\n\nexport const NOOP = (): void => {\n  // empty function\n};\n\nexport const FEATURES_PROVIDER_CHANGE_WINDOW = { height: 660, width: 375 };\nexport const FEATURES_DEFAULT_WALLET_WINDOW = { height: 740, width: 1315 };\nexport const FEATURES_DEFAULT_POPUP_WINDOW = { height: 700, width: 1200 };\nexport const FEATURES_CONFIRM_WINDOW = { height: 600, width: 400 };\n\nexport function storageAvailable(type: \"localStorage\" | \"sessionStorage\"): boolean {\n  let storage: Storage;\n  try {\n    storage = window[type];\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return (\n      e &&\n      // everything except Firefox\n      (e.code === 22 ||\n        // Firefox\n        e.code === 1014 ||\n        // test name field too, because code might not be present\n        // everything except Firefox\n        e.name === \"QuotaExceededError\" ||\n        // Firefox\n        e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") &&\n      // acknowledge QuotaExceededError only if there's something already stored\n      storage &&\n      storage.length !== 0\n    );\n  }\n}\n\n/**\n * popup handler utils\n */\nexport function getPopupFeatures({ width: w, height: h }: { width: number; height: number }): string {\n  // Fixes dual-screen position                             Most browsers      Firefox\n  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n\n  const width = window.innerWidth\n    ? window.innerWidth\n    : document.documentElement.clientWidth\n    ? document.documentElement.clientWidth\n    : window.screen.width;\n\n  const height = window.innerHeight\n    ? window.innerHeight\n    : document.documentElement.clientHeight\n    ? document.documentElement.clientHeight\n    : window.screen.height;\n\n  const systemZoom = 1; // No reliable estimate\n\n  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  const features = `titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=${h / systemZoom},width=${w / systemZoom},top=${top},left=${left}`;\n  return features;\n}\n\nexport const getNetworkConfig = (label: NetworkLabel): NetworkInterface | undefined => {\n  switch (label) {\n    case \"mainnet-beta\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x1\",\n        displayName: \"Solana Mainnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://api.mainnet-beta.solana.com\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\",\n      } as NetworkInterface;\n\n    case \"testnet\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x2\",\n        displayName: \"Solana Testnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://api.testnet.solana.com\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\",\n      } as NetworkInterface;\n\n    case \"devnet\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x3\",\n        displayName: \"Solana Devnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://api.devnet.solana.com\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\",\n      } as NetworkInterface;\n\n    default:\n      return undefined;\n  }\n};\n","import { createLoggerMiddleware, SafeEventEmitterProvider, SendCallBack } from \"@toruslabs/base-controllers\";\nimport {\n  createIdRemapMiddleware,\n  createStreamMiddleware,\n  getRpcPromiseCallback,\n  JRPCEngine,\n  JRPCRequest,\n  JRPCResponse,\n  ObjectMultiplex,\n  SafeEventEmitter,\n  Stream,\n} from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\nimport { duplex as isDuplexStream } from \"is-stream\";\nimport pump from \"pump\";\nimport type { Duplex } from \"readable-stream\";\n\nimport { BaseProviderState, Maybe, ProviderOptions, RequestArguments, UnValidatedJsonRpcRequest } from \"./interfaces\";\nimport messages from \"./messages\";\nimport { createErrorMiddleware, logStreamDisconnectWarning } from \"./utils\";\n\nabstract class BaseProvider<U extends BaseProviderState> extends SafeEventEmitter implements SafeEventEmitterProvider {\n  /**\n   * Indicating that this provider is a Torus provider.\n   */\n  public readonly isTorus: true;\n\n  _rpcEngine: JRPCEngine;\n\n  jsonRpcConnectionEvents: SafeEventEmitter;\n\n  protected _state: U;\n\n  constructor(connectionStream: Duplex, { maxEventListeners = 100, jsonRpcStreamName = \"provider\" }: ProviderOptions) {\n    super();\n    if (!isDuplexStream(connectionStream)) {\n      throw new Error(messages.errors.invalidDuplexStream());\n    }\n    this.isTorus = true;\n    this.setMaxListeners(maxEventListeners);\n\n    this._handleConnect = this._handleConnect.bind(this);\n    this._handleDisconnect = this._handleDisconnect.bind(this);\n    this._handleStreamDisconnect = this._handleStreamDisconnect.bind(this);\n\n    this._rpcRequest = this._rpcRequest.bind(this);\n    this._initializeState = this._initializeState.bind(this);\n\n    this.request = this.request.bind(this);\n    this.sendAsync = this.sendAsync.bind(this);\n    // this.enable = this.enable.bind(this);\n\n    // setup connectionStream multiplexing\n    const mux = new ObjectMultiplex();\n    pump(\n      connectionStream as unknown as Stream,\n      mux as unknown as Stream,\n      connectionStream as unknown as Stream,\n      this._handleStreamDisconnect.bind(this, \"Torus\")\n    );\n\n    // ignore phishing warning message (handled elsewhere)\n    mux.ignoreStream(\"phishing\");\n\n    // setup own event listeners\n    // connect to async provider\n\n    const jsonRpcConnection = createStreamMiddleware();\n    pump(\n      jsonRpcConnection.stream as unknown as Stream,\n      mux.createStream(jsonRpcStreamName) as unknown as Stream,\n      jsonRpcConnection.stream as unknown as Stream,\n      this._handleStreamDisconnect.bind(this, \"Torus RpcProvider\")\n    );\n\n    // handle RPC requests via dapp-side rpc engine\n    const rpcEngine = new JRPCEngine();\n    rpcEngine.push(createIdRemapMiddleware());\n    rpcEngine.push(createErrorMiddleware());\n    rpcEngine.push(createLoggerMiddleware({ origin: location.origin }));\n    rpcEngine.push(jsonRpcConnection.middleware);\n    this._rpcEngine = rpcEngine;\n\n    this.jsonRpcConnectionEvents = jsonRpcConnection.events;\n  }\n\n  /**\n   * Submits an RPC request for the given method, with the given params.\n   * Resolves with the result of the method call, or rejects on error.\n   */\n  async request<TArgs, TResponse>(args: RequestArguments<TArgs>): Promise<Maybe<TResponse>> {\n    if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestArgs(),\n        data: args,\n      });\n    }\n\n    const { method, params } = args;\n\n    if (typeof method !== \"string\" || method.length === 0) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestMethod(),\n        data: args,\n      });\n    }\n\n    if (params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestParams(),\n        data: args,\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      this._rpcRequest({ method, params }, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n\n  send<T, V>(req: JRPCRequest<T>, callback: SendCallBack<V>): void;\n\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n  send(payload: JRPCRequest<unknown>, callback: (error: Error | null, result?: JRPCResponse<unknown>) => void): void {\n    this._rpcRequest(payload, callback);\n  }\n\n  sendAsync<T, V>(req: JRPCRequest<T>): Promise<V>;\n\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n  sendAsync(payload: JRPCRequest<unknown>): Promise<unknown> {\n    return new Promise((resolve, reject) => {\n      this._rpcRequest(payload, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n\n  /**\n   * Called when connection is lost to critical streams.\n   *\n   * emits TorusInpageProvider#disconnect\n   */\n  protected _handleStreamDisconnect(streamName: string, error: Error): void {\n    logStreamDisconnectWarning(streamName, error, this);\n    this._handleDisconnect(false, error ? error.message : undefined);\n  }\n\n  // Private Methods\n  //= ===================\n  /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */\n  abstract _initializeState(...args: unknown[]): Promise<void>;\n\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n  protected abstract _rpcRequest(\n    payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[],\n    callback: (...args: unknown[]) => void,\n    isInternal?: boolean\n  ): void;\n\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits TorusInPageProvider#connect\n   */\n  protected abstract _handleConnect(...args: unknown[]): void;\n\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n  protected abstract _handleDisconnect(isRecoverable: boolean, errorMessage?: string): void;\n}\n\nexport default BaseProvider;\n","export const handleEvent = (handle: EventTarget, eventName: string, handler: (...args: unknown[]) => void, ...handlerArgs: unknown[]): void => {\n  const handlerWrapper = () => {\n    handler(...handlerArgs);\n    handle.removeEventListener(eventName, handlerWrapper);\n  };\n  handle.addEventListener(eventName, handlerWrapper);\n};\n\nexport async function documentReady(): Promise<void> {\n  return new Promise<void>((resolve) => {\n    if (document.readyState !== \"loading\") {\n      resolve();\n    } else {\n      handleEvent(document, \"DOMContentLoaded\", resolve);\n    }\n  });\n}\n\nexport const htmlToElement = <T extends Element>(html: string): T => {\n  const template = window.document.createElement(\"template\");\n  const trimmedHtml = html.trim(); // Never return a text node of whitespace as the result\n  template.innerHTML = trimmedHtml;\n  return template.content.firstChild as T;\n};\n","import { SafeEventEmitter } from \"@toruslabs/openlogin-jrpc\";\n\nimport { FEATURES_DEFAULT_POPUP_WINDOW, getPopupFeatures } from \"./utils\";\n\nclass PopupHandler extends SafeEventEmitter {\n  url: URL;\n\n  target: string;\n\n  features: string;\n\n  window: Window;\n\n  windowTimer: number;\n\n  iClosedWindow: boolean;\n\n  constructor({ url, target, features }: { url: URL; target?: string; features?: string }) {\n    super();\n    this.url = url;\n    this.target = target || \"_blank\";\n    this.features = features || getPopupFeatures(FEATURES_DEFAULT_POPUP_WINDOW);\n    this.window = undefined;\n    this.windowTimer = undefined;\n    this.iClosedWindow = false;\n    this._setupTimer();\n  }\n\n  _setupTimer(): void {\n    this.windowTimer = Number(\n      setInterval(() => {\n        if (this.window && this.window.closed) {\n          clearInterval(this.windowTimer);\n          if (!this.iClosedWindow) {\n            this.emit(\"close\");\n          }\n          this.iClosedWindow = false;\n          this.window = undefined;\n        }\n        if (this.window === undefined) clearInterval(this.windowTimer);\n      }, 500)\n    );\n  }\n\n  open(): Promise<void> {\n    this.window = window.open(this.url.href, this.target, this.features);\n    if (this.window?.focus) this.window.focus();\n    return Promise.resolve();\n  }\n\n  close(): void {\n    this.iClosedWindow = true;\n    if (this.window) this.window.close();\n  }\n\n  redirect(locationReplaceOnRedirect: boolean): void {\n    if (locationReplaceOnRedirect) {\n      window.location.replace(this.url.href);\n    } else {\n      window.location.href = this.url.href;\n    }\n  }\n}\n\nexport default PopupHandler;\n","import { COMMUNICATION_JRPC_METHODS, COMMUNICATION_NOTIFICATIONS, CommunicationWalletProviderState } from \"@toruslabs/base-controllers\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { EthereumRpcError } from \"eth-rpc-errors\";\nimport type { Duplex } from \"readable-stream\";\n\nimport BaseProvider from \"./baseProvider\";\nimport configuration from \"./config\";\nimport { documentReady, htmlToElement } from \"./embedUtils\";\nimport {\n  BUTTON_POSITION,\n  CommunicationProviderState,\n  EMBED_TRANSLATION_ITEM,\n  LOGIN_PROVIDER_TYPE,\n  ProviderOptions,\n  RequestArguments,\n  UnValidatedJsonRpcRequest,\n} from \"./interfaces\";\nimport log from \"./loglevel\";\nimport messages from \"./messages\";\nimport PopupHandler from \"./PopupHandler\";\nimport { FEATURES_CONFIRM_WINDOW, getPopupFeatures, getUserLanguage } from \"./utils\";\n\nclass TorusCommunicationProvider extends BaseProvider<CommunicationProviderState> {\n  protected static _defaultState: CommunicationProviderState = {\n    buttonPosition: \"bottom-left\",\n    currentLoginProvider: null,\n    isIFrameFullScreen: false,\n    hasEmittedConnection: false,\n\n    torusWidgetVisibility: false,\n    initialized: false,\n    isLoggedIn: false,\n    isPermanentlyDisconnected: false,\n    isConnected: false,\n  };\n\n  public embedTranslations: EMBED_TRANSLATION_ITEM;\n\n  public torusUrl: string;\n\n  public dappStorageKey: string;\n\n  public windowRefs: Record<string, PopupHandler>;\n\n  tryWindowHandle: (payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], cb: (...args: unknown[]) => void) => void;\n\n  private torusAlertContainer: HTMLDivElement;\n\n  private torusIframe: HTMLIFrameElement;\n\n  constructor(connectionStream: Duplex, { maxEventListeners = 100, jsonRpcStreamName = \"provider\" }: ProviderOptions) {\n    super(connectionStream, { maxEventListeners, jsonRpcStreamName });\n\n    // private state\n    this._state = {\n      ...TorusCommunicationProvider._defaultState,\n    };\n\n    // public state\n    this.torusUrl = \"\";\n    this.dappStorageKey = \"\";\n    const languageTranslations = configuration.translations[getUserLanguage()];\n    this.embedTranslations = languageTranslations.embed;\n    this.windowRefs = {};\n\n    // setup own event listeners\n\n    // EIP-1193 connect\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n\n    const notificationHandler = (payload: RequestArguments<Record<string, unknown>>) => {\n      const { method, params } = payload;\n      if (method === COMMUNICATION_NOTIFICATIONS.IFRAME_STATUS) {\n        const { isFullScreen, rid } = params;\n        this._displayIframe({ isFull: isFullScreen as boolean, rid: rid as string });\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CREATE_WINDOW) {\n        const { windowId, url } = params as Record<string, string>;\n        this._createPopupBlockAlert(windowId, url);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CLOSE_WINDOW) {\n        this._handleCloseWindow(params);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_IN) {\n        const { currentLoginProvider } = params;\n        this._state.isLoggedIn = true;\n        this._state.currentLoginProvider = currentLoginProvider as LOGIN_PROVIDER_TYPE;\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_OUT) {\n        this._state.isLoggedIn = false;\n        this._state.currentLoginProvider = null;\n        this._displayIframe();\n      }\n    };\n\n    this.jsonRpcConnectionEvents.on(\"notification\", notificationHandler);\n  }\n\n  get isLoggedIn(): boolean {\n    return this._state.isLoggedIn;\n  }\n\n  get isIFrameFullScreen(): boolean {\n    return this._state.isIFrameFullScreen;\n  }\n\n  /**\n   * Returns whether the inPage provider is connected to Torus.\n   */\n  isConnected(): boolean {\n    return this._state.isConnected;\n  }\n\n  async _initializeState(params: Record<string, unknown>): Promise<void> {\n    try {\n      const { torusUrl, dappStorageKey, torusAlertContainer, torusIframe } = params;\n      this.torusUrl = torusUrl as string;\n      this.dappStorageKey = dappStorageKey as string;\n      this.torusAlertContainer = torusAlertContainer as HTMLDivElement;\n      this.torusIframe = torusIframe as HTMLIFrameElement;\n      this.torusIframe.addEventListener(\"load\", () => {\n        // only do this if iframe is not full screen\n        if (!this._state.isIFrameFullScreen) this._displayIframe();\n      });\n      const { currentLoginProvider, isLoggedIn } = (await this.request({\n        method: COMMUNICATION_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: [],\n      })) as CommunicationWalletProviderState;\n\n      // indicate that we've connected, for EIP-1193 compliance\n      this._handleConnect(currentLoginProvider, isLoggedIn);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized communication state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n\n  _handleWindow(windowId: string, { url, target, features }: { url?: string; target?: string; features?: string } = {}): void {\n    const finalUrl = new URL(url || `${this.torusUrl}/redirect?windowId=${windowId}`);\n    if (this.dappStorageKey) {\n      // If multiple instances, it returns the first one\n      if (finalUrl.hash) finalUrl.hash += `&dappStorageKey=${this.dappStorageKey}`;\n      else finalUrl.hash = `#dappStorageKey=${this.dappStorageKey}`;\n    }\n    const handledWindow = new PopupHandler({ url: finalUrl, target, features });\n    handledWindow.open();\n    if (!handledWindow.window) {\n      this._createPopupBlockAlert(windowId, finalUrl.href);\n      return;\n    }\n    // Add to collection only if window is opened\n    this.windowRefs[windowId] = handledWindow;\n    // We tell the iframe that the window has been successfully opened\n    this.request<{ windowId: string }, unknown>({\n      method: COMMUNICATION_JRPC_METHODS.OPENED_WINDOW,\n      params: { windowId },\n    });\n    handledWindow.once(\"close\", () => {\n      // user closed the window\n      delete this.windowRefs[windowId];\n      this.request<{ windowId: string }, unknown>({\n        method: COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW,\n        params: { windowId },\n      });\n    });\n  }\n\n  _displayIframe({ isFull = false, rid = \"\" }: { isFull?: boolean; rid?: string } = {}): void {\n    const style: Partial<CSSStyleDeclaration> = {};\n    // set phase\n    if (!isFull) {\n      style.display = this._state.torusWidgetVisibility ? \"block\" : \"none\";\n      style.height = \"70px\";\n      style.width = \"70px\";\n      switch (this._state.buttonPosition) {\n        case BUTTON_POSITION.TOP_LEFT:\n          style.top = \"0px\";\n          style.left = \"0px\";\n          style.right = \"auto\";\n          style.bottom = \"auto\";\n          break;\n        case BUTTON_POSITION.TOP_RIGHT:\n          style.top = \"0px\";\n          style.right = \"0px\";\n          style.left = \"auto\";\n          style.bottom = \"auto\";\n          break;\n        case BUTTON_POSITION.BOTTOM_RIGHT:\n          style.bottom = \"0px\";\n          style.right = \"0px\";\n          style.top = \"auto\";\n          style.left = \"auto\";\n          break;\n        case BUTTON_POSITION.BOTTOM_LEFT:\n        default:\n          style.bottom = \"0px\";\n          style.left = \"0px\";\n          style.top = \"auto\";\n          style.right = \"auto\";\n          break;\n      }\n    } else {\n      style.display = \"block\";\n      style.width = \"100%\";\n      style.height = \"100%\";\n      style.top = \"0px\";\n      style.right = \"0px\";\n      style.left = \"0px\";\n      style.bottom = \"0px\";\n    }\n    Object.assign(this.torusIframe.style, style);\n    this._state.isIFrameFullScreen = isFull;\n    this.request<{ isIFrameFullScreen: boolean; rid: string }, unknown>({\n      method: COMMUNICATION_JRPC_METHODS.IFRAME_STATUS,\n      params: { isIFrameFullScreen: isFull, rid },\n    });\n  }\n\n  hideTorusButton(): void {\n    this._state.torusWidgetVisibility = false;\n    this._displayIframe();\n  }\n\n  showTorusButton(): void {\n    this._state.torusWidgetVisibility = true;\n    this._displayIframe();\n  }\n\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n  protected _rpcRequest(payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], callback: (...args: unknown[]) => void): void {\n    const cb = callback;\n    const _payload = payload;\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n    }\n    this.tryWindowHandle(_payload as JRPCRequest<unknown>[], cb);\n  }\n\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param currentLoginProvider - The login Provider\n   * emits TorusInpageProvider#connect\n   */\n  protected _handleConnect(currentLoginProvider: string, isLoggedIn: boolean): void {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", { currentLoginProvider, isLoggedIn });\n      log.debug(messages.info.connected(currentLoginProvider));\n    }\n  }\n\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n  protected _handleDisconnect(isRecoverable: boolean, errorMessage?: string): void {\n    if (this._state.isConnected || (!this._state.isPermanentlyDisconnected && !isRecoverable)) {\n      this._state.isConnected = false;\n\n      let error: Error;\n      if (isRecoverable) {\n        error = new EthereumRpcError(\n          1013, // Try again later\n          errorMessage || messages.errors.disconnected()\n        );\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(\n          1011, // Internal error\n          errorMessage || messages.errors.permanentlyDisconnected()\n        );\n        log.error(error);\n        this._state.currentLoginProvider = null;\n        this._state.isLoggedIn = false;\n        this._state.torusWidgetVisibility = false;\n        this._state.isIFrameFullScreen = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n\n      this.emit(\"disconnect\", error);\n    }\n  }\n\n  // Called if the iframe wants to close the window cause it is done processing the request\n  private _handleCloseWindow(params: { windowId?: string }): void {\n    const { windowId } = params;\n    if (this.windowRefs[windowId]) {\n      this.windowRefs[windowId].close();\n      delete this.windowRefs[windowId];\n    }\n  }\n\n  private async _createPopupBlockAlert(windowId: string, url: string): Promise<void> {\n    const logoUrl = this.getLogoUrl();\n    const torusAlert = htmlToElement<HTMLDivElement>(\n      '<div id=\"torusAlert\" class=\"torus-alert--v2\">' +\n        `<div id=\"torusAlert__logo\"><img src=\"${logoUrl}\" /></div>` +\n        \"<div>\" +\n        `<h1 id=\"torusAlert__title\">${this.embedTranslations.actionRequired}</h1>` +\n        `<p id=\"torusAlert__desc\">${this.embedTranslations.pendingAction}</p>` +\n        \"</div>\" +\n        \"</div>\"\n    );\n\n    const successAlert = htmlToElement(`<div><a id=\"torusAlert__btn\">${this.embedTranslations.continue}</a></div>`);\n    const btnContainer = htmlToElement('<div id=\"torusAlert__btn-container\"></div>');\n    btnContainer.appendChild(successAlert);\n    torusAlert.appendChild(btnContainer);\n    const bindOnLoad = () => {\n      successAlert.addEventListener(\"click\", () => {\n        this._handleWindow(windowId, {\n          url,\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW),\n        });\n        torusAlert.remove();\n        if (this.torusAlertContainer.children.length === 0) this.torusAlertContainer.style.display = \"none\";\n      });\n    };\n\n    const attachOnLoad = () => {\n      this.torusAlertContainer.appendChild(torusAlert);\n    };\n\n    await documentReady();\n    attachOnLoad();\n    bindOnLoad();\n    this.torusAlertContainer.style.display = \"block\";\n  }\n\n  private getLogoUrl(): string {\n    const logoUrl = `${this.torusUrl}/images/torus_icon-blue.svg`;\n    return logoUrl;\n  }\n}\n\nexport default TorusCommunicationProvider;\n","import { InPageWalletProviderState, PROVIDER_JRPC_METHODS, PROVIDER_NOTIFICATIONS } from \"@toruslabs/base-controllers\";\nimport { JRPCRequest, JRPCSuccess } from \"@toruslabs/openlogin-jrpc\";\nimport { EthereumRpcError } from \"eth-rpc-errors\";\nimport dequal from \"fast-deep-equal\";\nimport type { Duplex } from \"readable-stream\";\n\nimport BaseProvider from \"./baseProvider\";\nimport { InPageProviderState, ProviderOptions, RequestArguments, UnValidatedJsonRpcRequest } from \"./interfaces\";\nimport log from \"./loglevel\";\nimport messages from \"./messages\";\n\nclass TorusInPageProvider extends BaseProvider<InPageProviderState> {\n  protected static _defaultState: InPageProviderState = {\n    accounts: null,\n    isConnected: false,\n    isUnlocked: false,\n    initialized: false,\n    isPermanentlyDisconnected: false,\n    hasEmittedConnection: false,\n  };\n\n  /**\n   * The chain ID of the currently connected Solana chain.\n   * See [chainId.network]{@link https://chainid.network} for more information.\n   */\n  public chainId: string | null;\n\n  /**\n   * The user's currently selected Solana address.\n   * If null, Torus is either locked or the user has not permitted any\n   * addresses to be viewed.\n   */\n  public selectedAddress: string | null;\n\n  tryWindowHandle: (payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], cb: (...args: unknown[]) => void) => void;\n\n  constructor(connectionStream: Duplex, { maxEventListeners = 100, jsonRpcStreamName = \"provider\" }: ProviderOptions) {\n    super(connectionStream, { maxEventListeners, jsonRpcStreamName });\n\n    // private state\n    this._state = {\n      ...TorusInPageProvider._defaultState,\n    };\n\n    // public state\n    this.selectedAddress = null;\n    this.chainId = null;\n\n    this._handleAccountsChanged = this._handleAccountsChanged.bind(this);\n    this._handleChainChanged = this._handleChainChanged.bind(this);\n    this._handleUnlockStateChanged = this._handleUnlockStateChanged.bind(this);\n\n    // setup own event listeners\n\n    // EIP-1193 connect\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n\n    const jsonRpcNotificationHandler = (payload: RequestArguments<unknown[] | Record<string, unknown>>) => {\n      const { method, params } = payload;\n      if (method === PROVIDER_NOTIFICATIONS.ACCOUNTS_CHANGED) {\n        this._handleAccountsChanged(params as unknown[]);\n      } else if (method === PROVIDER_NOTIFICATIONS.UNLOCK_STATE_CHANGED) {\n        this._handleUnlockStateChanged(params as Record<string, unknown>);\n      } else if (method === PROVIDER_NOTIFICATIONS.CHAIN_CHANGED) {\n        this._handleChainChanged(params as Record<string, unknown>);\n      }\n    };\n\n    // json rpc notification listener\n    this.jsonRpcConnectionEvents.on(\"notification\", jsonRpcNotificationHandler);\n  }\n\n  /**\n   * Returns whether the inpage provider is connected to Torus.\n   */\n  isConnected(): boolean {\n    return this._state.isConnected;\n  }\n\n  // Private Methods\n  //= ===================\n  /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */\n  async _initializeState(): Promise<void> {\n    try {\n      const { accounts, chainId, isUnlocked } = (await this.request({\n        method: PROVIDER_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: [],\n      })) as InPageWalletProviderState;\n\n      // indicate that we've connected, for EIP-1193 compliance\n      this.emit(\"connect\", { chainId });\n\n      this._handleChainChanged({ chainId });\n      this._handleUnlockStateChanged({ accounts, isUnlocked });\n      this._handleAccountsChanged(accounts);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized provider state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n  _rpcRequest(payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], callback: (...args: unknown[]) => void, isInternal = false): void {\n    let cb = callback;\n    const _payload = payload;\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n\n      if (_payload.method === \"solana_accounts\" || _payload.method === \"solana_requestAccounts\") {\n        // handle accounts changing\n        cb = (err: Error, res: JRPCSuccess<string[]>) => {\n          this._handleAccountsChanged(res.result || [], _payload.method === \"solana_accounts\", isInternal);\n          callback(err, res);\n        };\n      } else if (_payload.method === \"wallet_getProviderState\") {\n        this._rpcEngine.handle(payload as JRPCRequest<unknown>, cb);\n        return;\n      }\n    }\n    this.tryWindowHandle(_payload, cb);\n  }\n\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits TorusInpageProvider#connect\n   */\n  protected _handleConnect(chainId: string): void {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", { chainId });\n      log.debug(messages.info.connected(chainId));\n    }\n  }\n\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n  protected _handleDisconnect(isRecoverable: boolean, errorMessage?: string): void {\n    if (this._state.isConnected || (!this._state.isPermanentlyDisconnected && !isRecoverable)) {\n      this._state.isConnected = false;\n\n      let error: Error;\n      if (isRecoverable) {\n        error = new EthereumRpcError(\n          1013, // Try again later\n          errorMessage || messages.errors.disconnected()\n        );\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(\n          1011, // Internal error\n          errorMessage || messages.errors.permanentlyDisconnected()\n        );\n        log.error(error);\n        this.chainId = null;\n        this._state.accounts = null;\n        this.selectedAddress = null;\n        this._state.isUnlocked = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n\n      this.emit(\"disconnect\", error);\n    }\n  }\n\n  /**\n   * Called when accounts may have changed.\n   */\n  protected _handleAccountsChanged(accounts: unknown[], isEthAccounts = false, isInternal = false): void {\n    // defensive programming\n    let finalAccounts = accounts;\n    if (!Array.isArray(finalAccounts)) {\n      log.error(\"Torus: Received non-array accounts parameter. Please report this bug.\", finalAccounts);\n      finalAccounts = [];\n    }\n\n    for (const account of accounts) {\n      if (typeof account !== \"string\") {\n        log.error(\"Torus: Received non-string account. Please report this bug.\", accounts);\n        finalAccounts = [];\n        break;\n      }\n    }\n\n    // emit accountsChanged if anything about the accounts array has changed\n    if (!dequal(this._state.accounts, finalAccounts)) {\n      // we should always have the correct accounts even before solana_accounts\n      // returns, except in cases where isInternal is true\n      if (isEthAccounts && Array.isArray(this._state.accounts) && this._state.accounts.length > 0 && !isInternal) {\n        log.error('Torus: \"solana_accounts\" unexpectedly updated accounts. Please report this bug.', finalAccounts);\n      }\n\n      this._state.accounts = finalAccounts as string[];\n      this.emit(\"accountsChanged\", finalAccounts);\n    }\n\n    // handle selectedAddress\n    if (this.selectedAddress !== finalAccounts[0]) {\n      this.selectedAddress = (finalAccounts[0] as string) || null;\n    }\n  }\n\n  /**\n   * Upon receipt of a new chainId and networkVersion, emits corresponding\n   * events and sets relevant public state.\n   * Does nothing if neither the chainId nor the networkVersion are different\n   * from existing values.\n   *\n   * emits TorusInpageProvider#chainChanged\n   * @param networkInfo - An object with network info.\n   */\n  protected _handleChainChanged({ chainId }: { chainId?: string } = {}): void {\n    if (!chainId) {\n      log.error(\"Torus: Received invalid network parameters. Please report this bug.\", { chainId });\n      return;\n    }\n\n    if (chainId === \"loading\") {\n      this._handleDisconnect(true);\n    } else {\n      this._handleConnect(chainId);\n\n      if (chainId !== this.chainId) {\n        this.chainId = chainId;\n        if (this._state.initialized) {\n          this.emit(\"chainChanged\", this.chainId);\n        }\n      }\n    }\n  }\n\n  /**\n   * Upon receipt of a new isUnlocked state, sets relevant public state.\n   * Calls the accounts changed handler with the received accounts, or an empty\n   * array.\n   *\n   * Does nothing if the received value is equal to the existing value.\n   * There are no lock/unlock events.\n   *\n   * @param opts - Options bag.\n   */\n  protected _handleUnlockStateChanged({ accounts, isUnlocked }: { accounts?: string[]; isUnlocked?: boolean } = {}): void {\n    if (typeof isUnlocked !== \"boolean\") {\n      log.error(\"Torus: Received invalid isUnlocked parameter. Please report this bug.\", { isUnlocked });\n      return;\n    }\n\n    if (isUnlocked !== this._state.isUnlocked) {\n      this._state.isUnlocked = isUnlocked;\n      this._handleAccountsChanged(accounts || []);\n    }\n  }\n}\n\nexport default TorusInPageProvider;\n","/**\n * Returns whether the given image URL exists\n */\nfunction imgExists(url: string): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    try {\n      const img = document.createElement(\"img\");\n      img.onload = () => resolve(true);\n      img.onerror = () => resolve(false);\n      img.src = url;\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n\n/**\n * Extracts a name for the site from the DOM\n */\nconst getSiteName = (window: Window): string => {\n  const { document } = window;\n\n  const siteName = document.querySelector<HTMLMetaElement>('head > meta[property=\"og:site_name\"]');\n  if (siteName) {\n    return siteName.content;\n  }\n\n  const metaTitle = document.querySelector<HTMLMetaElement>('head > meta[name=\"title\"]');\n  if (metaTitle) {\n    return metaTitle.content;\n  }\n\n  if (document.title && document.title.length > 0) {\n    return document.title;\n  }\n\n  return window.location.hostname;\n};\n\n/**\n * Extracts an icon for the site from the DOM\n */\nasync function getSiteIcon(window: Window): Promise<string> {\n  try {\n    const { document } = window;\n\n    // Use the site's favicon if it exists\n    let icon = document.querySelector<HTMLLinkElement>('head > link[rel=\"shortcut icon\"]');\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    }\n\n    // Search through available icons in no particular order\n    icon = Array.from(document.querySelectorAll<HTMLLinkElement>('head > link[rel=\"icon\"]')).find((_icon) => Boolean(_icon.href));\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    }\n\n    return \"\";\n  } catch (error) {\n    return \"\";\n  }\n}\n\n/**\n * Gets site metadata and returns it\n *\n */\nconst getSiteMetadata = async (): Promise<{ name: string; icon: string }> => ({\n  name: getSiteName(window),\n  icon: await getSiteIcon(window),\n});\n\nexport default getSiteMetadata;\n","import { PublicKey, SignaturePubkeyPair, Transaction } from \"@solana/web3.js\";\nimport { COMMUNICATION_JRPC_METHODS } from \"@toruslabs/base-controllers\";\nimport { setAPIKey } from \"@toruslabs/http-helpers\";\nimport { BasePostMessageStream, getRpcPromiseCallback, JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\n\nimport TorusCommunicationProvider from \"./communicationProvider\";\nimport configuration from \"./config\";\nimport { documentReady, htmlToElement } from \"./embedUtils\";\nimport TorusInPageProvider from \"./inPageProvider\";\nimport {\n  BUTTON_POSITION,\n  LOGIN_PROVIDER_TYPE,\n  NetworkInterface,\n  PAYMENT_PROVIDER_TYPE,\n  PaymentParams,\n  TORUS_BUILD_ENV,\n  TorusCtorArgs,\n  TorusLoginParams,\n  TorusParams,\n  UnValidatedJsonRpcRequest,\n  UserInfo,\n  WALLET_PATH,\n} from \"./interfaces\";\nimport log from \"./loglevel\";\nimport PopupHandler from \"./PopupHandler\";\nimport getSiteMetadata from \"./siteMetadata\";\nimport {\n  FEATURES_CONFIRM_WINDOW,\n  FEATURES_DEFAULT_WALLET_WINDOW,\n  FEATURES_PROVIDER_CHANGE_WINDOW,\n  getPopupFeatures,\n  getTorusUrl,\n  getWindowId,\n  storageAvailable,\n} from \"./utils\";\n\nconst PROVIDER_UNSAFE_METHODS = [\"send_transaction\", \"sign_transaction\", \"sign_all_transactions\", \"sign_message\", \"connect\"];\nconst COMMUNICATION_UNSAFE_METHODS = [COMMUNICATION_JRPC_METHODS.SET_PROVIDER];\n\nconst isLocalStorageAvailable = storageAvailable(\"localStorage\");\n\n// preload for iframe doesn't work https://bugs.chromium.org/p/chromium/issues/detail?id=593267\n(async function preLoadIframe() {\n  try {\n    if (typeof document === \"undefined\") return;\n    const torusIframeHtml = document.createElement(\"link\");\n    const { torusUrl } = await getTorusUrl(\"production\");\n    torusIframeHtml.href = `${torusUrl}/frame`;\n    torusIframeHtml.crossOrigin = \"anonymous\";\n    torusIframeHtml.type = \"text/html\";\n    torusIframeHtml.rel = \"prefetch\";\n    if (torusIframeHtml.relList && torusIframeHtml.relList.supports) {\n      if (torusIframeHtml.relList.supports(\"prefetch\")) {\n        document.head.appendChild(torusIframeHtml);\n      }\n    }\n  } catch (error) {\n    log.warn(error);\n  }\n})();\n\nclass Torus {\n  isInitialized: boolean;\n\n  torusAlert: HTMLDivElement;\n\n  modalZIndex: number;\n\n  alertZIndex: number;\n\n  public requestedLoginProvider?: LOGIN_PROVIDER_TYPE;\n\n  provider: TorusInPageProvider;\n\n  communicationProvider: TorusCommunicationProvider;\n\n  dappStorageKey: string;\n\n  private torusAlertContainer: HTMLDivElement;\n\n  private torusUrl: string;\n\n  private torusIframe: HTMLIFrameElement;\n\n  private styleLink: HTMLLinkElement;\n\n  constructor({ modalZIndex = 99999 }: TorusCtorArgs = {}) {\n    this.torusUrl = \"\";\n    this.isInitialized = false; // init done\n    this.requestedLoginProvider = null;\n    this.modalZIndex = modalZIndex;\n    this.alertZIndex = modalZIndex + 1000;\n    this.dappStorageKey = \"\";\n  }\n\n  get isLoggedIn(): boolean {\n    if (!this.communicationProvider) return false;\n    return this.communicationProvider.isLoggedIn;\n  }\n\n  async init({\n    buildEnv = TORUS_BUILD_ENV.PRODUCTION,\n    enableLogging = false,\n    network,\n    showTorusButton = false,\n    useLocalStorage = false,\n    buttonPosition = BUTTON_POSITION.BOTTOM_LEFT,\n    apiKey = \"torus-default\",\n    extraParams = {},\n  }: TorusParams = {}): Promise<void> {\n    if (this.isInitialized) throw new Error(\"Already initialized\");\n    setAPIKey(apiKey);\n    const { torusUrl, logLevel } = await getTorusUrl(buildEnv);\n    log.info(torusUrl, \"url loaded\");\n\n    this.torusUrl = torusUrl;\n    log.setDefaultLevel(logLevel);\n    if (enableLogging) log.enableAll();\n    else log.disableAll();\n\n    const dappStorageKey = this.handleDappStorageKey(useLocalStorage);\n\n    const torusIframeUrl = new URL(torusUrl);\n    if (torusIframeUrl.pathname.endsWith(\"/\")) torusIframeUrl.pathname += \"frame\";\n    else torusIframeUrl.pathname += \"/frame\";\n\n    const hashParams = new URLSearchParams();\n    if (dappStorageKey) hashParams.append(\"dappStorageKey\", dappStorageKey);\n    hashParams.append(\"origin\", window.location.origin);\n\n    torusIframeUrl.hash = hashParams.toString();\n\n    // Iframe code\n    this.torusIframe = htmlToElement<HTMLIFrameElement>(\n      `<iframe\n        id=\"torusIframe\"\n        class=\"torusIframe\"\n        src=\"${torusIframeUrl.href}\"\n        style=\"display: none; position: fixed; top: 0; right: 0; width: 100%;\n        height: 100%; border: none; border-radius: 0; z-index: ${this.modalZIndex.toString()}\"\n      ></iframe>`\n    );\n\n    this.torusAlertContainer = htmlToElement<HTMLDivElement>(\n      `<div id=\"torusAlertContainer\" style=\"display:none; z-index: ${this.alertZIndex.toString()}\"></div>`\n    );\n\n    this.styleLink = htmlToElement<HTMLLinkElement>(`<link href=\"${torusUrl}/css/widget.css\" rel=\"stylesheet\" type=\"text/css\">`);\n    const handleSetup = async () => {\n      return new Promise<void>((resolve, reject) => {\n        try {\n          window.document.head.appendChild(this.styleLink);\n          window.document.body.appendChild(this.torusIframe);\n          window.document.body.appendChild(this.torusAlertContainer);\n          this.torusIframe.addEventListener(\"load\", async () => {\n            const dappMetadata = await getSiteMetadata();\n            // send init params here\n            this.torusIframe.contentWindow.postMessage(\n              {\n                buttonPosition,\n                apiKey,\n                network,\n                dappMetadata,\n                extraParams,\n              },\n              torusIframeUrl.origin\n            );\n            await this._setupWeb3({\n              torusUrl,\n            });\n            if (showTorusButton) this.showTorusButton();\n            else this.hideTorusButton();\n            this.isInitialized = true;\n            (window as any).torus = this;\n            resolve();\n          });\n        } catch (error) {\n          reject(error);\n        }\n      });\n    };\n\n    await documentReady();\n    await handleSetup();\n  }\n\n  async login(params: TorusLoginParams = {}): Promise<string[]> {\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n    try {\n      this.requestedLoginProvider = params.loginProvider || null;\n      if (!this.requestedLoginProvider) {\n        this.communicationProvider._displayIframe({ isFull: true });\n      }\n      // If user is already logged in, we assume they have given access to the website\n      const res = await new Promise((resolve, reject) => {\n        // We use this method because we want to update inPage provider state with account info\n        this.provider._rpcRequest(\n          { method: \"solana_requestAccounts\", params: [this.requestedLoginProvider, params.login_hint] },\n          getRpcPromiseCallback(resolve, reject)\n        );\n      });\n\n      if (Array.isArray(res) && res.length > 0) {\n        return res;\n      }\n      // This would never happen, but just in case\n      throw new Error(\"Login failed\");\n    } catch (error) {\n      log.error(\"login failed\", error);\n      throw error;\n    } finally {\n      if (this.communicationProvider.isIFrameFullScreen) this.communicationProvider._displayIframe();\n    }\n  }\n\n  async loginWithPrivateKey(loginParams: { privateKey: string; userInfo: UserInfo }): Promise<void> {\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n    const { privateKey, userInfo } = loginParams;\n    const { success } = await this.communicationProvider.request<{ privateKey: string; userInfo: UserInfo }, { success: boolean }>({\n      method: \"login_with_private_key\",\n      params: {\n        privateKey,\n        userInfo,\n      },\n    });\n    if (!success) throw new Error(\"Login Failed\");\n  }\n\n  async logout(): Promise<void> {\n    if (!this.communicationProvider.isLoggedIn) throw new Error(\"Not logged in\");\n\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.LOGOUT,\n      params: [],\n    });\n    this.requestedLoginProvider = null;\n  }\n\n  async cleanUp(): Promise<void> {\n    if (this.communicationProvider.isLoggedIn) {\n      await this.logout();\n    }\n    this.clearInit();\n  }\n\n  clearInit(): void {\n    function isElement(element: unknown) {\n      return element instanceof Element || element instanceof Document;\n    }\n    if (isElement(this.styleLink) && window.document.body.contains(this.styleLink)) {\n      this.styleLink.remove();\n      this.styleLink = undefined;\n    }\n    if (isElement(this.torusIframe) && window.document.body.contains(this.torusIframe)) {\n      this.torusIframe.remove();\n      this.torusIframe = undefined;\n    }\n    if (isElement(this.torusAlertContainer) && window.document.body.contains(this.torusAlertContainer)) {\n      this.torusAlert = undefined;\n      this.torusAlertContainer.remove();\n      this.torusAlertContainer = undefined;\n    }\n    this.isInitialized = false;\n  }\n\n  hideTorusButton(): void {\n    this.communicationProvider.hideTorusButton();\n  }\n\n  showTorusButton(): void {\n    this.communicationProvider.showTorusButton();\n  }\n\n  async setProvider(params: NetworkInterface): Promise<void> {\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.SET_PROVIDER,\n      params: { ...params },\n    });\n  }\n\n  async showWallet(path: WALLET_PATH, params: Record<string, string> = {}): Promise<void> {\n    const instanceId = await this.communicationProvider.request<[], string>({\n      method: COMMUNICATION_JRPC_METHODS.WALLET_INSTANCE_ID,\n      params: [],\n    });\n    const finalPath = path ? `/${path}` : \"\";\n\n    const finalUrl = new URL(`${this.torusUrl}/wallet${finalPath}`);\n    // Using URL constructor to prevent js injection and allow parameter validation.!\n    finalUrl.searchParams.append(\"instanceId\", instanceId);\n    Object.keys(params).forEach((x) => {\n      finalUrl.searchParams.append(x, params[x]);\n    });\n    if (this.dappStorageKey) {\n      finalUrl.hash = `#dappStorageKey=${this.dappStorageKey}`;\n    }\n    // No need to track this window state. Hence, no _handleWindow call.\n    const walletWindow = new PopupHandler({ url: finalUrl, features: getPopupFeatures(FEATURES_DEFAULT_WALLET_WINDOW) });\n    walletWindow.open();\n  }\n\n  async getUserInfo(): Promise<UserInfo> {\n    const userInfoResponse = await this.communicationProvider.request<[], UserInfo>({\n      method: COMMUNICATION_JRPC_METHODS.USER_INFO,\n      params: [],\n    });\n    return userInfoResponse as UserInfo;\n  }\n\n  async initiateTopup(provider: PAYMENT_PROVIDER_TYPE, params: PaymentParams): Promise<boolean> {\n    if (!this.isInitialized) throw new Error(\"Torus is not initialized\");\n    const windowId = getWindowId();\n    this.communicationProvider._handleWindow(windowId);\n    const topupResponse = await this.communicationProvider.request<\n      { provider: PAYMENT_PROVIDER_TYPE; params: PaymentParams; windowId: string },\n      boolean\n    >({\n      method: COMMUNICATION_JRPC_METHODS.TOPUP,\n      params: { provider, params, windowId },\n    });\n    return topupResponse;\n  }\n\n  // Solana specific API\n  async getAccounts() {\n    const response = (await this.provider.request({\n      method: \"getAccounts\",\n      params: [],\n    })) as string[];\n    return response;\n  }\n\n  async sendTransaction(transaction: Transaction): Promise<string> {\n    const response = (await this.provider.request({\n      method: \"send_transaction\",\n      params: { message: transaction.serialize({ requireAllSignatures: false }).toString(\"hex\") },\n    })) as string;\n    return response;\n  }\n\n  async signTransaction(transaction: Transaction): Promise<Transaction> {\n    const response: string = (await this.provider.request({\n      method: \"sign_transaction\",\n      params: { message: transaction.serializeMessage().toString(\"hex\"), messageOnly: true },\n    })) as string;\n\n    // reconstruct signature pair\n    const parsed = JSON.parse(response);\n    const signature: SignaturePubkeyPair = { publicKey: new PublicKey(parsed.publicKey), signature: Buffer.from(parsed.signature, \"hex\") };\n    transaction.addSignature(signature.publicKey, signature.signature);\n    return transaction;\n  }\n\n  async signAllTransactions(transactions: Transaction[]): Promise<Transaction[]> {\n    const encodedMessage: string[] = transactions.map((tx) => {\n      return tx.serializeMessage().toString(\"hex\");\n    });\n    const responses: string[] = await this.provider.request({\n      method: \"sign_all_transactions\",\n      params: { message: encodedMessage, messageOnly: true },\n    });\n\n    // reconstruct signature pairs\n    const signatures: SignaturePubkeyPair[] = responses.map((item) => {\n      const parsed = JSON.parse(item);\n      return { publicKey: new PublicKey(parsed.publicKey), signature: Buffer.from(parsed.signature, \"hex\") };\n    });\n\n    transactions.forEach((tx, idx) => {\n      tx.addSignature(signatures[idx].publicKey, signatures[idx].signature);\n      return tx;\n    });\n    return transactions;\n  }\n\n  async signMessage(data: Uint8Array): Promise<Uint8Array> {\n    const response = (await this.provider.request({\n      method: \"sign_message\",\n      params: {\n        data,\n      },\n    })) as Uint8Array;\n    return response;\n  }\n\n  async getGaslessPublicKey(): Promise<string> {\n    const response = (await this.provider.request({\n      method: \"get_gasless_public_key\",\n      params: [],\n    })) as string;\n    return response;\n  }\n\n  // async connect(): Promise<boolean> {\n  //   const response = (await this.provider.request({\n  //     method: \"connect\",\n  //     params: {},\n  //   })) as boolean;\n  //   return response;\n  // }\n\n  private handleDappStorageKey(useLocalStorage: boolean) {\n    let dappStorageKey = \"\";\n    if (isLocalStorageAvailable && useLocalStorage) {\n      const storedKey = window.localStorage.getItem(configuration.localStorageKey);\n      if (storedKey) dappStorageKey = storedKey;\n      else {\n        const generatedKey = `torus-app-${getWindowId()}`;\n        window.localStorage.setItem(configuration.localStorageKey, generatedKey);\n        dappStorageKey = generatedKey;\n      }\n    }\n    this.dappStorageKey = dappStorageKey;\n    return dappStorageKey;\n  }\n\n  private async _setupWeb3(providerParams: { torusUrl: string }): Promise<void> {\n    log.info(\"setupWeb3 running\");\n    // setup background connection\n    const providerStream = new BasePostMessageStream({\n      name: \"embed_torus\",\n      target: \"iframe_torus\",\n      targetWindow: this.torusIframe.contentWindow,\n    });\n\n    // We create another LocalMessageDuplexStream for communication between dapp <> iframe\n    const communicationStream = new BasePostMessageStream({\n      name: \"embed_communication\",\n      target: \"iframe_communication\",\n      targetWindow: this.torusIframe.contentWindow,\n    });\n\n    // compose the inPage provider\n    const inPageProvider = new TorusInPageProvider(providerStream, {});\n    const communicationProvider = new TorusCommunicationProvider(communicationStream, {});\n\n    inPageProvider.tryWindowHandle = (payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], cb: (...args: unknown[]) => void) => {\n      const _payload = payload;\n      if (!Array.isArray(_payload) && PROVIDER_UNSAFE_METHODS.includes(_payload.method)) {\n        if (!this.communicationProvider.isLoggedIn) throw new Error(\"User Not Logged In\");\n        const windowId = getWindowId();\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW),\n        });\n        // for inPageProvider methods sending windowId in request instead of params\n        // as params might be positional.\n        _payload.windowId = windowId;\n      }\n      inPageProvider._rpcEngine.handle(_payload as JRPCRequest<unknown>[], cb);\n    };\n\n    communicationProvider.tryWindowHandle = (payload: JRPCRequest<unknown>, cb: (...args: unknown[]) => void) => {\n      const _payload = payload;\n      if (!Array.isArray(_payload) && COMMUNICATION_UNSAFE_METHODS.includes(_payload.method)) {\n        const windowId = getWindowId();\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_PROVIDER_CHANGE_WINDOW), // todo: are these features generic for all\n        });\n        // for communication methods sending window id in jrpc req params\n        (_payload.params as Record<string, unknown>).windowId = windowId;\n      }\n      communicationProvider._rpcEngine.handle(_payload as JRPCRequest<unknown>, cb);\n    };\n\n    // detect solana_requestAccounts and pipe to enable for now\n    const detectAccountRequestPrototypeModifier = (m) => {\n      const originalMethod = inPageProvider[m];\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const self = this;\n      inPageProvider[m] = function providerFunc(request, cb) {\n        const { method, params = [] } = request;\n        if (method === \"solana_requestAccounts\") {\n          if (!cb) return self.login({ loginProvider: params[0] });\n          self\n            .login({ loginProvider: params[0] })\n            // eslint-disable-next-line promise/no-callback-in-promise\n            .then((res) => cb(null, res))\n            // eslint-disable-next-line promise/no-callback-in-promise\n            .catch((err) => cb(err));\n        }\n        return originalMethod.apply(this, [request, cb]);\n      };\n    };\n\n    // Detects call to solana_requestAccounts in request & sendAsync and passes to login\n    detectAccountRequestPrototypeModifier(\"request\");\n    detectAccountRequestPrototypeModifier(\"sendAsync\");\n    detectAccountRequestPrototypeModifier(\"send\");\n\n    const proxiedInPageProvider = new Proxy(inPageProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true,\n    });\n\n    const proxiedCommunicationProvider = new Proxy(communicationProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true,\n    });\n\n    this.provider = proxiedInPageProvider;\n    this.communicationProvider = proxiedCommunicationProvider;\n\n    await Promise.all([\n      inPageProvider._initializeState(),\n      communicationProvider._initializeState({\n        ...providerParams,\n        dappStorageKey: this.dappStorageKey,\n        torusAlertContainer: this.torusAlertContainer,\n        torusIframe: this.torusIframe,\n      }),\n    ]);\n    log.debug(\"Torus - injected provider\");\n  }\n}\n\nexport default Torus;\n"]},"metadata":{},"sourceType":"module"}