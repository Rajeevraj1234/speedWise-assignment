{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { Duplex } from 'readable-stream';\nimport { randomId } from '@toruslabs/openlogin-utils';\nimport { EventEmitter } from 'events';\nimport stringify from 'fast-safe-stringify';\nimport { serializeError } from 'eth-rpc-errors';\nimport eos from 'end-of-stream';\nimport once from 'once';\nimport pump from 'pump';\n\nfunction noop() {\n  return undefined;\n}\n\nconst SYN = \"SYN\";\nconst ACK = \"ACK\";\nconst BRK = \"BRK\";\n\nclass BasePostMessageStream extends Duplex {\n  constructor(_ref) {\n    let {\n      name,\n      target,\n      targetWindow = window,\n      targetOrigin = \"*\"\n    } = _ref;\n    super({\n      objectMode: true\n    });\n\n    _defineProperty(this, \"_init\", void 0);\n\n    _defineProperty(this, \"_haveSyn\", void 0);\n\n    _defineProperty(this, \"_name\", void 0);\n\n    _defineProperty(this, \"_target\", void 0);\n\n    _defineProperty(this, \"_targetWindow\", void 0);\n\n    _defineProperty(this, \"_targetOrigin\", void 0);\n\n    _defineProperty(this, \"_onMessage\", void 0);\n\n    _defineProperty(this, \"_synIntervalId\", void 0);\n\n    if (!name || !target) {\n      throw new Error(\"Invalid input.\");\n    }\n\n    this._init = false;\n    this._haveSyn = false;\n    this._name = name;\n    this._target = target; // target origin\n\n    this._targetWindow = targetWindow;\n    this._targetOrigin = targetOrigin;\n    this._onMessage = this.onMessage.bind(this);\n    this._synIntervalId = null;\n    window.addEventListener(\"message\", this._onMessage, false);\n\n    this._handShake();\n  }\n\n  _break() {\n    this.cork();\n\n    this._write(BRK, null, noop);\n\n    this._haveSyn = false;\n    this._init = false;\n  }\n\n  _handShake() {\n    this._write(SYN, null, noop);\n\n    this.cork();\n  }\n\n  _onData(data) {\n    if (!this._init) {\n      // listen for handshake\n      if (data === SYN) {\n        this._haveSyn = true;\n\n        this._write(ACK, null, noop);\n      } else if (data === ACK) {\n        this._init = true;\n\n        if (!this._haveSyn) {\n          this._write(ACK, null, noop);\n        }\n\n        this.uncork();\n      }\n    } else if (data === BRK) {\n      this._break();\n    } else {\n      // forward message\n      try {\n        this.push(data);\n      } catch (err) {\n        this.emit(\"error\", err);\n      }\n    }\n  }\n\n  _postMessage(data) {\n    const originConstraint = this._targetOrigin;\n\n    this._targetWindow.postMessage({\n      target: this._target,\n      data\n    }, originConstraint);\n  }\n\n  onMessage(event) {\n    const message = event.data; // validate message\n\n    if (this._targetOrigin !== \"*\" && event.origin !== this._targetOrigin || event.source !== this._targetWindow || typeof message !== \"object\" || message.target !== this._name || !message.data) {\n      return;\n    }\n\n    this._onData(message.data);\n  }\n\n  _read() {\n    return undefined;\n  }\n\n  _write(data, _, cb) {\n    this._postMessage(data);\n\n    cb();\n  }\n\n  _destroy() {\n    window.removeEventListener(\"message\", this._onMessage, false);\n  }\n\n}\n\nfunction safeApply(handler, context, args) {\n  try {\n    Reflect.apply(handler, context, args);\n  } catch (err) {\n    // Throw error after timeout so as not to interrupt the stack\n    setTimeout(() => {\n      throw err;\n    });\n  }\n}\n\nfunction arrayClone(arr) {\n  const n = arr.length;\n  const copy = new Array(n);\n\n  for (let i = 0; i < n; i += 1) {\n    copy[i] = arr[i];\n  }\n\n  return copy;\n}\n\nclass SafeEventEmitter extends EventEmitter {\n  emit(type) {\n    let doError = type === \"error\";\n    const events = this._events;\n\n    if (events !== undefined) {\n      doError = doError && events.error === undefined;\n    } else if (!doError) {\n      return false;\n    } // If there is no 'error' event listener then throw.\n\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    if (doError) {\n      let er;\n\n      if (args.length > 0) {\n        [er] = args;\n      }\n\n      if (er instanceof Error) {\n        // Note: The comments on the `throw` lines are intentional, they show\n        // up in Node's output if this results in an unhandled exception.\n        throw er; // Unhandled 'error' event\n      } // At least give some kind of context to the user\n\n\n      const err = new Error(\"Unhandled error.\".concat(er ? \" (\".concat(er.message, \")\") : \"\"));\n      err.context = er;\n      throw err; // Unhandled 'error' event\n    }\n\n    const handler = events[type];\n\n    if (handler === undefined) {\n      return false;\n    }\n\n    if (typeof handler === \"function\") {\n      safeApply(handler, this, args);\n    } else {\n      const len = handler.length;\n      const listeners = arrayClone(handler);\n\n      for (let i = 0; i < len; i += 1) {\n        safeApply(listeners[i], this, args);\n      }\n    }\n\n    return true;\n  }\n\n}\n\nclass SerializableError extends Error {\n  constructor(_ref) {\n    let {\n      code,\n      message,\n      data\n    } = _ref;\n\n    if (!Number.isInteger(code)) {\n      throw new Error(\"code must be an integer\");\n    }\n\n    if (!message || typeof message !== \"string\") {\n      throw new Error(\"message must be string\");\n    }\n\n    super(message);\n\n    _defineProperty(this, \"code\", void 0);\n\n    _defineProperty(this, \"data\", void 0);\n\n    this.code = code;\n\n    if (data !== undefined) {\n      this.data = data;\n    }\n  }\n\n  toString() {\n    return stringify({\n      code: this.code,\n      message: this.message,\n      data: this.data,\n      stack: this.stack\n    });\n  }\n\n}\n\nconst getRpcPromiseCallback = function (resolve, reject) {\n  let unwrapResult = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  return (error, response) => {\n    if (error || response.error) {\n      reject(error || response.error);\n    } else if (!unwrapResult || Array.isArray(response)) {\n      resolve(response);\n    } else {\n      resolve(response.result);\n    }\n  };\n};\n\nfunction createErrorMiddleware(log) {\n  return (req, res, next, end) => {\n    try {\n      // json-rpc-engine will terminate the request when it notices this error\n      if (typeof req.method !== \"string\" || !req.method) {\n        res.error = new SerializableError({\n          code: -32603,\n          message: \"invalid method\"\n        });\n        end();\n        return;\n      }\n\n      next(done => {\n        const {\n          error\n        } = res;\n\n        if (!error) {\n          return done();\n        }\n\n        log.error(\"OpenLogin - RPC Error: \".concat(error.message), error);\n        return done();\n      });\n    } catch (error) {\n      log.error(\"OpenLogin - RPC Error thrown: \".concat(error.message), error);\n      res.error = new SerializableError({\n        code: -32603,\n        message: error.message\n      });\n      end();\n    }\n  };\n}\n\nfunction createStreamMiddleware() {\n  const idMap = {};\n\n  function readNoop() {\n    return false;\n  }\n\n  const events = new SafeEventEmitter();\n\n  function processResponse(res) {\n    const context = idMap[res.id];\n\n    if (!context) {\n      throw new Error(\"StreamMiddleware - Unknown response id \\\"\".concat(res.id, \"\\\"\"));\n    }\n\n    delete idMap[res.id]; // copy whole res onto original res\n\n    Object.assign(context.res, res); // run callback on empty stack,\n    // prevent internal stream-handler from catching errors\n\n    setTimeout(context.end);\n  }\n\n  function processNotification(res) {\n    events.emit(\"notification\", res);\n  }\n\n  function processMessage(res, _encoding, cb) {\n    let err;\n\n    try {\n      const isNotification = !res.id;\n\n      if (isNotification) {\n        processNotification(res);\n      } else {\n        processResponse(res);\n      }\n    } catch (_err) {\n      err = _err;\n    } // continue processing stream\n\n\n    cb(err);\n  }\n\n  const stream = new Duplex({\n    objectMode: true,\n    read: readNoop,\n    write: processMessage\n  });\n\n  const middleware = (req, res, next, end) => {\n    // write req to stream\n    stream.push(req); // register request on id map\n\n    idMap[req.id] = {\n      req,\n      res,\n      next,\n      end\n    };\n  };\n\n  return {\n    events,\n    middleware,\n    stream\n  };\n}\n\nfunction createScaffoldMiddleware(handlers) {\n  return (req, res, next, end) => {\n    const handler = handlers[req.method]; // if no handler, return\n\n    if (handler === undefined) {\n      return next();\n    } // if handler is fn, call as middleware\n\n\n    if (typeof handler === \"function\") {\n      return handler(req, res, next, end);\n    } // if handler is some other value, use as result\n\n\n    res.result = handler;\n    return end();\n  };\n}\n\nfunction createIdRemapMiddleware() {\n  return (req, res, next, _end) => {\n    const originalId = req.id;\n    const newId = randomId();\n    req.id = newId;\n    res.id = newId;\n    next(done => {\n      req.id = originalId;\n      res.id = originalId;\n      done();\n    });\n  };\n}\n\nfunction createLoggerMiddleware(logger) {\n  return (req, res, next, _) => {\n    logger.debug(\"REQ\", req, \"RES\", res);\n    next();\n  };\n}\n\nfunction createAsyncMiddleware(asyncMiddleware) {\n  return async (req, res, next, end) => {\n    // nextPromise is the key to the implementation\n    // it is resolved by the return handler passed to the\n    // \"next\" function\n    let resolveNextPromise;\n    const nextPromise = new Promise(resolve => {\n      resolveNextPromise = resolve;\n    });\n    let returnHandlerCallback = null;\n    let nextWasCalled = false; // This will be called by the consumer's async middleware.\n\n    const asyncNext = async () => {\n      nextWasCalled = true; // We pass a return handler to next(). When it is called by the engine,\n      // the consumer's async middleware will resume executing.\n\n      next(runReturnHandlersCallback => {\n        // This callback comes from JRPCEngine._runReturnHandlers\n        returnHandlerCallback = runReturnHandlersCallback;\n        resolveNextPromise();\n      });\n      await nextPromise;\n    };\n\n    try {\n      await asyncMiddleware(req, res, asyncNext);\n\n      if (nextWasCalled) {\n        await nextPromise; // we must wait until the return handler is called\n\n        returnHandlerCallback(null);\n      } else {\n        end(null);\n      }\n    } catch (error) {\n      if (returnHandlerCallback) {\n        returnHandlerCallback(error);\n      } else {\n        end(error);\n      }\n    }\n  };\n}\n\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */\n\n\nclass JRPCEngine extends SafeEventEmitter {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"_middleware\", void 0);\n\n    this._middleware = [];\n  }\n  /**\n   * Serially executes the given stack of middleware.\n   *\n   * @returns An array of any error encountered during middleware execution,\n   * a boolean indicating whether the request was completed, and an array of\n   * middleware-defined return handlers.\n   */\n\n\n  static async _runAllMiddleware(req, res, middlewareStack) {\n    const returnHandlers = [];\n    let error = null;\n    let isComplete = false; // Go down stack of middleware, call and collect optional returnHandlers\n\n    for (const middleware of middlewareStack) {\n      [error, isComplete] = await JRPCEngine._runMiddleware(req, res, middleware, returnHandlers);\n\n      if (isComplete) {\n        break;\n      }\n    }\n\n    return [error, isComplete, returnHandlers.reverse()];\n  }\n  /**\n   * Runs an individual middleware.\n   *\n   * @returns An array of any error encountered during middleware exection,\n   * and a boolean indicating whether the request should end.\n   */\n\n\n  static _runMiddleware(req, res, middleware, returnHandlers) {\n    return new Promise(resolve => {\n      const end = err => {\n        const error = err || res.error;\n\n        if (error) {\n          res.error = serializeError(error);\n        } // True indicates that the request should end\n\n\n        resolve([error, true]);\n      };\n\n      const next = returnHandler => {\n        if (res.error) {\n          end(res.error);\n        } else {\n          if (returnHandler) {\n            if (typeof returnHandler !== \"function\") {\n              end(new SerializableError({\n                code: -32603,\n                message: \"JRPCEngine: 'next' return handlers must be functions\"\n              }));\n            }\n\n            returnHandlers.push(returnHandler);\n          } // False indicates that the request should not end\n\n\n          resolve([null, false]);\n        }\n      };\n\n      try {\n        middleware(req, res, next, end);\n      } catch (error) {\n        end(error);\n      }\n    });\n  }\n  /**\n   * Serially executes array of return handlers. The request and response are\n   * assumed to be in their scope.\n   */\n\n\n  static async _runReturnHandlers(handlers) {\n    for (const handler of handlers) {\n      await new Promise((resolve, reject) => {\n        handler(err => err ? reject(err) : resolve());\n      });\n    }\n  }\n  /**\n   * Throws an error if the response has neither a result nor an error, or if\n   * the \"isComplete\" flag is falsy.\n   */\n\n\n  static _checkForCompletion(req, res, isComplete) {\n    if (!(\"result\" in res) && !(\"error\" in res)) {\n      throw new SerializableError({\n        code: -32603,\n        message: \"Response has no error or result for request\"\n      });\n    }\n\n    if (!isComplete) {\n      throw new SerializableError({\n        code: -32603,\n        message: \"Nothing ended request\"\n      });\n    }\n  }\n  /**\n   * Add a middleware function to the engine's middleware stack.\n   *\n   * @param middleware - The middleware function to add.\n   */\n\n\n  push(middleware) {\n    this._middleware.push(middleware);\n  }\n\n  handle(req, cb) {\n    if (cb && typeof cb !== \"function\") {\n      throw new Error('\"callback\" must be a function if provided.');\n    }\n\n    if (Array.isArray(req)) {\n      if (cb) {\n        return this._handleBatch(req, cb);\n      }\n\n      return this._handleBatch(req);\n    }\n\n    if (cb) {\n      return this._handle(req, cb);\n    }\n\n    return this._promiseHandle(req);\n  }\n  /**\n   * Returns this engine as a middleware function that can be pushed to other\n   * engines.\n   *\n   * @returns This engine as a middleware function.\n   */\n\n\n  asMiddleware() {\n    return async (req, res, next, end) => {\n      try {\n        const [middlewareError, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n\n        if (isComplete) {\n          await JRPCEngine._runReturnHandlers(returnHandlers);\n          return end(middlewareError);\n        }\n\n        return next(async handlerCallback => {\n          try {\n            await JRPCEngine._runReturnHandlers(returnHandlers);\n          } catch (error) {\n            return handlerCallback(error);\n          }\n\n          return handlerCallback();\n        });\n      } catch (error) {\n        return end(error);\n      }\n    };\n  }\n\n  async _handleBatch(reqs, cb) {\n    // The order here is important\n    try {\n      // 2. Wait for all requests to finish, or throw on some kind of fatal\n      // error\n      const responses = await Promise.all( // 1. Begin executing each request in the order received\n      reqs.map(this._promiseHandle.bind(this))); // 3. Return batch response\n\n      if (cb) {\n        return cb(null, responses);\n      }\n\n      return responses;\n    } catch (error) {\n      if (cb) {\n        return cb(error);\n      }\n\n      throw error;\n    }\n  }\n  /**\n   * A promise-wrapped _handle.\n   */\n\n\n  _promiseHandle(req) {\n    return new Promise(resolve => {\n      this._handle(req, (_err, res) => {\n        // There will always be a response, and it will always have any error\n        // that is caught and propagated.\n        resolve(res);\n      });\n    });\n  }\n  /**\n   * Ensures that the request object is valid, processes it, and passes any\n   * error and the response object to the given callback.\n   *\n   * Does not reject.\n   */\n\n\n  async _handle(callerReq, cb) {\n    if (!callerReq || Array.isArray(callerReq) || typeof callerReq !== \"object\") {\n      const error = new SerializableError({\n        code: -32603,\n        message: \"request must be plain object\"\n      });\n      return cb(error, {\n        id: undefined,\n        jsonrpc: \"2.0\",\n        error\n      });\n    }\n\n    if (typeof callerReq.method !== \"string\") {\n      const error = new SerializableError({\n        code: -32603,\n        message: \"method must be string\"\n      });\n      return cb(error, {\n        id: callerReq.id,\n        jsonrpc: \"2.0\",\n        error\n      });\n    }\n\n    const req = _objectSpread$1({}, callerReq);\n\n    const res = {\n      id: req.id,\n      jsonrpc: req.jsonrpc\n    };\n    let error = null;\n\n    try {\n      await this._processRequest(req, res);\n    } catch (_error) {\n      // A request handler error, a re-thrown middleware error, or something\n      // unexpected.\n      error = _error;\n    }\n\n    if (error) {\n      // Ensure no result is present on an errored response\n      delete res.result;\n\n      if (!res.error) {\n        res.error = serializeError(error);\n      }\n    }\n\n    return cb(error, res);\n  }\n  /**\n   * For the given request and response, runs all middleware and their return\n   * handlers, if any, and ensures that internal request processing semantics\n   * are satisfied.\n   */\n\n\n  async _processRequest(req, res) {\n    const [error, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware); // Throw if \"end\" was not called, or if the response has neither a result\n    // nor an error.\n\n    JRPCEngine._checkForCompletion(req, res, isComplete); // The return handlers should run even if an error was encountered during\n    // middleware processing.\n\n\n    await JRPCEngine._runReturnHandlers(returnHandlers); // Now we re-throw the middleware processing error, if any, to catch it\n    // further up the call chain.\n\n    if (error) {\n      throw error;\n    }\n  }\n\n}\n\nfunction mergeMiddleware(middlewareStack) {\n  const engine = new JRPCEngine();\n  middlewareStack.forEach(middleware => engine.push(middleware));\n  return engine.asMiddleware();\n}\n\nfunction createEngineStream(opts) {\n  if (!opts || !opts.engine) {\n    throw new Error(\"Missing engine parameter!\");\n  }\n\n  const {\n    engine\n  } = opts; // eslint-disable-next-line prefer-const\n\n  let stream;\n\n  function read() {\n    return undefined;\n  }\n\n  function write(req, _encoding, cb) {\n    engine.handle(req, (_err, res) => {\n      stream.push(res);\n    });\n    cb();\n  }\n\n  stream = new Duplex({\n    objectMode: true,\n    read,\n    write\n  }); // forward notifications\n\n  if (engine.on) {\n    engine.on(\"notification\", message => {\n      stream.push(message);\n    });\n  }\n\n  return stream;\n}\n\nclass Substream extends Duplex {\n  constructor(_ref) {\n    let {\n      parent,\n      name\n    } = _ref;\n    super({\n      objectMode: true\n    });\n\n    _defineProperty(this, \"_parent\", void 0);\n\n    _defineProperty(this, \"_name\", void 0);\n\n    this._parent = parent;\n    this._name = name;\n  }\n  /**\n   * Explicitly sets read operations to a no-op.\n   */\n\n\n  _read() {\n    return undefined;\n  }\n  /**\n   * Called when data should be written to this writable stream.\n   *\n   * @param chunk - Arbitrary object to write\n   * @param encoding - Encoding to use when writing payload\n   * @param callback - Called when writing is complete or an error occurs\n   */\n\n\n  _write(chunk, _encoding, callback) {\n    this._parent.push({\n      name: this._name,\n      data: chunk\n    });\n\n    callback();\n  }\n\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nconst IGNORE_SUBSTREAM = Symbol(\"IGNORE_SUBSTREAM\");\n\nclass ObjectMultiplex extends Duplex {\n  constructor() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(_objectSpread(_objectSpread({}, opts), {}, {\n      objectMode: true\n    }));\n\n    _defineProperty(this, \"_substreams\", void 0);\n\n    _defineProperty(this, \"getStream\", void 0);\n\n    this._substreams = {};\n  }\n\n  createStream(name) {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n\n    if (this._substreams[name]) {\n      throw new Error(\"ObjectMultiplex - Substream for name \\\"\".concat(name, \"\\\" already exists\"));\n    } // create substream\n\n\n    const substream = new Substream({\n      parent: this,\n      name\n    });\n    this._substreams[name] = substream; // listen for parent stream to end\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n    anyStreamEnd(this, _error => substream.destroy(_error || undefined));\n    return substream;\n  } // ignore streams (dont display orphaned data warning)\n\n\n  ignoreStream(name) {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n\n    if (this._substreams[name]) {\n      throw new Error(\"ObjectMultiplex - Substream for name \\\"\".concat(name, \"\\\" already exists\"));\n    } // set\n\n\n    this._substreams[name] = IGNORE_SUBSTREAM;\n  }\n\n  _read() {\n    return undefined;\n  }\n\n  _write(chunk, _encoding, callback) {\n    const {\n      name,\n      data\n    } = chunk;\n\n    if (!name) {\n      window.console.warn(\"ObjectMultiplex - malformed chunk without name \\\"\".concat(chunk, \"\\\"\"));\n      return callback();\n    } // get corresponding substream\n\n\n    const substream = this._substreams[name];\n\n    if (!substream) {\n      window.console.warn(\"ObjectMultiplex - orphaned data for stream \\\"\".concat(name, \"\\\"\"));\n      return callback();\n    } // push data into substream\n\n\n    if (substream !== IGNORE_SUBSTREAM) {\n      substream.push(data);\n    }\n\n    return callback();\n  }\n\n} // util\n\n\nfunction anyStreamEnd(stream, _cb) {\n  const cb = once(_cb);\n  eos(stream, {\n    readable: false\n  }, cb);\n  eos(stream, {\n    writable: false\n  }, cb);\n}\n\nfunction setupMultiplex(stream) {\n  const mux = new ObjectMultiplex();\n\n  mux.getStream = function streamHelper(name) {\n    if (this._substreams[name]) {\n      return this._substreams[name];\n    }\n\n    return this.createStream(name);\n  };\n\n  pump(stream, mux, stream, err => {\n    if (err) window.console.error(err);\n  });\n  return mux;\n}\n\nclass PostMessageStream extends BasePostMessageStream {\n  _postMessage(data) {\n    let originConstraint = this._targetOrigin;\n\n    if (typeof data === \"object\") {\n      const dataObj = data;\n\n      if (typeof dataObj.data === \"object\") {\n        const dataObjData = dataObj.data;\n\n        if (Array.isArray(dataObjData.params) && dataObjData.params.length > 0) {\n          const dataObjDataParam = dataObjData.params[0];\n\n          if (dataObjDataParam._origin) {\n            originConstraint = dataObjDataParam._origin;\n          } // add a constraint for the response\n\n\n          dataObjDataParam._origin = window.location.origin;\n        }\n      }\n    }\n\n    this._targetWindow.postMessage({\n      target: this._target,\n      data\n    }, originConstraint);\n  }\n\n}\n\nexport { BasePostMessageStream, IGNORE_SUBSTREAM, JRPCEngine, ObjectMultiplex, PostMessageStream, SafeEventEmitter, SerializableError, Substream, createAsyncMiddleware, createEngineStream, createErrorMiddleware, createIdRemapMiddleware, createLoggerMiddleware, createScaffoldMiddleware, createStreamMiddleware, getRpcPromiseCallback, mergeMiddleware, setupMultiplex };","map":{"version":3,"mappings":";;;;;;;;;;AAEA,SAASA,IAAT,GAAa;AACX,SAAOC,SAAP;AACD;;AAED,MAAMC,GAAG,GAAG,KAAZ;AACA,MAAMC,GAAG,GAAG,KAAZ;AACA,MAAMC,GAAG,GAAG,KAAZ;;AAEqB,oCAA8BC,MAA9B,CAAoC;AAiBvDC,cAUCC,IAVD,EAUC;AAVW;AACVC,UADU;AAEVC,YAFU;AAGVC,kBAAY,GAAGC,MAHL;AAIVC,kBAAY,GAAG;AAJL,QAUXL,IAVW;AAWJ;AACJM,gBAAU,EAAE;AADR;;AADPC;;AAAAA;;AAAAA;;AAAAA;;AAAAA;;AAAAA;;AAAAA;;AAAAA;;AAIC,QAAI,CAACN,IAAD,IAAS,CAACC,MAAd,EAAsB;AACpB,YAAM,IAAIM,KAAJ,CAAU,gBAAV,CAAN;AACD;;AACIC,iBAAQ,KAARA;AACAC,oBAAW,KAAXA;AACAC,iBAAQV,IAARU;AACL,SAAKC,OAAL,GAAeV,MAAf,CAVD;;AAWMW,yBAAgBV,YAAhBU;AACAC,yBAAgBT,YAAhBS;AACAC,sBAAa,KAAKC,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAAbF;AACAG,0BAAiB,IAAjBA;AAELd,UAAM,CAACe,gBAAPf,CAAwB,SAAxBA,EAAmC,KAAKW,UAAxCX,EAAoD,KAApDA;;AACA,SAAKgB,UAAL;AACD;;AAEDC,QAAM;AACJ,SAAKC,IAAL;;AACA,SAAKC,MAAL,CAAY1B,GAAZ,EAAiB,IAAjB,EAAuBJ,IAAvB;;AACKiB,oBAAW,KAAXA;AACAD,iBAAQ,KAARA;AACN;;AAEDW,YAAU;AACR,SAAKG,MAAL,CAAY5B,GAAZ,EAAiB,IAAjB,EAAuBF,IAAvB;;AACA,SAAK6B,IAAL;AACD;;AAEDE,SAAO,CAACC,IAAD,EAAc;AACf,SAAC,KAAKhB,KAAN,EAAa;AACf;AACIgB,cAAI,KAAK9B,GAAT8B,EAAc;AACXf,wBAAW,IAAXA;;AACL,aAAKa,MAAL,CAAY3B,GAAZ,EAAiB,IAAjB,EAAuBH,IAAvB;AAFF,OAAIgC,MAGG,IAAIA,IAAI,KAAK7B,GAAb,EAAkB;AAClBa,qBAAQ,IAARA;;AACD,aAAC,KAAKC,QAAN,EAAgB;AAClB,eAAKa,MAAL,CAAY3B,GAAZ,EAAiB,IAAjB,EAAuBH,IAAvB;AACD;;AACD,aAAKiC,MAAL;AACD;AAXH,KAAI,MAYG,IAAID,IAAI,KAAK5B,GAAb,EAAkB;AACvB,WAAKwB,MAAL;AADK,WAEA;AACL;AACI;AACGM,kBAAKF,IAALE;AADP,OAAI,CAEF,OAAOC,GAAP,EAAY;AACZ,aAAKC,IAAL,CAAU,OAAV,EAAmBD,GAAnB;AACD;AACF;AACF;;AAEDE,cAAY,CAACL,IAAD,EAAc;AAClBM,0BAAgB,GAAG,KAAKjB,aAAxBiB;;AACDlB,uBAAcmB,WAAdnB,CACH;AACEX,YAAM,EAAE,KAAKU,OADf;AAEEa;AAFF,KADGZ,EAKHkB,gBALGlB;AAON;;AAEDG,WAAS,CAACiB,KAAD,EAAoB;AAC3B,UAAMC,OAAO,GAAGD,KAAK,CAACR,IAAtB,CAD2B;;AAI3B,QACG,KAAKX,aAAL,KAAuB,GAAvB,IAA8BmB,KAAK,CAACE,MAANF,KAAiB,KAAKnB,aAApD,IACDmB,KAAK,CAACG,MAANH,KAAiB,KAAKpB,aADrB,IAED,OAAOqB,OAAP,KAAmB,QAFlB,IAGDA,OAAO,CAAChC,MAARgC,KAAmB,KAAKvB,KAHvB,IAID,CAACuB,OAAO,CAACT,IALX,EAME;AACA;AACD;;AAED,SAAKD,OAAL,CAAaU,OAAO,CAACT,IAArB;AACD;;AAEDY,OAAK;AACH,WAAO3C,SAAP;AACD;;AAED6B,QAAM,CAACE,IAAD,EAAgBa,CAAhB,EAAmBC,EAAnB,EAAiC;AAChCT,sBAAaL,IAAbK;;AACLS,MAAE;AACH;;AAEDC,UAAQ;AACNpC,UAAM,CAACqC,mBAAPrC,CAA2B,SAA3BA,EAAsC,KAAKW,UAA3CX,EAAuD,KAAvDA;AACD;;AA3HsD;;ACHzD,SAASsC,SAAT,CAAuCC,OAAvC,EAAsFC,OAAtF,EAAkGC,IAAlG,EAAyG;AACnG;AACFC,WAAO,CAACC,KAARD,CAAcH,OAAdG,EAAuBF,OAAvBE,EAAgCD,IAAhCC;AADF,GAAI,CAEF,OAAOlB,GAAP,EAAY;AACZ;AACAoB,cAAU,CAAC,MAAK;AACd,YAAMpB,GAAN;AADQ,MAAVoB;AAGD;AACF;;AAED,SAASC,UAAT,CAAuBC,GAAvB,EAA+B;AAC7B,QAAMC,CAAC,GAAGD,GAAG,CAACE,MAAd;AACA,QAAMC,IAAI,GAAG,IAAIC,KAAJ,CAAUH,CAAV,CAAb;;AACA,OAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,CAApB,EAAuBI,CAAC,IAAI,CAA5B,EAA+B;AAC7BF,QAAI,CAACE,CAAD,CAAJF,GAAUH,GAAG,CAACK,CAAD,CAAbF;AACD;;AACD,SAAOA,IAAP;AACD;;AAEoB,+BAAyBG,YAAzB,CAAqC;AACxD3B,MAAI,CAAC4B,IAAD,EAA6B;AAC/B,QAAIC,OAAO,GAAGD,IAAI,KAAK,OAAvB;AAEME,gBAAM,GAAc,KAAaC,OAAjCD;;AACFA,cAAM,KAAKjE,SAAXiE,EAAsB;AACxBD,aAAO,GAAGA,OAAO,IAAIC,MAAM,CAACE,KAAPF,KAAiBjE,SAAtCgE;AADF,KAAIC,MAEG,IAAI,CAACD,OAAL,EAAc;AACnB,aAAO,KAAP;AAP6B;;;AAAA,sCAAXb,IAAW;AAAXA,UAAW,UAAXA,GAAWiB,eAAXjB;AAAW;;AAW/B,QAAIa,OAAJ,EAAa;AACX,UAAIK,EAAJ;;AACA,UAAIlB,IAAI,CAACO,MAALP,GAAc,CAAlB,EAAqB;AAClBkB,eAAMlB,IAANkB;AACF;;AACGA,YAAE,YAAYvD,KAAduD,EAAqB;AACvB;AACA;AACMA,iBAHiB;AALd;;;AAWX,YAAMnC,GAAG,GAAG,IAAIpB,KAAJ,CAA6BuD,4BAAE,GAAQA,cAAE,CAAC7B,OAAH6B,EAAgB,GAAhBA,CAAR,GAAwB,EAA1BA,CAA7B,CAAZ;AACCnC,SAAW,CAACgB,OAAZhB,GAAsBmC,EAAtBnC;AACKA,gBAbK;AAcZ;;AAED,UAAMe,OAAO,GAAGgB,MAAM,CAACF,IAAD,CAAtB;;AAEId,eAAO,KAAKjD,SAAZiD,EAAuB;AACzB,aAAO,KAAP;AACD;;AAED,QAAI,OAAOA,OAAP,KAAmB,UAAvB,EAAmC;AACjCD,eAAS,CAACC,OAAD,EAAU,IAAV,EAAgBE,IAAhB,CAATH;AADF,WAEO;AACL,YAAMsB,GAAG,GAAGrB,OAAO,CAACS,MAApB;AACA,YAAMa,SAAS,GAAGhB,UAAU,CAACN,OAAD,CAA5B;;AACA,WAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGS,GAApB,EAAyBT,CAAC,IAAI,CAA9B,EAAiC;AAC/Bb,iBAAS,CAACuB,SAAS,CAACV,CAAD,CAAV,EAAe,IAAf,EAAqBV,IAArB,CAATH;AACD;AACF;;AAED,WAAO,IAAP;AACD;;AA7CuD;;ACzBrC,gCAA6BlC,KAA7B,CAAkC;AAKrDT,cAAgFC,IAAhF,EAAgF;AAApE;AAAEkE,UAAF;AAAQhC,aAAR;AAAiBT;AAAjB,QAAoEzB,IAApE;;AACV,QAAI,CAACmE,MAAM,CAACC,SAAPD,CAAiBD,IAAjBC,CAAL,EAA6B;AAC3B,YAAM,IAAI3D,KAAJ,CAAU,yBAAV,CAAN;AACD;;AACD,QAAI,CAAC0B,OAAD,IAAY,OAAOA,OAAP,KAAmB,QAAnC,EAA6C;AAC3C,YAAM,IAAI1B,KAAJ,CAAU,wBAAV,CAAN;AACD;;AAED,UAAM0B,OAAN;;AAR8E3B;;AAAAA;;AASzE2D,gBAAOA,IAAPA;;AACDzC,YAAI,KAAK/B,SAAT+B,EAAoB;AACjBA,kBAAOA,IAAPA;AACN;AACF;;AAED4C,UAAQ;AACN,WAAOC,SAAS,CAAC;AACfJ,UAAI,EAAE,KAAKA,IADI;AAEfhC,aAAO,EAAE,KAAKA,OAFC;AAGfT,UAAI,EAAE,KAAKA,IAHI;AAIf8C,WAAK,EAAE,KAAKA;AAJG,KAAD,CAAhB;AAMD;;AA3BoD;;MCoB1CC,qBAAqB,GAChC,UAACC,OAAD,EAAiCC,MAAjC;AAAkEC,kBAAlE,uEAAiF,IAAfA;AAAlE,SACA,CAACd,KAAD,EAAee,QAAf,KAAwD;AACtD,QAAIf,KAAK,IAAIe,QAAQ,CAACf,KAAtB,EAA6B;AAC3Ba,YAAM,CAACb,KAAK,IAAIe,QAAQ,CAACf,KAAnB,CAANa;AADF,WAEO,IAAI,CAACC,YAAD,IAAiBrB,KAAK,CAACuB,OAANvB,CAAcsB,QAAdtB,CAArB,EAA8C;AACnDmB,aAAO,CAACG,QAAD,CAAPH;AADK,WAEA;AACLA,aAAO,CAACG,QAAQ,CAACE,MAAV,CAAPL;AACD;AARH;AAAA;;AAiCI,SAAUM,qBAAV,CAAgCC,GAAhC,EAAgD;AAC7C,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAiBC,GAAjB,KAAwB;AACzB;AACF;AACI,iBAAOH,GAAG,CAACI,MAAX,KAAsB,QAAtB,IAAkC,CAACJ,GAAG,CAACI,MAAvC,EAA+C;AACjDH,WAAG,CAACrB,KAAJqB,GAAY,IAAII,iBAAJ,CAAsB;AAAEpB,cAAI,EAAE,CAAC,KAAT;AAAgBhC,iBAAO,EAAE;AAAzB,SAAtB,CAAZgD;AACAE,WAAG;AACH;AACD;;AACDD,UAAI,CAAEI,IAAD,IAAS;AACN;AAAE1B;AAAF,YAAYqB,GAAZ;;AACF,aAACrB,KAAD,EAAQ;AACV,iBAAO0B,IAAI,EAAX;AACD;;AACDP,WAAG,CAACnB,KAAJmB,kCAAoCnB,KAAK,CAAC3B,OAA1C,GAAqD2B,KAArDmB;AACA,eAAOO,IAAI,EAAX;AANE,QAAJJ;AAPF,KAAI,CAeF,OAAOtB,KAAP,EAAc;AACdmB,SAAG,CAACnB,KAAJmB,yCAA2CnB,KAAK,CAAC3B,OAAjD,GAA4D2B,KAA5DmB;AACAE,SAAG,CAACrB,KAAJqB,GAAY,IAAII,iBAAJ,CAAsB;AAAEpB,YAAI,EAAE,CAAC,KAAT;AAAgBhC,eAAO,EAAE2B,KAAK,CAAC3B;AAA/B,OAAtB,CAAZgD;AACAE,SAAG;AACJ;AApBH,GAAO;AAsBR;;SAEeI,yBAAsB;AAC9BC,aAAK,GAAU,EAAfA;;AAEN,WAASC,QAAT,GAAiB;AACf,WAAO,KAAP;AACD;;AAED,QAAM/B,MAAM,GAAG,IAAIgC,gBAAJ,EAAf;;AAESC,2BAAgBV,GAAhBU,EAA0C;AACjD,UAAMhD,OAAO,GAAG6C,KAAK,CAACP,GAAG,CAACW,EAAL,CAArB;;AACI,SAACjD,OAAD,EAAU;AACZ,YAAM,IAAIpC,KAAJ,oDAAqD0E,GAAG,CAACW,EAAzD,EAAN,IAAM,EAAN;AACD;;AAED,WAAOJ,KAAK,CAACP,GAAG,CAACW,EAAL,CAAZ,CANiD;;AAQjDC,UAAM,CAACC,MAAPD,CAAclD,OAAO,CAACsC,GAAtBY,EAA2BZ,GAA3BY,EARiD;AAUjD;;AACA9C,cAAU,CAACJ,OAAO,CAACwC,GAAT,CAAVpC;AACD;;AAEQgD,+BAAoBd,GAApBc,EAA6C;AACpDrC,UAAM,CAAC9B,IAAP8B,CAAY,cAAZA,EAA4BuB,GAA5BvB;AACD;;AAED,WAASsC,cAAT,CAAwBf,GAAxB,EAAoDgB,SAApD,EAAwE3D,EAAxE,EAA0G;AACxG,QAAIX,GAAJ;;AACI;AACF,YAAMuE,cAAc,GAAG,CAACjB,GAAG,CAACW,EAA5B;;AACA,UAAIM,cAAJ,EAAoB;AAClBH,2BAAmB,CAACd,GAAD,CAAnBc;AADF,aAEO;AACLJ,uBAAe,CAACV,GAAD,CAAfU;AACD;AANH,KAAI,CAOF,OAAOQ,IAAP,EAAa;AACbxE,SAAG,GAAGwE,IAANxE;AAVsG;;;AAaxGW,MAAE,CAACX,GAAD,CAAFW;AACD;;AAED,QAAM8D,MAAM,GAAG,IAAIvG,MAAJ,CAAW;AACxBQ,cAAU,EAAE,IADY;AAExBgG,QAAI,EAAEZ,QAFkB;AAGxBa,SAAK,EAAEN;AAHiB,GAAX,CAAf;;AAMMO,kBAAU,GAAqC,CAACvB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAiBC,GAAjB,KAAwB;AAC3E;AACAiB,UAAM,CAAC1E,IAAP0E,CAAYpB,GAAZoB,EAF2E;;AAI3EZ,SAAK,CAACR,GAAG,CAACY,EAAL,CAALJ,GAAqC;AAAER,SAAF;AAAOC,SAAP;AAAYC,UAAZ;AAAkBC;AAAlB,KAArCK;AAJF,GAAMe;;AAOC;AAAE7C,UAAF;AAAU6C,cAAV;AAAsBH;AAAtB;AACR;;AAIK,SAAUI,wBAAV,CAAmCC,QAAnC,EAEL;AACQ,UAACzB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAiBC,GAAjB,KAAwB;AACvBzC,iBAAO,GAAG+D,QAAQ,CAACzB,GAAG,CAACI,MAAL,CAAlB1C,CADuB;;AAGzBA,eAAO,KAAKjD,SAAZiD,EAAuB;AACzB,aAAOwC,IAAI,EAAX;AAJ2B;;;AAO7B,QAAI,OAAOxC,OAAP,KAAmB,UAAvB,EAAmC;AAC1BA,oBAAO,CAACsC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAiBC,GAAjB,CAAPzC;AARoB;;;AAW7BuC,OAAG,CAACJ,MAAJI,GAAavC,OAAbuC;AACA,WAAOE,GAAG,EAAV;AAZF,GAAO;AAcR;;SAEeuB,0BAAuB;AAC9B,UAAC1B,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAiByB,IAAjB,KAAyB;AAC9B,UAAMC,UAAU,GAAG5B,GAAG,CAACY,EAAvB;AACMiB,eAAK,GAAGC,QAAQ,EAAhBD;AACN7B,OAAG,CAACY,EAAJZ,GAAS6B,KAAT7B;AACAC,OAAG,CAACW,EAAJX,GAAS4B,KAAT5B;AACAC,QAAI,CAAEI,IAAD,IAAS;AACZN,SAAG,CAACY,EAAJZ,GAAS4B,UAAT5B;AACAC,SAAG,CAACW,EAAJX,GAAS2B,UAAT3B;AACAK,UAAI;AAHF,MAAJJ;AALF,GAAO;AAWR;;AAEK,SAAU6B,sBAAV,CAAiCC,MAAjC,EAAoD;AACjD,UAAChC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAiB7C,CAAjB,KAAsB;AAC3B2E,UAAM,CAACC,KAAPD,CAAa,KAAbA,EAAoBhC,GAApBgC,EAAyB,KAAzBA,EAAgC/B,GAAhC+B;AACA9B,QAAI;AAFN,GAAO;AAIR;;AA8BK,SAAUgC,qBAAV,CAAsCC,eAAtC,EAAgF;AAC7E,gBAAOnC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,EAAuBC,GAAvB,KAA8B;AACnC;AACA;AACA;AACA,QAAIiC,kBAAJ;AACA,UAAMC,WAAW,GAAG,IAAIC,OAAJ,CAAmB9C,OAAD,IAAY;AAChD4C,wBAAkB,GAAG5C,OAArB4C;AADkB,MAApB;AAIIG,6BAAqB,GAAY,IAAjCA;AACJ,QAAIC,aAAa,GAAG,KAApB,CAVmC;;AAa7BC,mBAAS,GAAG,YAAW;AAC3BD,mBAAa,GAAG,IAAhBA,CAD2B;AAI3B;;AAEAtC,UAAI,CAAEwC,yBAAD,IAA8B;AACjC;AACAH,6BAAqB,GAAGG,yBAAxBH;AACAH,0BAAkB;AAHhB,QAAJlC;AAKA,YAAMmC,WAAN;AAXF,KAAMI;;AAcF;AACF,YAAMN,eAAe,CAACnC,GAAD,EAAMC,GAAN,EAAWwC,SAAX,CAArB;;AAEA,UAAID,aAAJ,EAAmB;AACXH,0BADW;;AAEhBE,6BAA+C,CAAC,IAAD,CAA/CA;AAFH,aAGO;AACLpC,WAAG,CAAC,IAAD,CAAHA;AACD;AARH,KAAI,CASF,OAAOvB,KAAP,EAAc;AACd,UAAI2D,qBAAJ,EAA2B;AACxBA,6BAA+C,CAAC3D,KAAD,CAA/C2D;AADH,aAEO;AACLpC,WAAG,CAACvB,KAAD,CAAHuB;AACD;AACF;AA1CH,GAAO;AA4CR;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxPD;;;AAGG;;;AACG,MAAOwC,UAAP,SAA0BjC,gBAA1B,CAA0C;AAG9C5F;AACE;;AADFQ;;AAEOsH,uBAAc,EAAdA;AACN;AAED;;;;;;AAMG;;;AACmC,eAAjBC,iBAAiB,CACpC7C,GADoC,EAEpCC,GAFoC,EAGpC6C,eAHoC,EAGe;AAQ7CC,wBAAc,GAA8B,EAA5CA;AACFnE,aAAK,GAAG,IAARA;AACJ,QAAIoE,UAAU,GAAG,KAAjB,CAVmD;;AAanD,SAAK,MAAMzB,UAAX,IAAyBuB,eAAzB,EAA0C;AACxC,OAAClE,KAAD,EAAQoE,UAAR,IAAsB,MAAML,UAAU,CAACM,cAAXN,CAA0B3C,GAA1B2C,EAA+B1C,GAA/B0C,EAAoCpB,UAApCoB,EAAgDI,cAAhDJ,CAA5B;;AACA,UAAIK,UAAJ,EAAgB;AACd;AACD;AACF;;AACM,YAACpE,KAAD,EAAQoE,UAAR,EAAoBD,cAAc,CAACG,OAAfH,EAApB;AACR;AAED;;;;;AAKG;;;AAC0B,SAAdE,cAAc,CAC3BjD,GAD2B,EAE3BC,GAF2B,EAG3BsB,UAH2B,EAI3BwB,cAJ2B,EAIc;AAEzC,WAAO,IAAIT,OAAJ,CAAa9C,OAAD,IAAY;AACvBW,eAAG,GAA2BxD,GAAD,IAAkB;AACnD,cAAMiC,KAAK,GAAGjC,GAAG,IAAIsD,GAAG,CAACrB,KAAzB;;AACA,YAAIA,KAAJ,EAAW;AACTqB,aAAG,CAACrB,KAAJqB,GAAYkD,cAAc,CAACvE,KAAD,CAA1BqB;AAHiD;;;AAMnDT,eAAO,CAAC,CAACZ,KAAD,EAAQ,IAAR,CAAD,CAAPY;AANF,OAAMW;;AASAD,gBAAI,GAA4BkD,aAAD,IAA4C;AAC3EnD,eAAG,CAACrB,KAAJqB,EAAW;AACbE,aAAG,CAACF,GAAG,CAACrB,KAAL,CAAHuB;AADF,SAAIF,MAEG;AACL,cAAImD,aAAJ,EAAmB;AACjB,gBAAI,OAAOA,aAAP,KAAyB,UAA7B,EAAyC;AACvCjD,iBAAG,CAAC,IAAIE,iBAAJ,CAAsB;AAAEpB,oBAAI,EAAE,CAAC,KAAT;AAAgBhC,uBAAO,EAAE;AAAzB,eAAtB,CAAD,CAAHkD;AACD;;AACD4C,0BAAc,CAACrG,IAAfqG,CAAoBK,aAApBL;AALG;;;AASLvD,iBAAO,CAAC,CAAC,IAAD,EAAO,KAAP,CAAD,CAAPA;AACD;AAbH,OAAMU;;AAgBF;AACFqB,kBAAU,CAACvB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAiBC,GAAjB,CAAVoB;AADF,OAAI,CAEF,OAAO3C,KAAP,EAAc;AACduB,WAAG,CAACvB,KAAD,CAAHuB;AACD;AA9BI,MAAP;AAgCD;AAED;;;AAGG;;;AACoC,eAAlBkD,kBAAkB,CAAC5B,QAAD,EAAoC;AACzE,SAAK,MAAM/D,OAAX,IAAsB+D,QAAtB,EAAgC;AAC9B,YAAM,IAAIa,OAAJ,CAAkB,CAAC9C,OAAD,EAAUC,MAAV,KAAoB;AAC1C/B,eAAO,CAAEf,GAAD,IAAUA,GAAG,GAAG8C,MAAM,CAAC9C,GAAD,CAAT,GAAiB6C,OAAO,EAAtC,CAAP9B;AADI,QAAN;AAGD;AACF;AAED;;;AAGG;;;AAC+B,SAAnB4F,mBAAmB,CAACtD,GAAD,EAA4BC,GAA5B,EAAwD+C,UAAxD,EAA2E;AACvG,UAAE,YAAY/C,GAAd,KAAsB,EAAE,WAAWA,GAAb,CAAtB,EAAyC;AACrC,gBAAII,iBAAJ,CAAsB;AAAEpB,YAAI,EAAE,CAAC,KAAT;AAAgBhC,eAAO,EAAE;AAAzB,OAAtB;AACP;;AACG,SAAC+F,UAAD,EAAa;AACT,gBAAI3C,iBAAJ,CAAsB;AAAEpB,YAAI,EAAE,CAAC,KAAT;AAAgBhC,eAAO,EAAE;AAAzB,OAAtB;AACP;AACF;AAED;;;;AAIG;;;AACHP,MAAI,CAAO6E,UAAP,EAAuC;AACzC,SAAKqB,WAAL,CAAiBlG,IAAjB,CAAsB6E,UAAtB;AACD;;AAqCDgC,QAAM,CAACvD,GAAD,EAAe1C,EAAf,EAAuB;AAC3B,QAAIA,EAAE,IAAI,OAAOA,EAAP,KAAc,UAAxB,EAAoC;AAClC,YAAM,IAAI/B,KAAJ,CAAU,4CAAV,CAAN;AACD;;AAED,QAAI8C,KAAK,CAACuB,OAANvB,CAAc2B,GAAd3B,CAAJ,EAAwB;AACtB,UAAIf,EAAJ,EAAQ;AACN,eAAO,KAAKkG,YAAL,CAAkBxD,GAAlB,EAAuB1C,EAAvB,CAAP;AACD;;AACD,aAAO,KAAKkG,YAAL,CAAkBxD,GAAlB,CAAP;AACD;;AAED,QAAI1C,EAAJ,EAAQ;AACN,aAAO,KAAKmG,OAAL,CAAazD,GAAb,EAA0C1C,EAA1C,CAAP;AACD;;AACD,WAAO,KAAKoG,cAAL,CAAoB1D,GAApB,CAAP;AACD;AAED;;;;;AAKG;;;AACH2D,cAAY;AACH,kBAAO3D,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,EAAuBC,GAAvB,KAA8B;AAC/B;AACF,cAAM,CAACyD,eAAD,EAAkBZ,UAAlB,EAA8BD,cAA9B,IAAgD,MAAMJ,UAAU,CAACE,iBAAXF,CAA6B3C,GAA7B2C,EAAkC1C,GAAlC0C,EAAuC,KAAKC,WAA5CD,CAA5D;;AAEA,YAAIK,UAAJ,EAAgB;AACd,gBAAML,UAAU,CAACU,kBAAXV,CAA8BI,cAA9BJ,CAAN;AACOxC,oBAAG,CAACyD,eAAD,CAAHzD;AACR;;AAED,eAAOD,IAAI,CAAC,MAAO2D,eAAP,IAA0B;AAChC;AACF,kBAAMlB,UAAU,CAACU,kBAAXV,CAA8BI,cAA9BJ,CAAN;AADF,WAAI,CAEF,OAAO/D,KAAP,EAAc;AACPiF,kCAAe,CAACjF,KAAD,CAAfiF;AACR;;AACD,iBAAOA,eAAe,EAAtB;AANS,UAAX;AARF,OAAI,CAgBF,OAAOjF,KAAP,EAAc;AACPuB,kBAAG,CAACvB,KAAD,CAAHuB;AACR;AAnBH,KAAO;AAqBR;;AAYyB,QAAZqD,YAAY,CACxBM,IADwB,EAExBxG,EAFwB,EAE0C;AAElE;AACI;AACF;AACA;AACA,YAAMyG,SAAS,GAAG,MAAMzB,OAAO,CAAC0B,GAAR1B;AAEtBwB,UAAI,CAACG,GAALH,CAAS,KAAKJ,cAAL,CAAoB1H,IAApB,CAAyB,IAAzB,CAAT8H,CAFsBxB,CAAxB,CAHE;;AASF,UAAIhF,EAAJ,EAAQ;AACN,eAAOA,EAAE,CAAC,IAAD,EAAOyG,SAAP,CAAT;AACD;;AACD,aAAOA,SAAP;AAZF,KAAI,CAaF,OAAOnF,KAAP,EAAc;AACd,UAAItB,EAAJ,EAAQ;AACCA,iBAAE,CAACsB,KAAD,CAAFtB;AACR;;AAED,YAAMsB,KAAN;AACD;AACF;AAED;;AAEG;;;AACK8E,gBAAc,CAAC1D,GAAD,EAA0B;AAC9C,WAAO,IAAIsC,OAAJ,CAAa9C,OAAD,IAAY;AACxBiE,mBAAQzD,GAARyD,EAAa,CAACtC,IAAD,EAAOlB,GAAP,KAAc;AAC9B;AACA;AACAT,eAAO,CAACS,GAAD,CAAPT;AAHF,OAAKiE;AADA,MAAP;AAOD;AAED;;;;;AAKG;;;AACkB,QAAPA,OAAO,CAACS,SAAD,EAAkC5G,EAAlC,EAA+F;AAClH,QAAI,CAAC4G,SAAD,IAAc7F,KAAK,CAACuB,OAANvB,CAAc6F,SAAd7F,CAAd,IAA0C,OAAO6F,SAAP,KAAqB,QAAnE,EAA6E;AAC3E,YAAMtF,KAAK,GAAG,IAAIyB,iBAAJ,CAAsB;AAAEpB,YAAI,EAAE,CAAC,KAAT;AAAgBhC,eAAO,EAAE;AAAzB,OAAtB,CAAd;AACOK,eAAE,CAACsB,KAAD,EAAQ;AAAEgC,UAAE,EAAEnG,SAAN;AAAiB0J,eAAO,EAAE,KAA1B;AAAiCvF;AAAjC,OAAR,CAAFtB;AACR;;AAED,QAAI,OAAO4G,SAAS,CAAC9D,MAAjB,KAA4B,QAAhC,EAA0C;AACxC,YAAMxB,KAAK,GAAG,IAAIyB,iBAAJ,CAAsB;AAAEpB,YAAI,EAAE,CAAC,KAAT;AAAgBhC,eAAO,EAAE;AAAzB,OAAtB,CAAd;AACOK,eAAE,CAACsB,KAAD,EAAQ;AAAEgC,UAAE,EAAEsD,SAAS,CAACtD,EAAhB;AAAoBuD,eAAO,EAAE,KAA7B;AAAoCvF;AAApC,OAAR,CAAFtB;AACR;;AAEK0C,aAAG,GAA8BkE,8BAAjClE;;AACN,UAAMC,GAAG,GAA0B;AACjCW,QAAE,EAAEZ,GAAG,CAACY,EADyB;AAEjCuD,aAAO,EAAEnE,GAAG,CAACmE;AAFoB,KAAnC;AAIIvF,aAAK,GAAU,IAAfA;;AAEA;AACF,YAAM,KAAKwF,eAAL,CAAqBpE,GAArB,EAA0BC,GAA1B,CAAN;AADF,KAAI,CAEF,OAAOoE,MAAP,EAAe;AACf;AACA;AACAzF,WAAK,GAAGyF,MAARzF;AACD;;AAED,QAAIA,KAAJ,EAAW;AACT;AACOqB,gBAAG,CAACJ,MAAJI;;AACP,UAAI,CAACA,GAAG,CAACrB,KAAT,EAAgB;AACdqB,WAAG,CAACrB,KAAJqB,GAAYkD,cAAc,CAACvE,KAAD,CAA1BqB;AACD;AACF;;AAED,WAAO3C,EAAE,CAACsB,KAAD,EAAQqB,GAAR,CAAT;AACD;AAED;;;;AAIG;;;AAC0B,QAAfmE,eAAe,CAACpE,GAAD,EAA4BC,GAA5B,EAAsD;AAC3E,WAACrB,KAAD,EAAQoE,UAAR,EAAoBD,cAApB,IAAsC,MAAMJ,UAAU,CAACE,iBAAXF,CAA6B3C,GAA7B2C,EAAkC1C,GAAlC0C,EAAuC,KAAKC,WAA5CD,CAA5C,CAD2E;AAIjF;;AACAA,cAAU,CAACW,mBAAXX,CAA+B3C,GAA/B2C,EAAoC1C,GAApC0C,EAAyCK,UAAzCL,EALiF;AAQjF;;;AACA,UAAMA,UAAU,CAACU,kBAAXV,CAA8BI,cAA9BJ,CAAN,CATiF;AAYjF;;AACA,QAAI/D,KAAJ,EAAW;AACT,YAAMA,KAAN;AACD;AACF;;AA7T6C;;AAgU1C,SAAU0F,eAAV,CAA0BxB,eAA1B,EAA6E;AACjF,QAAMyB,MAAM,GAAG,IAAI5B,UAAJ,EAAf;AACAG,iBAAe,CAAC0B,OAAhB1B,CAAyBvB,UAAD,IAAgBgD,MAAM,CAAC7H,IAAP6H,CAAYhD,UAAZgD,CAAxCzB;AACOyB,eAAM,CAACZ,YAAPY;AACR;;AAMK,SAAUE,kBAAV,CAA6BC,IAA7B,EAAsD;AAC1D,MAAI,CAACA,IAAD,IAAS,CAACA,IAAI,CAACH,MAAnB,EAA2B;AACzB,UAAM,IAAIhJ,KAAJ,CAAU,2BAAV,CAAN;AACD;;AAEK;AAAEgJ;AAAF,MAAaG,IAAb,CALoD;;AAO1D,MAAItD,MAAJ;;AAEA,WAASC,IAAT,GAAa;AACX,WAAO5G,SAAP;AACD;;AAED,WAAS6G,KAAT,CAAetB,GAAf,EAA0CiB,SAA1C,EAA8D3D,EAA9D,EAAgG;AAC9FiH,UAAM,CAAChB,MAAPgB,CAAcvE,GAAduE,EAAmB,CAACpD,IAAD,EAAOlB,GAAP,KAAc;AAC/BmB,YAAM,CAAC1E,IAAP0E,CAAYnB,GAAZmB;AADF;AAGA9D,MAAE;AACH;;AAED8D,QAAM,GAAG,IAAIvG,MAAJ,CAAW;AAAEQ,cAAU,EAAE,IAAd;AAAoBgG,QAApB;AAA0BC;AAA1B,GAAX,CAATF,CApB0D;;AAuBtDmD,YAAM,CAACI,EAAPJ,EAAW;AACbA,UAAM,CAACI,EAAPJ,CAAU,cAAVA,EAA2BtH,OAAD,IAAY;AACpCmE,YAAM,CAAC1E,IAAP0E,CAAYnE,OAAZmE;AADF;AAGD;;AACD,SAAOA,MAAP;AACD;;AC/WoB,wBAAkBvG,MAAlB,CAAwB;AAK3CC,cAA2DC,IAA3D,EAA2D;AAA/C;AAAE6J,YAAF;AAAU5J;AAAV,QAA+CD,IAA/C;AACJ;AAAEM,gBAAU,EAAE;AAAd;;AADmDC;;AAAAA;;AAEpDuJ,mBAAUD,MAAVC;AACAnJ,iBAAQV,IAARU;AACN;AAED;;AAEG;;;AACH0B,OAAK;AACH,WAAO3C,SAAP;AACD;AAED;;;;;;AAMG;;;AACH6B,QAAM,CAACwI,KAAD,EAAiB7D,SAAjB,EAA4C8D,QAA5C,EAAoF;AACnFF,iBAAQnI,IAARmI,CAAa;AAChB7J,UAAI,EAAE,KAAKU,KADK;AAEhBc,UAAI,EAAEsI;AAFU,KAAbD;;AAILE,YAAQ;AACT;;AA/B0C;;;;;;;;;;;;;;;;;;;;;;;;;;;;MCMhCC,gBAAgB,GAAGC,MAAM,CAAC,kBAAD;;AAShC,MAAOC,eAAP,SAA+BrK,MAA/B,CAAqC;AAKzCC,gBAA8C;AAAlC4J,YAAkC,uEAAF,EAAhCA;AACV,0CACKA,IADL;AAEErJ,gBAAU,EAAE;AAFd;;AAD4CC;;AAAAA;;AAKvC6J,uBAAc,EAAdA;AACN;;AAEDC,cAAY,CAACpK,IAAD,EAAa;AACvB;AACI,SAACA,IAAD,EAAO;AACT,YAAM,IAAIO,KAAJ,CAAU,0CAAV,CAAN;AACD;;AAED,QAAI,KAAK4J,WAAL,CAAiBnK,IAAjB,CAAJ,EAA4B;AAC1B,YAAM,IAAIO,KAAJ,CAAmDP,uDAAzD,mBAAyDA,CAAnD,CAAN;AAPqB;;;AAWvB,UAAMqK,SAAS,GAAG,IAAIC,SAAJ,CAAc;AAAEV,YAAM,EAAE,IAAV;AAAgB5J;AAAhB,KAAd,CAAlB;AACA,SAAKmK,WAAL,CAAiBnK,IAAjB,IAAyBqK,SAAzB,CAZuB;AAevB;;AACAE,gBAAY,CAAC,IAAD,EAAQlB,MAAD,IAA2BgB,SAAS,CAACG,OAAVH,CAAkBhB,MAAM,IAAI5J,SAA5B4K,CAAlC,CAAZE;AAEA,WAAOF,SAAP;AA/BuC;;;AAmCzCI,cAAY,CAACzK,IAAD,EAAa;AACvB;AACI,SAACA,IAAD,EAAO;AACT,YAAM,IAAIO,KAAJ,CAAU,0CAAV,CAAN;AACD;;AACD,QAAI,KAAK4J,WAAL,CAAiBnK,IAAjB,CAAJ,EAA4B;AAC1B,YAAM,IAAIO,KAAJ,CAAmDP,uDAAzD,mBAAyDA,CAAnD,CAAN;AANqB;;;AASvB,SAAKmK,WAAL,CAAiBnK,IAAjB,IAAyBgK,gBAAzB;AACD;;AAED5H,OAAK;AACH,WAAO3C,SAAP;AACD;;AAED6B,QAAM,CAACwI,KAAD,EAAe7D,SAAf,EAA0C8D,QAA1C,EAAkF;AAChF;AAAE/J,UAAF;AAAQwB;AAAR,QAAiBsI,KAAjB;;AAEF,SAAC9J,IAAD,EAAO;AACTG,YAAM,CAACuK,OAAPvK,CAAewK,IAAfxK,4DAAuE2J,KAAvE;AACA,aAAOC,QAAQ,EAAf;AALoF;;;AAStF,UAAMM,SAAS,GAAG,KAAKF,WAAL,CAAiBnK,IAAjB,CAAlB;;AACI,SAACqK,SAAD,EAAY;AACdlK,YAAM,CAACuK,OAAPvK,CAAewK,IAAfxK,wDAAmEH,IAAnE;AACA,aAAO+J,QAAQ,EAAf;AAZoF;;;AAgBlFM,iBAAS,KAAKL,gBAAdK,EAAgC;AAClCA,eAAS,CAAC3I,IAAV2I,CAAe7I,IAAf6I;AACD;;AAED,WAAON,QAAQ,EAAf;AACD;;AAxEwC,C,CAAA;;;AA4E3C,SAASQ,YAAT,CAAsBnE,MAAtB,EAA+CwE,GAA/C,EAAkF;AAChF,QAAMtI,EAAE,GAAGuI,IAAI,CAACD,GAAD,CAAf;AACAE,KAAG,CAAC1E,MAAD,EAA8B;AAAE2E,YAAQ,EAAE;AAAZ,GAA9B,EAAmDzI,EAAnD,CAAHwI;AACAA,KAAG,CAAC1E,MAAD,EAA8B;AAAE4E,YAAQ,EAAE;AAAZ,GAA9B,EAAmD1I,EAAnD,CAAHwI;AACD;;AAEK,SAAUG,cAAV,CAAyB7E,MAAzB,EAAuC;AAC3C,QAAM8E,GAAG,GAAG,IAAIhB,eAAJ,EAAZ;;AACAgB,KAAG,CAACC,SAAJD,GAAgB,SAASE,YAAT,CAAsBpL,IAAtB,EAAkC;AAChD,QAAI,KAAKmK,WAAL,CAAiBnK,IAAjB,CAAJ,EAA4B;AAC1B,aAAO,KAAKmK,WAAL,CAAiBnK,IAAjB,CAAP;AACD;;AACD,WAAO,KAAKoK,YAAL,CAAkBpK,IAAlB,CAAP;AAJF;;AAOAqL,MAAI,CAACjF,MAAD,EAA8B8E,GAA9B,EAAwD9E,MAAxD,EAAsFzE,GAAD,IAAQ;AAC3FA,aAAKxB,MAAM,CAACuK,OAAPvK,CAAeyD,KAAfzD,CAAqBwB,GAArBxB;AADP,IAAJkL;AAGA,SAAOH,GAAP;AACD;;AC/GoB,gCAA0BI,qBAA1B,CAA+C;AAClEzJ,cAAY,CAACL,IAAD,EAAc;AACpBM,wBAAgB,GAAG,KAAKjB,aAAxBiB;;AACJ,QAAI,OAAON,IAAP,KAAgB,QAApB,EAA8B;AACtB+J,mBAAO,GAAG/J,IAAV+J;;AACN,UAAI,OAAOA,OAAO,CAAC/J,IAAf,KAAwB,QAA5B,EAAsC;AACpC,cAAMgK,WAAW,GAAGD,OAAO,CAAC/J,IAA5B;;AACA,YAAI6B,KAAK,CAACuB,OAANvB,CAAcmI,WAAW,CAACC,MAA1BpI,KAAqCmI,WAAW,CAACC,MAAZD,CAAmBrI,MAAnBqI,GAA4B,CAArE,EAAwE;AACtE,gBAAME,gBAAgB,GAAGF,WAAW,CAACC,MAAZD,CAAmB,CAAnBA,CAAzB;;AACIE,8BAAgB,CAACC,OAAjBD,EAA0B;AAC5B5J,4BAAgB,GAAG4J,gBAAgB,CAACC,OAApC7J;AAHoE;;;AAOtE4J,0BAAgB,CAACC,OAAjBD,GAA2BvL,MAAM,CAACyL,QAAPzL,CAAgB+B,MAA3CwJ;AACD;AACF;AACF;;AAEI9K,uBAAcmB,WAAdnB,CACH;AACEX,YAAM,EAAE,KAAKU,OADf;AAEEa;AAFF,KADGZ,EAKHkB,gBALGlB;AAON;;AA1BiE","names":["noop","undefined","SYN","ACK","BRK","Duplex","constructor","_ref","name","target","targetWindow","window","targetOrigin","objectMode","_defineProperty","Error","_init","_haveSyn","_name","_target","_targetWindow","_targetOrigin","_onMessage","onMessage","bind","_synIntervalId","addEventListener","_handShake","_break","cork","_write","_onData","data","uncork","push","err","emit","_postMessage","originConstraint","postMessage","event","message","origin","source","_read","_","cb","_destroy","removeEventListener","safeApply","handler","context","args","Reflect","apply","setTimeout","arrayClone","arr","n","length","copy","Array","i","EventEmitter","type","doError","events","_events","error","arguments","er","len","listeners","code","Number","isInteger","toString","stringify","stack","getRpcPromiseCallback","resolve","reject","unwrapResult","response","isArray","result","createErrorMiddleware","log","req","res","next","end","method","SerializableError","done","createStreamMiddleware","idMap","readNoop","SafeEventEmitter","processResponse","id","Object","assign","processNotification","processMessage","_encoding","isNotification","_err","stream","read","write","middleware","createScaffoldMiddleware","handlers","createIdRemapMiddleware","_end","originalId","newId","randomId","createLoggerMiddleware","logger","debug","createAsyncMiddleware","asyncMiddleware","resolveNextPromise","nextPromise","Promise","returnHandlerCallback","nextWasCalled","asyncNext","runReturnHandlersCallback","JRPCEngine","_middleware","_runAllMiddleware","middlewareStack","returnHandlers","isComplete","_runMiddleware","reverse","serializeError","returnHandler","_runReturnHandlers","_checkForCompletion","handle","_handleBatch","_handle","_promiseHandle","asMiddleware","middlewareError","handlerCallback","reqs","responses","all","map","callerReq","jsonrpc","_processRequest","_error","mergeMiddleware","engine","forEach","createEngineStream","opts","on","parent","_parent","chunk","callback","IGNORE_SUBSTREAM","Symbol","ObjectMultiplex","_substreams","createStream","substream","Substream","anyStreamEnd","destroy","ignoreStream","console","warn","_cb","once","eos","readable","writable","setupMultiplex","mux","getStream","streamHelper","pump","BasePostMessageStream","dataObj","dataObjData","params","dataObjDataParam","_origin","location"],"sources":["/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@toruslabs/openlogin-jrpc/src/basePostMessageStream.ts","/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@toruslabs/openlogin-jrpc/src/safeEventEmitter.ts","/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@toruslabs/openlogin-jrpc/src/serializableError.ts","/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@toruslabs/openlogin-jrpc/src/jrpc.ts","/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@toruslabs/openlogin-jrpc/src/jrpcEngine.ts","/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@toruslabs/openlogin-jrpc/src/substream.ts","/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@toruslabs/openlogin-jrpc/src/mux.ts","/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@toruslabs/openlogin-jrpc/src/postMessageStream.ts"],"sourcesContent":["import { Duplex } from \"readable-stream\";\n\nfunction noop(): void {\n  return undefined;\n}\n\nconst SYN = \"SYN\";\nconst ACK = \"ACK\";\nconst BRK = \"BRK\";\n\nexport default class BasePostMessageStream extends Duplex {\n  _init: boolean;\n\n  _haveSyn: boolean;\n\n  _name: string;\n\n  _target: string;\n\n  _targetWindow: Window;\n\n  _targetOrigin: string;\n\n  _onMessage: any;\n\n  _synIntervalId: number;\n\n  constructor({\n    name,\n    target,\n    targetWindow = window,\n    targetOrigin = \"*\",\n  }: {\n    name: string;\n    target: string;\n    targetWindow?: Window;\n    targetOrigin?: string;\n  }) {\n    super({\n      objectMode: true,\n    });\n    if (!name || !target) {\n      throw new Error(\"Invalid input.\");\n    }\n    this._init = false;\n    this._haveSyn = false;\n    this._name = name;\n    this._target = target; // target origin\n    this._targetWindow = targetWindow;\n    this._targetOrigin = targetOrigin;\n    this._onMessage = this.onMessage.bind(this);\n    this._synIntervalId = null;\n\n    window.addEventListener(\"message\", this._onMessage, false);\n    this._handShake();\n  }\n\n  _break(): void {\n    this.cork();\n    this._write(BRK, null, noop);\n    this._haveSyn = false;\n    this._init = false;\n  }\n\n  _handShake(): void {\n    this._write(SYN, null, noop);\n    this.cork();\n  }\n\n  _onData(data: unknown): void {\n    if (!this._init) {\n      // listen for handshake\n      if (data === SYN) {\n        this._haveSyn = true;\n        this._write(ACK, null, noop);\n      } else if (data === ACK) {\n        this._init = true;\n        if (!this._haveSyn) {\n          this._write(ACK, null, noop);\n        }\n        this.uncork();\n      }\n    } else if (data === BRK) {\n      this._break();\n    } else {\n      // forward message\n      try {\n        this.push(data);\n      } catch (err) {\n        this.emit(\"error\", err);\n      }\n    }\n  }\n\n  _postMessage(data: unknown): void {\n    const originConstraint = this._targetOrigin;\n    this._targetWindow.postMessage(\n      {\n        target: this._target,\n        data,\n      },\n      originConstraint\n    );\n  }\n\n  onMessage(event: MessageEvent): void {\n    const message = event.data;\n\n    // validate message\n    if (\n      (this._targetOrigin !== \"*\" && event.origin !== this._targetOrigin) ||\n      event.source !== this._targetWindow ||\n      typeof message !== \"object\" ||\n      message.target !== this._name ||\n      !message.data\n    ) {\n      return;\n    }\n\n    this._onData(message.data);\n  }\n\n  _read(): void {\n    return undefined;\n  }\n\n  _write(data: unknown, _, cb: () => void): void {\n    this._postMessage(data);\n    cb();\n  }\n\n  _destroy(): void {\n    window.removeEventListener(\"message\", this._onMessage, false);\n  }\n}\n","import { EventEmitter } from \"events\";\n\ntype Handler = (...args: any[]) => void;\ninterface EventMap {\n  [k: string]: Handler | Handler[] | undefined;\n}\n\nfunction safeApply<T, A extends any[]>(handler: (this: T, ...handlerArgs: A) => void, context: T, args: A): void {\n  try {\n    Reflect.apply(handler, context, args);\n  } catch (err) {\n    // Throw error after timeout so as not to interrupt the stack\n    setTimeout(() => {\n      throw err;\n    });\n  }\n}\n\nfunction arrayClone<T>(arr: T[]): T[] {\n  const n = arr.length;\n  const copy = new Array(n);\n  for (let i = 0; i < n; i += 1) {\n    copy[i] = arr[i];\n  }\n  return copy;\n}\n\nexport default class SafeEventEmitter extends EventEmitter {\n  emit(type: string, ...args: any[]): boolean {\n    let doError = type === \"error\";\n\n    const events: EventMap = (this as any)._events;\n    if (events !== undefined) {\n      doError = doError && events.error === undefined;\n    } else if (!doError) {\n      return false;\n    }\n\n    // If there is no 'error' event listener then throw.\n    if (doError) {\n      let er;\n      if (args.length > 0) {\n        [er] = args;\n      }\n      if (er instanceof Error) {\n        // Note: The comments on the `throw` lines are intentional, they show\n        // up in Node's output if this results in an unhandled exception.\n        throw er; // Unhandled 'error' event\n      }\n      // At least give some kind of context to the user\n      const err = new Error(`Unhandled error.${er ? ` (${er.message})` : \"\"}`);\n      (err as any).context = er;\n      throw err; // Unhandled 'error' event\n    }\n\n    const handler = events[type];\n\n    if (handler === undefined) {\n      return false;\n    }\n\n    if (typeof handler === \"function\") {\n      safeApply(handler, this, args);\n    } else {\n      const len = handler.length;\n      const listeners = arrayClone(handler);\n      for (let i = 0; i < len; i += 1) {\n        safeApply(listeners[i], this, args);\n      }\n    }\n\n    return true;\n  }\n}\n","import stringify from \"fast-safe-stringify\";\n\nexport default class SerializableError<T> extends Error {\n  public code: number;\n\n  public data: T;\n\n  constructor({ code, message, data }: { code: number; message: string; data?: T }) {\n    if (!Number.isInteger(code)) {\n      throw new Error(\"code must be an integer\");\n    }\n    if (!message || typeof message !== \"string\") {\n      throw new Error(\"message must be string\");\n    }\n\n    super(message);\n    this.code = code;\n    if (data !== undefined) {\n      this.data = data;\n    }\n  }\n\n  toString(): string {\n    return stringify({\n      code: this.code,\n      message: this.message,\n      data: this.data,\n      stack: this.stack,\n    });\n  }\n}\n","import { randomId } from \"@toruslabs/openlogin-utils\";\nimport { Duplex } from \"readable-stream\";\n\nimport SafeEventEmitter from \"./safeEventEmitter\";\nimport SerializableError from \"./serializableError\";\n\nexport type Json = boolean | number | string | null | { [property: string]: Json } | Json[];\n\nexport type JRPCVersion = \"2.0\";\nexport type JRPCId = number | string | void;\n\nexport type ConsoleLike = Pick<Console, \"log\" | \"warn\" | \"error\" | \"debug\" | \"info\" | \"trace\">;\nexport interface JRPCBase {\n  jsonrpc?: JRPCVersion;\n  id?: JRPCId;\n}\n\nexport interface JRPCResponse<T> extends JRPCBase {\n  result?: T;\n  error?: any;\n}\n\nexport const getRpcPromiseCallback =\n  (resolve: (value?: any) => void, reject: (error?: Error) => void, unwrapResult = true) =>\n  (error: Error, response: JRPCResponse<unknown>): void => {\n    if (error || response.error) {\n      reject(error || response.error);\n    } else if (!unwrapResult || Array.isArray(response)) {\n      resolve(response);\n    } else {\n      resolve(response.result);\n    }\n  };\n\nexport interface JRPCRequest<T> extends JRPCBase {\n  method: string;\n  params?: T;\n}\n\nexport type JRPCEngineNextCallback = (cb?: (done: (error?: Error) => void) => void) => void;\nexport type JRPCEngineEndCallback = (error?: Error) => void;\nexport type JRPCEngineReturnHandler = (done: (error?: Error) => void) => void;\n\ninterface IdMapValue {\n  req: JRPCRequest<unknown>;\n  res: JRPCResponse<unknown>;\n  next: JRPCEngineNextCallback;\n  end: JRPCEngineEndCallback;\n}\n\ninterface IdMap {\n  [requestId: string]: IdMapValue;\n}\n\nexport type JRPCMiddleware<T, U> = (req: JRPCRequest<T>, res: JRPCResponse<U>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => void;\n\nexport function createErrorMiddleware(log: ConsoleLike): JRPCMiddleware<unknown, unknown> {\n  return (req, res, next, end) => {\n    try {\n      // json-rpc-engine will terminate the request when it notices this error\n      if (typeof req.method !== \"string\" || !req.method) {\n        res.error = new SerializableError({ code: -32603, message: \"invalid method\" });\n        end();\n        return;\n      }\n      next((done) => {\n        const { error } = res;\n        if (!error) {\n          return done();\n        }\n        log.error(`OpenLogin - RPC Error: ${error.message}`, error);\n        return done();\n      });\n    } catch (error) {\n      log.error(`OpenLogin - RPC Error thrown: ${error.message}`, error);\n      res.error = new SerializableError({ code: -32603, message: error.message });\n      end();\n    }\n  };\n}\n\nexport function createStreamMiddleware(): { events: SafeEventEmitter; middleware: JRPCMiddleware<unknown, unknown>; stream: Duplex } {\n  const idMap: IdMap = {};\n\n  function readNoop() {\n    return false;\n  }\n\n  const events = new SafeEventEmitter();\n\n  function processResponse(res: JRPCResponse<unknown>) {\n    const context = idMap[res.id as unknown as string];\n    if (!context) {\n      throw new Error(`StreamMiddleware - Unknown response id \"${res.id}\"`);\n    }\n\n    delete idMap[res.id as unknown as string];\n    // copy whole res onto original res\n    Object.assign(context.res, res);\n    // run callback on empty stack,\n    // prevent internal stream-handler from catching errors\n    setTimeout(context.end);\n  }\n\n  function processNotification(res: JRPCRequest<unknown>) {\n    events.emit(\"notification\", res);\n  }\n\n  function processMessage(res: JRPCResponse<unknown>, _encoding: unknown, cb: (error?: Error | null) => void) {\n    let err;\n    try {\n      const isNotification = !res.id;\n      if (isNotification) {\n        processNotification(res as unknown as JRPCRequest<unknown>);\n      } else {\n        processResponse(res);\n      }\n    } catch (_err) {\n      err = _err;\n    }\n    // continue processing stream\n    cb(err);\n  }\n\n  const stream = new Duplex({\n    objectMode: true,\n    read: readNoop,\n    write: processMessage,\n  });\n\n  const middleware: JRPCMiddleware<unknown, unknown> = (req, res, next, end) => {\n    // write req to stream\n    stream.push(req);\n    // register request on id map\n    idMap[req.id as unknown as string] = { req, res, next, end };\n  };\n\n  return { events, middleware, stream };\n}\n\ntype ScaffoldMiddlewareHandler<T, U> = JRPCMiddleware<T, U> | Json;\n\nexport function createScaffoldMiddleware(handlers: {\n  [methodName: string]: ScaffoldMiddlewareHandler<unknown, unknown>;\n}): JRPCMiddleware<unknown, unknown> {\n  return (req, res, next, end) => {\n    const handler = handlers[req.method];\n    // if no handler, return\n    if (handler === undefined) {\n      return next();\n    }\n    // if handler is fn, call as middleware\n    if (typeof handler === \"function\") {\n      return handler(req, res, next, end);\n    }\n    // if handler is some other value, use as result\n    res.result = handler;\n    return end();\n  };\n}\n\nexport function createIdRemapMiddleware(): JRPCMiddleware<unknown, unknown> {\n  return (req, res, next, _end) => {\n    const originalId = req.id;\n    const newId = randomId();\n    req.id = newId;\n    res.id = newId;\n    next((done) => {\n      req.id = originalId;\n      res.id = originalId;\n      done();\n    });\n  };\n}\n\nexport function createLoggerMiddleware(logger: ConsoleLike): JRPCMiddleware<unknown, unknown> {\n  return (req, res, next, _) => {\n    logger.debug(\"REQ\", req, \"RES\", res);\n    next();\n  };\n}\n\nexport type AsyncJRPCEngineNextCallback = () => Promise<void>;\n\ntype Maybe<T> = Partial<T> | null | undefined;\n\nexport interface JRPCSuccess<T> extends JRPCBase {\n  result: Maybe<T>;\n}\n\nexport interface JRPCError {\n  code: number;\n  message: string;\n  data?: unknown;\n  stack?: string;\n}\n\nexport interface PendingJRPCResponse<T> extends JRPCBase {\n  result?: T;\n  error?: Error | JRPCError;\n}\n\nexport interface JRPCFailure extends JRPCBase {\n  error: JRPCError;\n}\n\nexport type AsyncJRPCMiddleware<T, U> = (req: JRPCRequest<T>, res: PendingJRPCResponse<U>, next: AsyncJRPCEngineNextCallback) => Promise<void>;\n\ntype ReturnHandlerCallback = (error: null | Error) => void;\n\nexport function createAsyncMiddleware<T, U>(asyncMiddleware: AsyncJRPCMiddleware<T, U>): JRPCMiddleware<T, U> {\n  return async (req, res, next, end) => {\n    // nextPromise is the key to the implementation\n    // it is resolved by the return handler passed to the\n    // \"next\" function\n    let resolveNextPromise: () => void;\n    const nextPromise = new Promise<void>((resolve) => {\n      resolveNextPromise = resolve;\n    });\n\n    let returnHandlerCallback: unknown = null;\n    let nextWasCalled = false;\n\n    // This will be called by the consumer's async middleware.\n    const asyncNext = async () => {\n      nextWasCalled = true;\n\n      // We pass a return handler to next(). When it is called by the engine,\n      // the consumer's async middleware will resume executing.\n\n      next((runReturnHandlersCallback) => {\n        // This callback comes from JRPCEngine._runReturnHandlers\n        returnHandlerCallback = runReturnHandlersCallback;\n        resolveNextPromise();\n      });\n      await nextPromise;\n    };\n\n    try {\n      await asyncMiddleware(req, res, asyncNext);\n\n      if (nextWasCalled) {\n        await nextPromise; // we must wait until the return handler is called\n        (returnHandlerCallback as ReturnHandlerCallback)(null);\n      } else {\n        end(null);\n      }\n    } catch (error) {\n      if (returnHandlerCallback) {\n        (returnHandlerCallback as ReturnHandlerCallback)(error);\n      } else {\n        end(error);\n      }\n    }\n  };\n}\n","import { serializeError } from \"eth-rpc-errors\";\nimport { Duplex } from \"readable-stream\";\n\nimport { JRPCEngineEndCallback, JRPCEngineNextCallback, JRPCEngineReturnHandler, JRPCMiddleware, JRPCRequest, JRPCResponse } from \"./jrpc\";\nimport SafeEventEmitter from \"./safeEventEmitter\";\nimport SerializableError from \"./serializableError\";\n\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */\nexport class JRPCEngine extends SafeEventEmitter {\n  private _middleware: JRPCMiddleware<unknown, unknown>[];\n\n  constructor() {\n    super();\n    this._middleware = [];\n  }\n\n  /**\n   * Serially executes the given stack of middleware.\n   *\n   * @returns An array of any error encountered during middleware execution,\n   * a boolean indicating whether the request was completed, and an array of\n   * middleware-defined return handlers.\n   */\n  private static async _runAllMiddleware(\n    req: JRPCRequest<unknown>,\n    res: JRPCResponse<unknown>,\n    middlewareStack: JRPCMiddleware<unknown, unknown>[]\n  ): Promise<\n    [\n      unknown, // error\n      boolean, // isComplete\n      JRPCEngineReturnHandler[]\n    ]\n  > {\n    const returnHandlers: JRPCEngineReturnHandler[] = [];\n    let error = null;\n    let isComplete = false;\n\n    // Go down stack of middleware, call and collect optional returnHandlers\n    for (const middleware of middlewareStack) {\n      [error, isComplete] = await JRPCEngine._runMiddleware(req, res, middleware, returnHandlers);\n      if (isComplete) {\n        break;\n      }\n    }\n    return [error, isComplete, returnHandlers.reverse()];\n  }\n\n  /**\n   * Runs an individual middleware.\n   *\n   * @returns An array of any error encountered during middleware exection,\n   * and a boolean indicating whether the request should end.\n   */\n  private static _runMiddleware(\n    req: JRPCRequest<unknown>,\n    res: JRPCResponse<unknown>,\n    middleware: JRPCMiddleware<unknown, unknown>,\n    returnHandlers: JRPCEngineReturnHandler[]\n  ): Promise<[unknown, boolean]> {\n    return new Promise((resolve) => {\n      const end: JRPCEngineEndCallback = (err?: unknown) => {\n        const error = err || res.error;\n        if (error) {\n          res.error = serializeError(error);\n        }\n        // True indicates that the request should end\n        resolve([error, true]);\n      };\n\n      const next: JRPCEngineNextCallback = (returnHandler?: JRPCEngineReturnHandler) => {\n        if (res.error) {\n          end(res.error);\n        } else {\n          if (returnHandler) {\n            if (typeof returnHandler !== \"function\") {\n              end(new SerializableError({ code: -32603, message: \"JRPCEngine: 'next' return handlers must be functions\" }));\n            }\n            returnHandlers.push(returnHandler);\n          }\n\n          // False indicates that the request should not end\n          resolve([null, false]);\n        }\n      };\n\n      try {\n        middleware(req, res, next, end);\n      } catch (error) {\n        end(error);\n      }\n    });\n  }\n\n  /**\n   * Serially executes array of return handlers. The request and response are\n   * assumed to be in their scope.\n   */\n  private static async _runReturnHandlers(handlers: JRPCEngineReturnHandler[]): Promise<void> {\n    for (const handler of handlers) {\n      await new Promise<void>((resolve, reject) => {\n        handler((err) => (err ? reject(err) : resolve()));\n      });\n    }\n  }\n\n  /**\n   * Throws an error if the response has neither a result nor an error, or if\n   * the \"isComplete\" flag is falsy.\n   */\n  private static _checkForCompletion(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>, isComplete: boolean): void {\n    if (!(\"result\" in res) && !(\"error\" in res)) {\n      throw new SerializableError({ code: -32603, message: \"Response has no error or result for request\" });\n    }\n    if (!isComplete) {\n      throw new SerializableError({ code: -32603, message: \"Nothing ended request\" });\n    }\n  }\n\n  /**\n   * Add a middleware function to the engine's middleware stack.\n   *\n   * @param middleware - The middleware function to add.\n   */\n  push<T, U>(middleware: JRPCMiddleware<T, U>): void {\n    this._middleware.push(middleware as JRPCMiddleware<unknown, unknown>);\n  }\n\n  /**\n   * Handle a JSON-RPC request, and return a response.\n   *\n   * @param request - The request to handle.\n   * @param callback - An error-first callback that will receive the response.\n   */\n  handle<T, U>(request: JRPCRequest<T>, callback: (error: unknown, response: JRPCResponse<U>) => void): void;\n\n  /**\n   * Handle an array of JSON-RPC requests, and return an array of responses.\n   *\n   * @param request - The requests to handle.\n   * @param callback - An error-first callback that will receive the array of\n   * responses.\n   */\n  handle<T, U>(requests: JRPCRequest<T>[], callback: (error: unknown, responses: JRPCResponse<U>[]) => void): void;\n\n  /**\n   * Handle a JSON-RPC request, and return a response.\n   *\n   * @param request - The request to handle.\n   * @returns A promise that resolves with the response, or rejects with an\n   * error.\n   */\n  handle<T, U>(request: JRPCRequest<T>): Promise<JRPCResponse<U>>;\n\n  /**\n   * Handle an array of JSON-RPC requests, and return an array of responses.\n   *\n   * @param request - The requests to handle.\n   * @returns A promise that resolves with the array of responses, or rejects\n   * with an error.\n   */\n  handle<T, U>(requests: JRPCRequest<T>[]): Promise<JRPCResponse<U>[]>;\n\n  handle(req: unknown, cb?: any) {\n    if (cb && typeof cb !== \"function\") {\n      throw new Error('\"callback\" must be a function if provided.');\n    }\n\n    if (Array.isArray(req)) {\n      if (cb) {\n        return this._handleBatch(req, cb);\n      }\n      return this._handleBatch(req);\n    }\n\n    if (cb) {\n      return this._handle(req as JRPCRequest<unknown>, cb);\n    }\n    return this._promiseHandle(req as JRPCRequest<unknown>);\n  }\n\n  /**\n   * Returns this engine as a middleware function that can be pushed to other\n   * engines.\n   *\n   * @returns This engine as a middleware function.\n   */\n  asMiddleware(): JRPCMiddleware<unknown, unknown> {\n    return async (req, res, next, end) => {\n      try {\n        const [middlewareError, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n\n        if (isComplete) {\n          await JRPCEngine._runReturnHandlers(returnHandlers);\n          return end(middlewareError as Error);\n        }\n\n        return next(async (handlerCallback) => {\n          try {\n            await JRPCEngine._runReturnHandlers(returnHandlers);\n          } catch (error) {\n            return handlerCallback(error);\n          }\n          return handlerCallback();\n        });\n      } catch (error) {\n        return end(error);\n      }\n    };\n  }\n\n  /**\n   * Like _handle, but for batch requests.\n   */\n  private _handleBatch(reqs: JRPCRequest<unknown>[]): Promise<JRPCResponse<unknown>[]>;\n\n  /**\n   * Like _handle, but for batch requests.\n   */\n  private _handleBatch(reqs: JRPCRequest<unknown>[], cb: (error: unknown, responses?: JRPCResponse<unknown>[]) => void): Promise<void>;\n\n  private async _handleBatch(\n    reqs: JRPCRequest<unknown>[],\n    cb?: (error: unknown, responses?: JRPCResponse<unknown>[]) => void\n  ): Promise<JRPCResponse<unknown>[] | void> {\n    // The order here is important\n    try {\n      // 2. Wait for all requests to finish, or throw on some kind of fatal\n      // error\n      const responses = await Promise.all(\n        // 1. Begin executing each request in the order received\n        reqs.map(this._promiseHandle.bind(this))\n      );\n\n      // 3. Return batch response\n      if (cb) {\n        return cb(null, responses);\n      }\n      return responses;\n    } catch (error) {\n      if (cb) {\n        return cb(error);\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * A promise-wrapped _handle.\n   */\n  private _promiseHandle(req: JRPCRequest<unknown>): Promise<JRPCResponse<unknown>> {\n    return new Promise((resolve) => {\n      this._handle(req, (_err, res) => {\n        // There will always be a response, and it will always have any error\n        // that is caught and propagated.\n        resolve(res);\n      });\n    });\n  }\n\n  /**\n   * Ensures that the request object is valid, processes it, and passes any\n   * error and the response object to the given callback.\n   *\n   * Does not reject.\n   */\n  private async _handle(callerReq: JRPCRequest<unknown>, cb: (error: unknown, response: JRPCResponse<unknown>) => void): Promise<void> {\n    if (!callerReq || Array.isArray(callerReq) || typeof callerReq !== \"object\") {\n      const error = new SerializableError({ code: -32603, message: \"request must be plain object\" });\n      return cb(error, { id: undefined, jsonrpc: \"2.0\", error });\n    }\n\n    if (typeof callerReq.method !== \"string\") {\n      const error = new SerializableError({ code: -32603, message: \"method must be string\" });\n      return cb(error, { id: callerReq.id, jsonrpc: \"2.0\", error });\n    }\n\n    const req: JRPCRequest<unknown> = { ...callerReq };\n    const res: JRPCResponse<unknown> = {\n      id: req.id,\n      jsonrpc: req.jsonrpc,\n    };\n    let error: Error = null;\n\n    try {\n      await this._processRequest(req, res);\n    } catch (_error) {\n      // A request handler error, a re-thrown middleware error, or something\n      // unexpected.\n      error = _error;\n    }\n\n    if (error) {\n      // Ensure no result is present on an errored response\n      delete res.result;\n      if (!res.error) {\n        res.error = serializeError(error);\n      }\n    }\n\n    return cb(error, res as JRPCResponse<unknown>);\n  }\n\n  /**\n   * For the given request and response, runs all middleware and their return\n   * handlers, if any, and ensures that internal request processing semantics\n   * are satisfied.\n   */\n  private async _processRequest(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    const [error, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n\n    // Throw if \"end\" was not called, or if the response has neither a result\n    // nor an error.\n    JRPCEngine._checkForCompletion(req, res, isComplete);\n\n    // The return handlers should run even if an error was encountered during\n    // middleware processing.\n    await JRPCEngine._runReturnHandlers(returnHandlers);\n\n    // Now we re-throw the middleware processing error, if any, to catch it\n    // further up the call chain.\n    if (error) {\n      throw error;\n    }\n  }\n}\n\nexport function mergeMiddleware(middlewareStack: JRPCMiddleware<unknown, unknown>[]): JRPCMiddleware<unknown, unknown> {\n  const engine = new JRPCEngine();\n  middlewareStack.forEach((middleware) => engine.push(middleware));\n  return engine.asMiddleware();\n}\n\nexport interface EngineStreamOptions {\n  engine: JRPCEngine;\n}\n\nexport function createEngineStream(opts: EngineStreamOptions): Duplex {\n  if (!opts || !opts.engine) {\n    throw new Error(\"Missing engine parameter!\");\n  }\n\n  const { engine } = opts;\n  // eslint-disable-next-line prefer-const\n  let stream: Duplex;\n\n  function read() {\n    return undefined;\n  }\n\n  function write(req: JRPCRequest<unknown>, _encoding: unknown, cb: (error?: Error | null) => void) {\n    engine.handle(req, (_err, res) => {\n      stream.push(res);\n    });\n    cb();\n  }\n\n  stream = new Duplex({ objectMode: true, read, write });\n\n  // forward notifications\n  if (engine.on) {\n    engine.on(\"notification\", (message) => {\n      stream.push(message);\n    });\n  }\n  return stream;\n}\n","import { BufferEncoding } from \"@toruslabs/openlogin-utils\";\nimport { Duplex } from \"readable-stream\";\n\nexport default class Substream extends Duplex {\n  private readonly _parent: any;\n\n  private readonly _name: string;\n\n  constructor({ parent, name }: { parent: any; name: string }) {\n    super({ objectMode: true });\n    this._parent = parent;\n    this._name = name;\n  }\n\n  /**\n   * Explicitly sets read operations to a no-op.\n   */\n  _read(): void {\n    return undefined;\n  }\n\n  /**\n   * Called when data should be written to this writable stream.\n   *\n   * @param chunk - Arbitrary object to write\n   * @param encoding - Encoding to use when writing payload\n   * @param callback - Called when writing is complete or an error occurs\n   */\n  _write(chunk: unknown, _encoding: BufferEncoding, callback: (error?: Error | null) => void): void {\n    this._parent.push({\n      name: this._name,\n      data: chunk,\n    });\n    callback();\n  }\n}\n","import { BufferEncoding } from \"@toruslabs/openlogin-utils\";\nimport eos from \"end-of-stream\";\nimport once from \"once\";\nimport pump from \"pump\";\nimport { Duplex } from \"readable-stream\";\nimport type { Readable, Writable } from \"stream\";\n\nimport Substream from \"./substream\";\n\nexport const IGNORE_SUBSTREAM = Symbol(\"IGNORE_SUBSTREAM\");\n\nexport type Stream = Readable | Writable;\n\ninterface Chunk {\n  name: string;\n  data: unknown;\n}\n\nexport class ObjectMultiplex extends Duplex {\n  public _substreams: Record<string, Substream | typeof IGNORE_SUBSTREAM>;\n\n  getStream: (name: string) => Substream | symbol;\n\n  constructor(opts: Record<string, unknown> = {}) {\n    super({\n      ...opts,\n      objectMode: true,\n    });\n    this._substreams = {};\n  }\n\n  createStream(name: string): Substream {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n\n    if (this._substreams[name]) {\n      throw new Error(`ObjectMultiplex - Substream for name \"${name}\" already exists`);\n    }\n\n    // create substream\n    const substream = new Substream({ parent: this, name });\n    this._substreams[name] = substream;\n\n    // listen for parent stream to end\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    anyStreamEnd(this, (_error?: Error | null) => substream.destroy(_error || undefined));\n\n    return substream;\n  }\n\n  // ignore streams (dont display orphaned data warning)\n  ignoreStream(name: string): void {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n    if (this._substreams[name]) {\n      throw new Error(`ObjectMultiplex - Substream for name \"${name}\" already exists`);\n    }\n    // set\n    this._substreams[name] = IGNORE_SUBSTREAM;\n  }\n\n  _read(): void {\n    return undefined;\n  }\n\n  _write(chunk: Chunk, _encoding: BufferEncoding, callback: (error?: Error | null) => void): void {\n    const { name, data } = chunk;\n\n    if (!name) {\n      window.console.warn(`ObjectMultiplex - malformed chunk without name \"${chunk}\"`);\n      return callback();\n    }\n\n    // get corresponding substream\n    const substream = this._substreams[name];\n    if (!substream) {\n      window.console.warn(`ObjectMultiplex - orphaned data for stream \"${name}\"`);\n      return callback();\n    }\n\n    // push data into substream\n    if (substream !== IGNORE_SUBSTREAM) {\n      substream.push(data);\n    }\n\n    return callback();\n  }\n}\n\n// util\nfunction anyStreamEnd(stream: ObjectMultiplex, _cb: (error?: Error | null) => void) {\n  const cb = once(_cb);\n  eos(stream as unknown as Stream, { readable: false }, cb);\n  eos(stream as unknown as Stream, { writable: false }, cb);\n}\n\nexport function setupMultiplex(stream: Duplex): ObjectMultiplex {\n  const mux = new ObjectMultiplex();\n  mux.getStream = function streamHelper(name: string) {\n    if (this._substreams[name]) {\n      return this._substreams[name];\n    }\n    return this.createStream(name);\n  };\n\n  pump(stream as unknown as Stream, mux as unknown as Stream, stream as unknown as Stream, (err) => {\n    if (err) window.console.error(err);\n  });\n  return mux;\n}\n","import BasePostMessageStream from \"./basePostMessageStream\";\n\nexport default class PostMessageStream extends BasePostMessageStream {\n  _postMessage(data: unknown): void {\n    let originConstraint = this._targetOrigin;\n    if (typeof data === \"object\") {\n      const dataObj = data as Record<string, unknown>;\n      if (typeof dataObj.data === \"object\") {\n        const dataObjData = dataObj.data as Record<string, unknown>;\n        if (Array.isArray(dataObjData.params) && dataObjData.params.length > 0) {\n          const dataObjDataParam = dataObjData.params[0] as Record<string, unknown>;\n          if (dataObjDataParam._origin) {\n            originConstraint = dataObjDataParam._origin as string;\n          }\n\n          // add a constraint for the response\n          dataObjDataParam._origin = window.location.origin;\n        }\n      }\n    }\n\n    this._targetWindow.postMessage(\n      {\n        target: this._target,\n        data,\n      },\n      originConstraint\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}