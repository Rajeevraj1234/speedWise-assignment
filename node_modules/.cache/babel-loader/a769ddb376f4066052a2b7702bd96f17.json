{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeInitializeMultisigInstructionUnchecked = exports.decodeInitializeMultisigInstruction = exports.createInitializeMultisigInstruction = exports.initializeMultisigInstructionData = void 0;\n\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst constants_1 = require(\"../constants\");\n\nconst errors_1 = require(\"../errors\");\n\nconst types_1 = require(\"./types\");\n/** TODO: docs */\n\n\nexports.initializeMultisigInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_1.u8)('m')]);\n/**\n * Construct an InitializeMultisig instruction\n *\n * @param account   Multisig account\n * @param signers   Full set of signers\n * @param m         Number of required signatures\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nfunction createInitializeMultisigInstruction(account, signers, m) {\n  let programId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : constants_1.TOKEN_PROGRAM_ID;\n  const keys = [{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }];\n\n  for (const signer of signers) {\n    keys.push({\n      pubkey: signer,\n      isSigner: false,\n      isWritable: false\n    });\n  }\n\n  const data = Buffer.alloc(exports.initializeMultisigInstructionData.span);\n  exports.initializeMultisigInstructionData.encode({\n    instruction: types_1.TokenInstruction.InitializeMultisig,\n    m\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n\nexports.createInitializeMultisigInstruction = createInitializeMultisigInstruction;\n/**\n * Decode an InitializeMultisig instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nfunction decodeInitializeMultisigInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constants_1.TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new errors_1.TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== exports.initializeMultisigInstructionData.span) throw new errors_1.TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account,\n      rent,\n      signers\n    },\n    data\n  } = decodeInitializeMultisigInstructionUnchecked(instruction);\n  if (data.instruction !== types_1.TokenInstruction.InitializeMultisig) throw new errors_1.TokenInvalidInstructionTypeError();\n  if (!account || !rent || !signers.length) throw new errors_1.TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId,\n    keys: {\n      account,\n      rent,\n      signers\n    },\n    data\n  };\n}\n\nexports.decodeInitializeMultisigInstruction = decodeInitializeMultisigInstruction;\n/**\n * Decode an InitializeMultisig instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nfunction decodeInitializeMultisigInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [account, rent, ...signers],\n    data\n  } = _ref;\n  return {\n    programId,\n    keys: {\n      account,\n      rent,\n      signers\n    },\n    data: exports.initializeMultisigInstructionData.decode(data)\n  };\n}\n\nexports.decodeInitializeMultisigInstructionUnchecked = decodeInitializeMultisigInstructionUnchecked;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAMA;AAQA;;;AACaA,4CAAoC,4BAA0C,CACvF,wBAAG,aAAH,CADuF,EAEvF,wBAAG,GAAH,CAFuF,CAA1C,CAApC;AAKb;;;;;;;;;;;AAUA,SAAgBC,mCAAhB,CACIC,OADJ,EAEIC,OAFJ,EAGIC,CAHJ,EAIgC;AAAA,MAA5BC,SAA4B,uEAAhBC,4BAAgB;AAE5B,QAAMC,IAAI,GAAG,CACT;AAAEC,UAAM,EAAEN,OAAV;AAAmBO,YAAQ,EAAE,KAA7B;AAAoCC,cAAU,EAAE;AAAhD,GADS,EAET;AAAEF,UAAM,EAAEG,4BAAV;AAA8BF,YAAQ,EAAE,KAAxC;AAA+CC,cAAU,EAAE;AAA3D,GAFS,CAAb;;AAIA,OAAK,MAAME,MAAX,IAAqBT,OAArB,EAA8B;AAC1BI,QAAI,CAACM,IAAL,CAAU;AAAEL,YAAM,EAAEI,MAAV;AAAkBH,cAAQ,EAAE,KAA5B;AAAmCC,gBAAU,EAAE;AAA/C,KAAV;AACH;;AAED,QAAMI,IAAI,GAAGC,MAAM,CAACC,KAAP,CAAahB,0CAAkCiB,IAA/C,CAAb;AACAjB,4CAAkCkB,MAAlC,CACI;AACIC,eAAW,EAAEC,yBAAiBC,kBADlC;AAEIjB;AAFJ,GADJ,EAKIU,IALJ;AAQA,SAAO,IAAIH,gCAAJ,CAA2B;AAAEJ,QAAF;AAAQF,aAAR;AAAmBS;AAAnB,GAA3B,CAAP;AACH;;AAxBDd;AAwCA;;;;;;;;;AAQA,SAAgBsB,mCAAhB,CACIH,WADJ,EAEgC;AAAA,MAA5Bd,SAA4B,uEAAhBC,4BAAgB;AAE5B,MAAI,CAACa,WAAW,CAACd,SAAZ,CAAsBkB,MAAtB,CAA6BlB,SAA7B,CAAL,EAA8C,MAAM,IAAImB,4CAAJ,EAAN;AAC9C,MAAIL,WAAW,CAACL,IAAZ,CAAiBW,MAAjB,KAA4BzB,0CAAkCiB,IAAlE,EACI,MAAM,IAAIO,yCAAJ,EAAN;AAEJ,QAAM;AACFjB,QAAI,EAAE;AAAEL,aAAF;AAAWwB,UAAX;AAAiBvB;AAAjB,KADJ;AAEFW;AAFE,MAGFa,4CAA4C,CAACR,WAAD,CAHhD;AAIA,MAAIL,IAAI,CAACK,WAAL,KAAqBC,yBAAiBC,kBAA1C,EAA8D,MAAM,IAAIG,yCAAJ,EAAN;AAC9D,MAAI,CAACtB,OAAD,IAAY,CAACwB,IAAb,IAAqB,CAACvB,OAAO,CAACsB,MAAlC,EAA0C,MAAM,IAAID,yCAAJ,EAAN,CAXd,CAa5B;;AAEA,SAAO;AACHnB,aADG;AAEHE,QAAI,EAAE;AACFL,aADE;AAEFwB,UAFE;AAGFvB;AAHE,KAFH;AAOHW;AAPG,GAAP;AASH;;AA1BDd;AA0CA;;;;;;;;AAOA,SAAgB2B,4CAAhB,OAIyB;AAAA,MAJoC;AACzDtB,aADyD;AAEzDE,QAAI,EAAE,CAACL,OAAD,EAAUwB,IAAV,EAAgB,GAAGvB,OAAnB,CAFmD;AAGzDW;AAHyD,GAIpC;AACrB,SAAO;AACHT,aADG;AAEHE,QAAI,EAAE;AACFL,aADE;AAEFwB,UAFE;AAGFvB;AAHE,KAFH;AAOHW,QAAI,EAAEd,0CAAkC4B,MAAlC,CAAyCd,IAAzC;AAPH,GAAP;AASH;;AAdDd","names":["exports","createInitializeMultisigInstruction","account","signers","m","programId","constants_1","keys","pubkey","isSigner","isWritable","web3_js_1","signer","push","data","Buffer","alloc","span","encode","instruction","types_1","InitializeMultisig","decodeInitializeMultisigInstruction","equals","errors_1","length","rent","decodeInitializeMultisigInstructionUnchecked","decode"],"sources":["/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@solana/spl-token/src/instructions/initializeMultisig.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { AccountMeta, PublicKey, SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors';\nimport { TokenInstruction } from './types';\n\n/** TODO: docs */\nexport interface InitializeMultisigInstructionData {\n    instruction: TokenInstruction.InitializeMultisig;\n    m: number;\n}\n\n/** TODO: docs */\nexport const initializeMultisigInstructionData = struct<InitializeMultisigInstructionData>([\n    u8('instruction'),\n    u8('m'),\n]);\n\n/**\n * Construct an InitializeMultisig instruction\n *\n * @param account   Multisig account\n * @param signers   Full set of signers\n * @param m         Number of required signatures\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeMultisigInstruction(\n    account: PublicKey,\n    signers: PublicKey[],\n    m: number,\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = [\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n    ];\n    for (const signer of signers) {\n        keys.push({ pubkey: signer, isSigner: false, isWritable: false });\n    }\n\n    const data = Buffer.alloc(initializeMultisigInstructionData.span);\n    initializeMultisigInstructionData.encode(\n        {\n            instruction: TokenInstruction.InitializeMultisig,\n            m,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid InitializeMultisig instruction */\nexport interface DecodedInitializeMultisigInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        rent: AccountMeta;\n        signers: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.InitializeMultisig;\n        m: number;\n    };\n}\n\n/**\n * Decode an InitializeMultisig instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeMultisigInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedInitializeMultisigInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeMultisigInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, rent, signers },\n        data,\n    } = decodeInitializeMultisigInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeMultisig) throw new TokenInvalidInstructionTypeError();\n    if (!account || !rent || !signers.length) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            rent,\n            signers,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated InitializeMultisig instruction */\nexport interface DecodedInitializeMultisigInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        rent: AccountMeta | undefined;\n        signers: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n        m: number;\n    };\n}\n\n/**\n * Decode an InitializeMultisig instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeMultisigInstructionUnchecked({\n    programId,\n    keys: [account, rent, ...signers],\n    data,\n}: TransactionInstruction): DecodedInitializeMultisigInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n            rent,\n            signers,\n        },\n        data: initializeMultisigInstructionData.decode(data),\n    };\n}\n"]},"metadata":{},"sourceType":"script"}