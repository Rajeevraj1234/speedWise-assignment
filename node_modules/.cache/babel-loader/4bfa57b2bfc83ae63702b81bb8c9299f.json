{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeBurnInstructionUnchecked = exports.decodeBurnInstruction = exports.createBurnInstruction = exports.burnInstructionData = void 0;\n\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\n\nconst buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst constants_1 = require(\"../constants\");\n\nconst errors_1 = require(\"../errors\");\n\nconst internal_1 = require(\"./internal\");\n\nconst types_1 = require(\"./types\");\n/** TODO: docs */\n\n\nexports.burnInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_utils_1.u64)('amount')]);\n/**\n * Construct a Burn instruction\n *\n * @param account      Account to burn tokens from\n * @param mint         Mint for the account\n * @param owner        Owner of the account\n * @param amount       Number of tokens to burn\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nfunction createBurnInstruction(account, mint, owner, amount) {\n  let multiSigners = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  let programId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : constants_1.TOKEN_PROGRAM_ID;\n  const keys = (0, internal_1.addSigners)([{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }], owner, multiSigners);\n  const data = Buffer.alloc(exports.burnInstructionData.span);\n  exports.burnInstructionData.encode({\n    instruction: types_1.TokenInstruction.Burn,\n    amount: BigInt(amount)\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n\nexports.createBurnInstruction = createBurnInstruction;\n/**\n * Decode a Burn instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nfunction decodeBurnInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constants_1.TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new errors_1.TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== exports.burnInstructionData.span) throw new errors_1.TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account,\n      mint,\n      owner,\n      multiSigners\n    },\n    data\n  } = decodeBurnInstructionUnchecked(instruction);\n  if (data.instruction !== types_1.TokenInstruction.Burn) throw new errors_1.TokenInvalidInstructionTypeError();\n  if (!account || !mint || !owner) throw new errors_1.TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId,\n    keys: {\n      account,\n      mint,\n      owner,\n      multiSigners\n    },\n    data\n  };\n}\n\nexports.decodeBurnInstruction = decodeBurnInstruction;\n/**\n * Decode a Burn instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nfunction decodeBurnInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [account, mint, owner, ...multiSigners],\n    data\n  } = _ref;\n  return {\n    programId,\n    keys: {\n      account,\n      mint,\n      owner,\n      multiSigners\n    },\n    data: exports.burnInstructionData.decode(data)\n  };\n}\n\nexports.decodeBurnInstructionUnchecked = decodeBurnInstructionUnchecked;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAMA;;AACA;AAQA;;;AACaA,8BAAsB,4BAA4B,CAAC,wBAAG,aAAH,CAAD,EAAoB,+BAAI,QAAJ,CAApB,CAA5B,CAAtB;AAEb;;;;;;;;;;;;;AAYA,SAAgBC,qBAAhB,CACIC,OADJ,EAEIC,IAFJ,EAGIC,KAHJ,EAIIC,MAJJ,EAMgC;AAAA,MAD5BC,YAC4B,uEADH,EACG;AAAA,MAA5BC,SAA4B,uEAAhBC,4BAAgB;AAE5B,QAAMC,IAAI,GAAG,2BACT,CACI;AAAEC,UAAM,EAAER,OAAV;AAAmBS,YAAQ,EAAE,KAA7B;AAAoCC,cAAU,EAAE;AAAhD,GADJ,EAEI;AAAEF,UAAM,EAAEP,IAAV;AAAgBQ,YAAQ,EAAE,KAA1B;AAAiCC,cAAU,EAAE;AAA7C,GAFJ,CADS,EAKTR,KALS,EAMTE,YANS,CAAb;AASA,QAAMO,IAAI,GAAGC,MAAM,CAACC,KAAP,CAAaf,4BAAoBgB,IAAjC,CAAb;AACAhB,8BAAoBiB,MAApB,CACI;AACIC,eAAW,EAAEC,yBAAiBC,IADlC;AAEIf,UAAM,EAAEgB,MAAM,CAAChB,MAAD;AAFlB,GADJ,EAKIQ,IALJ;AAQA,SAAO,IAAIS,gCAAJ,CAA2B;AAAEb,QAAF;AAAQF,aAAR;AAAmBM;AAAnB,GAA3B,CAAP;AACH;;AA3BDb;AA4CA;;;;;;;;;AAQA,SAAgBuB,qBAAhB,CACIL,WADJ,EAEgC;AAAA,MAA5BX,SAA4B,uEAAhBC,4BAAgB;AAE5B,MAAI,CAACU,WAAW,CAACX,SAAZ,CAAsBiB,MAAtB,CAA6BjB,SAA7B,CAAL,EAA8C,MAAM,IAAIkB,4CAAJ,EAAN;AAC9C,MAAIP,WAAW,CAACL,IAAZ,CAAiBa,MAAjB,KAA4B1B,4BAAoBgB,IAApD,EAA0D,MAAM,IAAIS,yCAAJ,EAAN;AAE1D,QAAM;AACFhB,QAAI,EAAE;AAAEP,aAAF;AAAWC,UAAX;AAAiBC,WAAjB;AAAwBE;AAAxB,KADJ;AAEFO;AAFE,MAGFc,8BAA8B,CAACT,WAAD,CAHlC;AAIA,MAAIL,IAAI,CAACK,WAAL,KAAqBC,yBAAiBC,IAA1C,EAAgD,MAAM,IAAIK,yCAAJ,EAAN;AAChD,MAAI,CAACvB,OAAD,IAAY,CAACC,IAAb,IAAqB,CAACC,KAA1B,EAAiC,MAAM,IAAIqB,yCAAJ,EAAN,CAVL,CAY5B;;AAEA,SAAO;AACHlB,aADG;AAEHE,QAAI,EAAE;AACFP,aADE;AAEFC,UAFE;AAGFC,WAHE;AAIFE;AAJE,KAFH;AAQHO;AARG,GAAP;AAUH;;AA1BDb;AA2CA;;;;;;;;AAOA,SAAgB2B,8BAAhB,OAIyB;AAAA,MAJsB;AAC3CpB,aAD2C;AAE3CE,QAAI,EAAE,CAACP,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuB,GAAGE,YAA1B,CAFqC;AAG3CO;AAH2C,GAItB;AACrB,SAAO;AACHN,aADG;AAEHE,QAAI,EAAE;AACFP,aADE;AAEFC,UAFE;AAGFC,WAHE;AAIFE;AAJE,KAFH;AAQHO,QAAI,EAAEb,4BAAoB4B,MAApB,CAA2Bf,IAA3B;AARH,GAAP;AAUH;;AAfDb","names":["exports","createBurnInstruction","account","mint","owner","amount","multiSigners","programId","constants_1","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","types_1","Burn","BigInt","web3_js_1","decodeBurnInstruction","equals","errors_1","length","decodeBurnInstructionUnchecked","decode"],"sources":["/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@solana/spl-token/src/instructions/burn.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { AccountMeta, PublicKey, Signer, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors';\nimport { addSigners } from './internal';\nimport { TokenInstruction } from './types';\n\n/** TODO: docs */\nexport interface BurnInstructionData {\n    instruction: TokenInstruction.Burn;\n    amount: bigint;\n}\n\n/** TODO: docs */\nexport const burnInstructionData = struct<BurnInstructionData>([u8('instruction'), u64('amount')]);\n\n/**\n * Construct a Burn instruction\n *\n * @param account      Account to burn tokens from\n * @param mint         Mint for the account\n * @param owner        Owner of the account\n * @param amount       Number of tokens to burn\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createBurnInstruction(\n    account: PublicKey,\n    mint: PublicKey,\n    owner: PublicKey,\n    amount: number | bigint,\n    multiSigners: Signer[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners(\n        [\n            { pubkey: account, isSigner: false, isWritable: true },\n            { pubkey: mint, isSigner: false, isWritable: true },\n        ],\n        owner,\n        multiSigners\n    );\n\n    const data = Buffer.alloc(burnInstructionData.span);\n    burnInstructionData.encode(\n        {\n            instruction: TokenInstruction.Burn,\n            amount: BigInt(amount),\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid Burn instruction */\nexport interface DecodedBurnInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        mint: AccountMeta;\n        owner: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.Burn;\n        amount: bigint;\n    };\n}\n\n/**\n * Decode a Burn instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeBurnInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedBurnInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== burnInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, mint, owner, multiSigners },\n        data,\n    } = decodeBurnInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.Burn) throw new TokenInvalidInstructionTypeError();\n    if (!account || !mint || !owner) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated Burn instruction */\nexport interface DecodedBurnInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        mint: AccountMeta | undefined;\n        owner: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n        amount: bigint;\n    };\n}\n\n/**\n * Decode a Burn instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeBurnInstructionUnchecked({\n    programId,\n    keys: [account, mint, owner, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedBurnInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            owner,\n            multiSigners,\n        },\n        data: burnInstructionData.decode(data),\n    };\n}\n"]},"metadata":{},"sourceType":"script"}