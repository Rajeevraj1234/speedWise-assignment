{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.thawAccount = void 0;\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst constants_1 = require(\"../constants\");\n\nconst index_1 = require(\"../instructions/index\");\n\nconst internal_1 = require(\"./internal\");\n/**\n * Thaw (unfreeze) a token account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Account to thaw\n * @param mint           Mint for the account\n * @param authority      Mint freeze authority\n * @param multiSigners   Signing accounts if `authority` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\n\n\nfunction thawAccount(connection, payer, account, mint, authority) {\n  let multiSigners = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n  let confirmOptions = arguments.length > 6 ? arguments[6] : undefined;\n  let programId = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : constants_1.TOKEN_PROGRAM_ID;\n  return __awaiter(this, void 0, void 0, function* () {\n    const [authorityPublicKey, signers] = (0, internal_1.getSigners)(authority, multiSigners);\n    const transaction = new web3_js_1.Transaction().add((0, index_1.createThawAccountInstruction)(account, mint, authorityPublicKey, multiSigners, programId));\n    return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, ...signers], confirmOptions);\n  });\n}\n\nexports.thawAccount = thawAccount;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AASA;;AACA;;AACA;AAEA;;;;;;;;;;;;;;;;AAcA,SAAsBA,WAAtB,CACIC,UADJ,EAEIC,KAFJ,EAGIC,OAHJ,EAIIC,IAJJ,EAKIC,SALJ,EAQgC;AAAA,MAF5BC,YAE4B,uEAFH,EAEG;AAAA,MAD5BC,cAC4B;AAAA,MAA5BC,SAA4B,uEAAhBC,4BAAgB;;AAE5B,UAAM,CAACC,kBAAD,EAAqBC,OAArB,IAAgC,2BAAWN,SAAX,EAAsBC,YAAtB,CAAtC;AAEA,UAAMM,WAAW,GAAG,IAAIC,qBAAJ,GAAkBC,GAAlB,CAChB,0CAA6BX,OAA7B,EAAsCC,IAAtC,EAA4CM,kBAA5C,EAAgEJ,YAAhE,EAA8EE,SAA9E,CADgB,CAApB;AAIA,WAAO,MAAM,yCAA0BP,UAA1B,EAAsCW,WAAtC,EAAmD,CAACV,KAAD,EAAQ,GAAGS,OAAX,CAAnD,EAAwEJ,cAAxE,CAAb;AACH;AAAA;;AAjBDQ","names":["thawAccount","connection","payer","account","mint","authority","multiSigners","confirmOptions","programId","constants_1","authorityPublicKey","signers","transaction","web3_js_1","add","exports"],"sources":["/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@solana/spl-token/src/actions/thawAccount.ts"],"sourcesContent":["import {\n    ConfirmOptions,\n    Connection,\n    PublicKey,\n    sendAndConfirmTransaction,\n    Signer,\n    Transaction,\n    TransactionSignature,\n} from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport { createThawAccountInstruction } from '../instructions/index';\nimport { getSigners } from './internal';\n\n/**\n * Thaw (unfreeze) a token account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Account to thaw\n * @param mint           Mint for the account\n * @param authority      Mint freeze authority\n * @param multiSigners   Signing accounts if `authority` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function thawAccount(\n    connection: Connection,\n    payer: Signer,\n    account: PublicKey,\n    mint: PublicKey,\n    authority: Signer | PublicKey,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n\n    const transaction = new Transaction().add(\n        createThawAccountInstruction(account, mint, authorityPublicKey, multiSigners, programId)\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n"]},"metadata":{},"sourceType":"script"}