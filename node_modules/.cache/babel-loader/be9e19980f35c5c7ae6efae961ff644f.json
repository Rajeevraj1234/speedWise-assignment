{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeInitializeMintInstructionUnchecked = exports.decodeInitializeMintInstruction = exports.createInitializeMintInstruction = exports.initializeMintInstructionData = void 0;\n\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\n\nconst buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst constants_1 = require(\"../constants\");\n\nconst errors_1 = require(\"../errors\");\n\nconst types_1 = require(\"./types\");\n/** TODO: docs */\n\n\nexports.initializeMintInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_1.u8)('decimals'), (0, buffer_layout_utils_1.publicKey)('mintAuthority'), (0, buffer_layout_1.u8)('freezeAuthorityOption'), (0, buffer_layout_utils_1.publicKey)('freezeAuthority')]);\n/**\n * Construct an InitializeMint instruction\n *\n * @param mint            Token mint account\n * @param decimals        Number of decimals in token account amounts\n * @param mintAuthority   Minting authority\n * @param freezeAuthority Optional authority that can freeze token accounts\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nfunction createInitializeMintInstruction(mint, decimals, mintAuthority, freezeAuthority) {\n  let programId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : constants_1.TOKEN_PROGRAM_ID;\n  const keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }];\n  const data = Buffer.alloc(exports.initializeMintInstructionData.span);\n  exports.initializeMintInstructionData.encode({\n    instruction: types_1.TokenInstruction.InitializeMint,\n    decimals,\n    mintAuthority,\n    freezeAuthorityOption: freezeAuthority ? 1 : 0,\n    freezeAuthority: freezeAuthority || new web3_js_1.PublicKey(0)\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n\nexports.createInitializeMintInstruction = createInitializeMintInstruction;\n/**\n * Decode an InitializeMint instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nfunction decodeInitializeMintInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constants_1.TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new errors_1.TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== exports.initializeMintInstructionData.span) throw new errors_1.TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      mint,\n      rent\n    },\n    data\n  } = decodeInitializeMintInstructionUnchecked(instruction);\n  if (data.instruction !== types_1.TokenInstruction.InitializeMint) throw new errors_1.TokenInvalidInstructionTypeError();\n  if (!mint || !rent) throw new errors_1.TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId,\n    keys: {\n      mint,\n      rent\n    },\n    data\n  };\n}\n\nexports.decodeInitializeMintInstruction = decodeInitializeMintInstruction;\n/**\n * Decode an InitializeMint instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nfunction decodeInitializeMintInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [mint, rent],\n    data\n  } = _ref;\n  const {\n    instruction,\n    decimals,\n    mintAuthority,\n    freezeAuthorityOption,\n    freezeAuthority\n  } = exports.initializeMintInstructionData.decode(data);\n  return {\n    programId,\n    keys: {\n      mint,\n      rent\n    },\n    data: {\n      instruction,\n      decimals,\n      mintAuthority,\n      freezeAuthority: freezeAuthorityOption ? freezeAuthority : null\n    }\n  };\n}\n\nexports.decodeInitializeMintInstructionUnchecked = decodeInitializeMintInstructionUnchecked;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAMA;AAWA;;;AACaA,wCAAgC,4BAAsC,CAC/E,wBAAG,aAAH,CAD+E,EAE/E,wBAAG,UAAH,CAF+E,EAG/E,qCAAU,eAAV,CAH+E,EAI/E,wBAAG,uBAAH,CAJ+E,EAK/E,qCAAU,iBAAV,CAL+E,CAAtC,CAAhC;AAQb;;;;;;;;;;;;AAWA,SAAgBC,+BAAhB,CACIC,IADJ,EAEIC,QAFJ,EAGIC,aAHJ,EAIIC,eAJJ,EAKgC;AAAA,MAA5BC,SAA4B,uEAAhBC,4BAAgB;AAE5B,QAAMC,IAAI,GAAG,CACT;AAAEC,UAAM,EAAEP,IAAV;AAAgBQ,YAAQ,EAAE,KAA1B;AAAiCC,cAAU,EAAE;AAA7C,GADS,EAET;AAAEF,UAAM,EAAEG,4BAAV;AAA8BF,YAAQ,EAAE,KAAxC;AAA+CC,cAAU,EAAE;AAA3D,GAFS,CAAb;AAKA,QAAME,IAAI,GAAGC,MAAM,CAACC,KAAP,CAAaf,sCAA8BgB,IAA3C,CAAb;AACAhB,wCAA8BiB,MAA9B,CACI;AACIC,eAAW,EAAEC,yBAAiBC,cADlC;AAEIjB,YAFJ;AAGIC,iBAHJ;AAIIiB,yBAAqB,EAAEhB,eAAe,GAAG,CAAH,GAAO,CAJjD;AAKIA,mBAAe,EAAEA,eAAe,IAAI,IAAIO,mBAAJ,CAAc,CAAd;AALxC,GADJ,EAQIC,IARJ;AAWA,SAAO,IAAID,gCAAJ,CAA2B;AAAEJ,QAAF;AAAQF,aAAR;AAAmBO;AAAnB,GAA3B,CAAP;AACH;;AAzBDb;AA0CA;;;;;;;;;AAQA,SAAgBsB,+BAAhB,CACIJ,WADJ,EAEgC;AAAA,MAA5BZ,SAA4B,uEAAhBC,4BAAgB;AAE5B,MAAI,CAACW,WAAW,CAACZ,SAAZ,CAAsBiB,MAAtB,CAA6BjB,SAA7B,CAAL,EAA8C,MAAM,IAAIkB,4CAAJ,EAAN;AAC9C,MAAIN,WAAW,CAACL,IAAZ,CAAiBY,MAAjB,KAA4BzB,sCAA8BgB,IAA9D,EAAoE,MAAM,IAAIQ,yCAAJ,EAAN;AAEpE,QAAM;AACFhB,QAAI,EAAE;AAAEN,UAAF;AAAQwB;AAAR,KADJ;AAEFb;AAFE,MAGFc,wCAAwC,CAACT,WAAD,CAH5C;AAIA,MAAIL,IAAI,CAACK,WAAL,KAAqBC,yBAAiBC,cAA1C,EAA0D,MAAM,IAAII,yCAAJ,EAAN;AAC1D,MAAI,CAACtB,IAAD,IAAS,CAACwB,IAAd,EAAoB,MAAM,IAAIF,yCAAJ,EAAN,CAVQ,CAY5B;;AAEA,SAAO;AACHlB,aADG;AAEHE,QAAI,EAAE;AACFN,UADE;AAEFwB;AAFE,KAFH;AAMHb;AANG,GAAP;AAQH;;AAxBDb;AAyCA;;;;;;;;AAOA,SAAgB2B,wCAAhB,OAIyB;AAAA,MAJgC;AACrDrB,aADqD;AAErDE,QAAI,EAAE,CAACN,IAAD,EAAOwB,IAAP,CAF+C;AAGrDb;AAHqD,GAIhC;AACrB,QAAM;AAAEK,eAAF;AAAef,YAAf;AAAyBC,iBAAzB;AAAwCiB,yBAAxC;AAA+DhB;AAA/D,MACFL,sCAA8B4B,MAA9B,CAAqCf,IAArC,CADJ;AAGA,SAAO;AACHP,aADG;AAEHE,QAAI,EAAE;AACFN,UADE;AAEFwB;AAFE,KAFH;AAMHb,QAAI,EAAE;AACFK,iBADE;AAEFf,cAFE;AAGFC,mBAHE;AAIFC,qBAAe,EAAEgB,qBAAqB,GAAGhB,eAAH,GAAqB;AAJzD;AANH,GAAP;AAaH;;AArBDL","names":["exports","createInitializeMintInstruction","mint","decimals","mintAuthority","freezeAuthority","programId","constants_1","keys","pubkey","isSigner","isWritable","web3_js_1","data","Buffer","alloc","span","encode","instruction","types_1","InitializeMint","freezeAuthorityOption","decodeInitializeMintInstruction","equals","errors_1","length","rent","decodeInitializeMintInstructionUnchecked","decode"],"sources":["/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@solana/spl-token/src/instructions/initializeMint.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { AccountMeta, PublicKey, SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors';\nimport { TokenInstruction } from './types';\n\n/** TODO: docs */\nexport interface InitializeMintInstructionData {\n    instruction: TokenInstruction.InitializeMint;\n    decimals: number;\n    mintAuthority: PublicKey;\n    freezeAuthorityOption: 1 | 0;\n    freezeAuthority: PublicKey;\n}\n\n/** TODO: docs */\nexport const initializeMintInstructionData = struct<InitializeMintInstructionData>([\n    u8('instruction'),\n    u8('decimals'),\n    publicKey('mintAuthority'),\n    u8('freezeAuthorityOption'),\n    publicKey('freezeAuthority'),\n]);\n\n/**\n * Construct an InitializeMint instruction\n *\n * @param mint            Token mint account\n * @param decimals        Number of decimals in token account amounts\n * @param mintAuthority   Minting authority\n * @param freezeAuthority Optional authority that can freeze token accounts\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeMintInstruction(\n    mint: PublicKey,\n    decimals: number,\n    mintAuthority: PublicKey,\n    freezeAuthority: PublicKey | null,\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = [\n        { pubkey: mint, isSigner: false, isWritable: true },\n        { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n    ];\n\n    const data = Buffer.alloc(initializeMintInstructionData.span);\n    initializeMintInstructionData.encode(\n        {\n            instruction: TokenInstruction.InitializeMint,\n            decimals,\n            mintAuthority,\n            freezeAuthorityOption: freezeAuthority ? 1 : 0,\n            freezeAuthority: freezeAuthority || new PublicKey(0),\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid InitializeMint instruction */\nexport interface DecodedInitializeMintInstruction {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta;\n        rent: AccountMeta;\n    };\n    data: {\n        instruction: TokenInstruction.InitializeMint;\n        decimals: number;\n        mintAuthority: PublicKey;\n        freezeAuthority: PublicKey | null;\n    };\n}\n\n/**\n * Decode an InitializeMint instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeMintInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedInitializeMintInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeMintInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { mint, rent },\n        data,\n    } = decodeInitializeMintInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeMint) throw new TokenInvalidInstructionTypeError();\n    if (!mint || !rent) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            mint,\n            rent,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated InitializeMint instruction */\nexport interface DecodedInitializeMintInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta | undefined;\n        rent: AccountMeta | undefined;\n    };\n    data: {\n        instruction: number;\n        decimals: number;\n        mintAuthority: PublicKey;\n        freezeAuthority: PublicKey | null;\n    };\n}\n\n/**\n * Decode an InitializeMint instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeMintInstructionUnchecked({\n    programId,\n    keys: [mint, rent],\n    data,\n}: TransactionInstruction): DecodedInitializeMintInstructionUnchecked {\n    const { instruction, decimals, mintAuthority, freezeAuthorityOption, freezeAuthority } =\n        initializeMintInstructionData.decode(data);\n\n    return {\n        programId,\n        keys: {\n            mint,\n            rent,\n        },\n        data: {\n            instruction,\n            decimals,\n            mintAuthority,\n            freezeAuthority: freezeAuthorityOption ? freezeAuthority : null,\n        },\n    };\n}\n"]},"metadata":{},"sourceType":"script"}