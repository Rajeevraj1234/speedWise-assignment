{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeBurnCheckedInstructionUnchecked = exports.decodeBurnCheckedInstruction = exports.createBurnCheckedInstruction = exports.burnCheckedInstructionData = void 0;\n\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\n\nconst buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst constants_1 = require(\"../constants\");\n\nconst errors_1 = require(\"../errors\");\n\nconst internal_1 = require(\"./internal\");\n\nconst types_1 = require(\"./types\");\n/** TODO: docs */\n\n\nexports.burnCheckedInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_utils_1.u64)('amount'), (0, buffer_layout_1.u8)('decimals')]);\n/**\n * Construct a BurnChecked instruction\n *\n * @param mint         Mint for the account\n * @param account      Account to burn tokens from\n * @param owner        Owner of the account\n * @param amount       Number of tokens to burn\n * @param decimals     Number of decimals in burn amount\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nfunction createBurnCheckedInstruction(account, mint, owner, amount, decimals) {\n  let multiSigners = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n  let programId = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : constants_1.TOKEN_PROGRAM_ID;\n  const keys = (0, internal_1.addSigners)([{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }], owner, multiSigners);\n  const data = Buffer.alloc(exports.burnCheckedInstructionData.span);\n  exports.burnCheckedInstructionData.encode({\n    instruction: types_1.TokenInstruction.BurnChecked,\n    amount: BigInt(amount),\n    decimals\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n\nexports.createBurnCheckedInstruction = createBurnCheckedInstruction;\n/**\n * Decode a BurnChecked instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nfunction decodeBurnCheckedInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constants_1.TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new errors_1.TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== exports.burnCheckedInstructionData.span) throw new errors_1.TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account,\n      mint,\n      owner,\n      multiSigners\n    },\n    data\n  } = decodeBurnCheckedInstructionUnchecked(instruction);\n  if (data.instruction !== types_1.TokenInstruction.BurnChecked) throw new errors_1.TokenInvalidInstructionTypeError();\n  if (!account || !mint || !owner) throw new errors_1.TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId,\n    keys: {\n      account,\n      mint,\n      owner,\n      multiSigners\n    },\n    data\n  };\n}\n\nexports.decodeBurnCheckedInstruction = decodeBurnCheckedInstruction;\n/**\n * Decode a BurnChecked instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nfunction decodeBurnCheckedInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [account, mint, owner, ...multiSigners],\n    data\n  } = _ref;\n  return {\n    programId,\n    keys: {\n      account,\n      mint,\n      owner,\n      multiSigners\n    },\n    data: exports.burnCheckedInstructionData.decode(data)\n  };\n}\n\nexports.decodeBurnCheckedInstructionUnchecked = decodeBurnCheckedInstructionUnchecked;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAMA;;AACA;AASA;;;AACaA,qCAA6B,4BAAmC,CACzE,wBAAG,aAAH,CADyE,EAEzE,+BAAI,QAAJ,CAFyE,EAGzE,wBAAG,UAAH,CAHyE,CAAnC,CAA7B;AAMb;;;;;;;;;;;;;;AAaA,SAAgBC,4BAAhB,CACIC,OADJ,EAEIC,IAFJ,EAGIC,KAHJ,EAIIC,MAJJ,EAKIC,QALJ,EAOgC;AAAA,MAD5BC,YAC4B,uEADH,EACG;AAAA,MAA5BC,SAA4B,uEAAhBC,4BAAgB;AAE5B,QAAMC,IAAI,GAAG,2BACT,CACI;AAAEC,UAAM,EAAET,OAAV;AAAmBU,YAAQ,EAAE,KAA7B;AAAoCC,cAAU,EAAE;AAAhD,GADJ,EAEI;AAAEF,UAAM,EAAER,IAAV;AAAgBS,YAAQ,EAAE,KAA1B;AAAiCC,cAAU,EAAE;AAA7C,GAFJ,CADS,EAKTT,KALS,EAMTG,YANS,CAAb;AASA,QAAMO,IAAI,GAAGC,MAAM,CAACC,KAAP,CAAahB,mCAA2BiB,IAAxC,CAAb;AACAjB,qCAA2BkB,MAA3B,CACI;AACIC,eAAW,EAAEC,yBAAiBC,WADlC;AAEIhB,UAAM,EAAEiB,MAAM,CAACjB,MAAD,CAFlB;AAGIC;AAHJ,GADJ,EAMIQ,IANJ;AASA,SAAO,IAAIS,gCAAJ,CAA2B;AAAEb,QAAF;AAAQF,aAAR;AAAmBM;AAAnB,GAA3B,CAAP;AACH;;AA7BDd;AA+CA;;;;;;;;;AAQA,SAAgBwB,4BAAhB,CACIL,WADJ,EAEgC;AAAA,MAA5BX,SAA4B,uEAAhBC,4BAAgB;AAE5B,MAAI,CAACU,WAAW,CAACX,SAAZ,CAAsBiB,MAAtB,CAA6BjB,SAA7B,CAAL,EAA8C,MAAM,IAAIkB,4CAAJ,EAAN;AAC9C,MAAIP,WAAW,CAACL,IAAZ,CAAiBa,MAAjB,KAA4B3B,mCAA2BiB,IAA3D,EAAiE,MAAM,IAAIS,yCAAJ,EAAN;AAEjE,QAAM;AACFhB,QAAI,EAAE;AAAER,aAAF;AAAWC,UAAX;AAAiBC,WAAjB;AAAwBG;AAAxB,KADJ;AAEFO;AAFE,MAGFc,qCAAqC,CAACT,WAAD,CAHzC;AAIA,MAAIL,IAAI,CAACK,WAAL,KAAqBC,yBAAiBC,WAA1C,EAAuD,MAAM,IAAIK,yCAAJ,EAAN;AACvD,MAAI,CAACxB,OAAD,IAAY,CAACC,IAAb,IAAqB,CAACC,KAA1B,EAAiC,MAAM,IAAIsB,yCAAJ,EAAN,CAVL,CAY5B;;AAEA,SAAO;AACHlB,aADG;AAEHE,QAAI,EAAE;AACFR,aADE;AAEFC,UAFE;AAGFC,WAHE;AAIFG;AAJE,KAFH;AAQHO;AARG,GAAP;AAUH;;AA1BDd;AA4CA;;;;;;;;AAOA,SAAgB4B,qCAAhB,OAIyB;AAAA,MAJ6B;AAClDpB,aADkD;AAElDE,QAAI,EAAE,CAACR,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuB,GAAGG,YAA1B,CAF4C;AAGlDO;AAHkD,GAI7B;AACrB,SAAO;AACHN,aADG;AAEHE,QAAI,EAAE;AACFR,aADE;AAEFC,UAFE;AAGFC,WAHE;AAIFG;AAJE,KAFH;AAQHO,QAAI,EAAEd,mCAA2B6B,MAA3B,CAAkCf,IAAlC;AARH,GAAP;AAUH;;AAfDd","names":["exports","createBurnCheckedInstruction","account","mint","owner","amount","decimals","multiSigners","programId","constants_1","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","types_1","BurnChecked","BigInt","web3_js_1","decodeBurnCheckedInstruction","equals","errors_1","length","decodeBurnCheckedInstructionUnchecked","decode"],"sources":["/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@solana/spl-token/src/instructions/burnChecked.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { AccountMeta, PublicKey, Signer, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors';\nimport { addSigners } from './internal';\nimport { TokenInstruction } from './types';\n\n/** TODO: docs */\nexport interface BurnCheckedInstructionData {\n    instruction: TokenInstruction.BurnChecked;\n    amount: bigint;\n    decimals: number;\n}\n\n/** TODO: docs */\nexport const burnCheckedInstructionData = struct<BurnCheckedInstructionData>([\n    u8('instruction'),\n    u64('amount'),\n    u8('decimals'),\n]);\n\n/**\n * Construct a BurnChecked instruction\n *\n * @param mint         Mint for the account\n * @param account      Account to burn tokens from\n * @param owner        Owner of the account\n * @param amount       Number of tokens to burn\n * @param decimals     Number of decimals in burn amount\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createBurnCheckedInstruction(\n    account: PublicKey,\n    mint: PublicKey,\n    owner: PublicKey,\n    amount: number | bigint,\n    decimals: number,\n    multiSigners: Signer[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners(\n        [\n            { pubkey: account, isSigner: false, isWritable: true },\n            { pubkey: mint, isSigner: false, isWritable: true },\n        ],\n        owner,\n        multiSigners\n    );\n\n    const data = Buffer.alloc(burnCheckedInstructionData.span);\n    burnCheckedInstructionData.encode(\n        {\n            instruction: TokenInstruction.BurnChecked,\n            amount: BigInt(amount),\n            decimals,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid BurnChecked instruction */\nexport interface DecodedBurnCheckedInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        mint: AccountMeta;\n        owner: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.BurnChecked;\n        amount: bigint;\n        decimals: number;\n    };\n}\n\n/**\n * Decode a BurnChecked instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeBurnCheckedInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedBurnCheckedInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== burnCheckedInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, mint, owner, multiSigners },\n        data,\n    } = decodeBurnCheckedInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.BurnChecked) throw new TokenInvalidInstructionTypeError();\n    if (!account || !mint || !owner) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated BurnChecked instruction */\nexport interface DecodedBurnCheckedInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        mint: AccountMeta | undefined;\n        owner: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n        amount: bigint;\n        decimals: number;\n    };\n}\n\n/**\n * Decode a BurnChecked instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeBurnCheckedInstructionUnchecked({\n    programId,\n    keys: [account, mint, owner, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedBurnCheckedInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            owner,\n            multiSigners,\n        },\n        data: burnCheckedInstructionData.decode(data),\n    };\n}\n"]},"metadata":{},"sourceType":"script"}