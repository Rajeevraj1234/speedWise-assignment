{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeSyncNativeInstructionUnchecked = exports.decodeSyncNativeInstruction = exports.createSyncNativeInstruction = exports.syncNativeInstructionData = void 0;\n\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst constants_1 = require(\"../constants\");\n\nconst errors_1 = require(\"../errors\");\n\nconst types_1 = require(\"./types\");\n/** TODO: docs */\n\n\nexports.syncNativeInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction')]);\n/**\n * Construct a SyncNative instruction\n *\n * @param account   Native account to sync lamports from\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nfunction createSyncNativeInstruction(account) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constants_1.TOKEN_PROGRAM_ID;\n  const keys = [{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }];\n  const data = Buffer.alloc(exports.syncNativeInstructionData.span);\n  exports.syncNativeInstructionData.encode({\n    instruction: types_1.TokenInstruction.SyncNative\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n\nexports.createSyncNativeInstruction = createSyncNativeInstruction;\n/**\n * Decode a SyncNative instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nfunction decodeSyncNativeInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constants_1.TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new errors_1.TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== exports.syncNativeInstructionData.span) throw new errors_1.TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account\n    },\n    data\n  } = decodeSyncNativeInstructionUnchecked(instruction);\n  if (data.instruction !== types_1.TokenInstruction.SyncNative) throw new errors_1.TokenInvalidInstructionTypeError();\n  if (!account) throw new errors_1.TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId,\n    keys: {\n      account\n    },\n    data\n  };\n}\n\nexports.decodeSyncNativeInstruction = decodeSyncNativeInstruction;\n/**\n * Decode a SyncNative instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nfunction decodeSyncNativeInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [account],\n    data\n  } = _ref;\n  return {\n    programId,\n    keys: {\n      account\n    },\n    data: exports.syncNativeInstructionData.decode(data)\n  };\n}\n\nexports.decodeSyncNativeInstructionUnchecked = decodeSyncNativeInstructionUnchecked;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAMA;AAOA;;;AACaA,oCAA4B,4BAAkC,CAAC,wBAAG,aAAH,CAAD,CAAlC,CAA5B;AAEb;;;;;;;;;AAQA,SAAgBC,2BAAhB,CAA4CC,OAA5C,EAA4F;AAAA,MAA5BC,SAA4B,uEAAhBC,4BAAgB;AACxF,QAAMC,IAAI,GAAG,CAAC;AAAEC,UAAM,EAAEJ,OAAV;AAAmBK,YAAQ,EAAE,KAA7B;AAAoCC,cAAU,EAAE;AAAhD,GAAD,CAAb;AAEA,QAAMC,IAAI,GAAGC,MAAM,CAACC,KAAP,CAAaX,kCAA0BY,IAAvC,CAAb;AACAZ,oCAA0Ba,MAA1B,CAAiC;AAAEC,eAAW,EAAEC,yBAAiBC;AAAhC,GAAjC,EAA+EP,IAA/E;AAEA,SAAO,IAAIQ,gCAAJ,CAA2B;AAAEZ,QAAF;AAAQF,aAAR;AAAmBM;AAAnB,GAA3B,CAAP;AACH;;AAPDT;AAoBA;;;;;;;;;AAQA,SAAgBkB,2BAAhB,CACIJ,WADJ,EAEgC;AAAA,MAA5BX,SAA4B,uEAAhBC,4BAAgB;AAE5B,MAAI,CAACU,WAAW,CAACX,SAAZ,CAAsBgB,MAAtB,CAA6BhB,SAA7B,CAAL,EAA8C,MAAM,IAAIiB,4CAAJ,EAAN;AAC9C,MAAIN,WAAW,CAACL,IAAZ,CAAiBY,MAAjB,KAA4BrB,kCAA0BY,IAA1D,EAAgE,MAAM,IAAIQ,yCAAJ,EAAN;AAEhE,QAAM;AACFf,QAAI,EAAE;AAAEH;AAAF,KADJ;AAEFO;AAFE,MAGFa,oCAAoC,CAACR,WAAD,CAHxC;AAIA,MAAIL,IAAI,CAACK,WAAL,KAAqBC,yBAAiBC,UAA1C,EAAsD,MAAM,IAAII,yCAAJ,EAAN;AACtD,MAAI,CAAClB,OAAL,EAAc,MAAM,IAAIkB,yCAAJ,EAAN,CAVc,CAY5B;;AAEA,SAAO;AACHjB,aADG;AAEHE,QAAI,EAAE;AACFH;AADE,KAFH;AAKHO;AALG,GAAP;AAOH;;AAvBDT;AAoCA;;;;;;;;AAOA,SAAgBsB,oCAAhB,OAIyB;AAAA,MAJ4B;AACjDnB,aADiD;AAEjDE,QAAI,EAAE,CAACH,OAAD,CAF2C;AAGjDO;AAHiD,GAI5B;AACrB,SAAO;AACHN,aADG;AAEHE,QAAI,EAAE;AACFH;AADE,KAFH;AAKHO,QAAI,EAAET,kCAA0BuB,MAA1B,CAAiCd,IAAjC;AALH,GAAP;AAOH;;AAZDT","names":["exports","createSyncNativeInstruction","account","programId","constants_1","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","types_1","SyncNative","web3_js_1","decodeSyncNativeInstruction","equals","errors_1","length","decodeSyncNativeInstructionUnchecked","decode"],"sources":["/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@solana/spl-token/src/instructions/syncNative.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { AccountMeta, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors';\nimport { TokenInstruction } from './types';\n\n/** TODO: docs */\nexport interface SyncNativeInstructionData {\n    instruction: TokenInstruction.SyncNative;\n}\n\n/** TODO: docs */\nexport const syncNativeInstructionData = struct<SyncNativeInstructionData>([u8('instruction')]);\n\n/**\n * Construct a SyncNative instruction\n *\n * @param account   Native account to sync lamports from\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createSyncNativeInstruction(account: PublicKey, programId = TOKEN_PROGRAM_ID): TransactionInstruction {\n    const keys = [{ pubkey: account, isSigner: false, isWritable: true }];\n\n    const data = Buffer.alloc(syncNativeInstructionData.span);\n    syncNativeInstructionData.encode({ instruction: TokenInstruction.SyncNative }, data);\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid SyncNative instruction */\nexport interface DecodedSyncNativeInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n    };\n    data: {\n        instruction: TokenInstruction.SyncNative;\n    };\n}\n\n/**\n * Decode a SyncNative instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeSyncNativeInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedSyncNativeInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== syncNativeInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account },\n        data,\n    } = decodeSyncNativeInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.SyncNative) throw new TokenInvalidInstructionTypeError();\n    if (!account) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated SyncNative instruction */\nexport interface DecodedSyncNativeInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n    };\n    data: {\n        instruction: number;\n    };\n}\n\n/**\n * Decode a SyncNative instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeSyncNativeInstructionUnchecked({\n    programId,\n    keys: [account],\n    data,\n}: TransactionInstruction): DecodedSyncNativeInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n        },\n        data: syncNativeInstructionData.decode(data),\n    };\n}\n"]},"metadata":{},"sourceType":"script"}