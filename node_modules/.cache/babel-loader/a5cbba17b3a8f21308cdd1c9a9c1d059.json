{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createWrappedNativeAccount = void 0;\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst constants_1 = require(\"../constants\");\n\nconst index_1 = require(\"../instructions/index\");\n\nconst index_2 = require(\"../state/index\");\n\nconst createAccount_1 = require(\"./createAccount\");\n/**\n * Create, initialize, and fund a new wrapped native SOL account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param owner          Owner of the new token account\n * @param amount         Number of lamports to wrap\n * @param keypair        Optional keypair, defaulting to the associated token account for the native mint and `owner`\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new wrapped native SOL account\n */\n\n\nfunction createWrappedNativeAccount(connection, payer, owner, amount, keypair, confirmOptions) {\n  let programId = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : constants_1.TOKEN_PROGRAM_ID;\n  return __awaiter(this, void 0, void 0, function* () {\n    // If the amount provided is explicitly 0 or NaN, just create the account without funding it\n    if (!amount) return yield (0, createAccount_1.createAccount)(connection, payer, constants_1.NATIVE_MINT, owner, keypair, confirmOptions, programId); // If a keypair isn't provided, create the account at the owner's ATA for the native mint and return its address\n\n    if (!keypair) {\n      const associatedToken = yield (0, index_2.getAssociatedTokenAddress)(constants_1.NATIVE_MINT, owner, false, programId, constants_1.ASSOCIATED_TOKEN_PROGRAM_ID);\n      const transaction = new web3_js_1.Transaction().add((0, index_1.createAssociatedTokenAccountInstruction)(payer.publicKey, associatedToken, owner, constants_1.NATIVE_MINT, programId, constants_1.ASSOCIATED_TOKEN_PROGRAM_ID), web3_js_1.SystemProgram.transfer({\n        fromPubkey: payer.publicKey,\n        toPubkey: associatedToken,\n        lamports: amount\n      }), (0, index_1.createSyncNativeInstruction)(associatedToken, programId));\n      yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer], confirmOptions);\n      return associatedToken;\n    } // Otherwise, create the account with the provided keypair and return its public key\n\n\n    const lamports = yield (0, index_2.getMinimumBalanceForRentExemptAccount)(connection);\n    const transaction = new web3_js_1.Transaction().add(web3_js_1.SystemProgram.createAccount({\n      fromPubkey: payer.publicKey,\n      newAccountPubkey: keypair.publicKey,\n      space: index_2.ACCOUNT_SIZE,\n      lamports,\n      programId\n    }), web3_js_1.SystemProgram.transfer({\n      fromPubkey: payer.publicKey,\n      toPubkey: keypair.publicKey,\n      lamports: amount\n    }), (0, index_1.createInitializeAccountInstruction)(keypair.publicKey, constants_1.NATIVE_MINT, owner, programId));\n    yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, keypair], confirmOptions);\n    return keypair.publicKey;\n  });\n}\n\nexports.createWrappedNativeAccount = createWrappedNativeAccount;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAUA;;AACA;;AAKA;;AACA;AAEA;;;;;;;;;;;;;;;AAaA,SAAsBA,0BAAtB,CACIC,UADJ,EAEIC,KAFJ,EAGIC,KAHJ,EAIIC,MAJJ,EAKIC,OALJ,EAMIC,cANJ,EAOgC;AAAA,MAA5BC,SAA4B,uEAAhBC,4BAAgB;;AAE5B;AACA,QAAI,CAACJ,MAAL,EAAa,OAAO,MAAM,mCAAcH,UAAd,EAA0BC,KAA1B,EAAiCM,uBAAjC,EAA8CL,KAA9C,EAAqDE,OAArD,EAA8DC,cAA9D,EAA8EC,SAA9E,CAAb,EAEb;;AACA,QAAI,CAACF,OAAL,EAAc;AACV,YAAMI,eAAe,GAAG,MAAM,uCAC1BD,uBAD0B,EAE1BL,KAF0B,EAG1B,KAH0B,EAI1BI,SAJ0B,EAK1BC,uCAL0B,CAA9B;AAQA,YAAME,WAAW,GAAG,IAAIC,qBAAJ,GAAkBC,GAAlB,CAChB,qDACIV,KAAK,CAACW,SADV,EAEIJ,eAFJ,EAGIN,KAHJ,EAIIK,uBAJJ,EAKID,SALJ,EAMIC,uCANJ,CADgB,EAShBG,wBAAcG,QAAd,CAAuB;AACnBC,kBAAU,EAAEb,KAAK,CAACW,SADC;AAEnBG,gBAAQ,EAAEP,eAFS;AAGnBQ,gBAAQ,EAAEb;AAHS,OAAvB,CATgB,EAchB,yCAA4BK,eAA5B,EAA6CF,SAA7C,CAdgB,CAApB;AAiBA,YAAM,yCAA0BN,UAA1B,EAAsCS,WAAtC,EAAmD,CAACR,KAAD,CAAnD,EAA4DI,cAA5D,CAAN;AAEA,aAAOG,eAAP;AACH,MAED;;;AACA,UAAMQ,QAAQ,GAAG,MAAM,mDAAsChB,UAAtC,CAAvB;AAEA,UAAMS,WAAW,GAAG,IAAIC,qBAAJ,GAAkBC,GAAlB,CAChBD,wBAAcO,aAAd,CAA4B;AACxBH,gBAAU,EAAEb,KAAK,CAACW,SADM;AAExBM,sBAAgB,EAAEd,OAAO,CAACQ,SAFF;AAGxBO,WAAK,EAAEC,oBAHiB;AAIxBJ,cAJwB;AAKxBV;AALwB,KAA5B,CADgB,EAQhBI,wBAAcG,QAAd,CAAuB;AACnBC,gBAAU,EAAEb,KAAK,CAACW,SADC;AAEnBG,cAAQ,EAAEX,OAAO,CAACQ,SAFC;AAGnBI,cAAQ,EAAEb;AAHS,KAAvB,CARgB,EAahB,gDAAmCC,OAAO,CAACQ,SAA3C,EAAsDL,uBAAtD,EAAmEL,KAAnE,EAA0EI,SAA1E,CAbgB,CAApB;AAgBA,UAAM,yCAA0BN,UAA1B,EAAsCS,WAAtC,EAAmD,CAACR,KAAD,EAAQG,OAAR,CAAnD,EAAqEC,cAArE,CAAN;AAEA,WAAOD,OAAO,CAACQ,SAAf;AACH;AAAA;;AAlEDS","names":["createWrappedNativeAccount","connection","payer","owner","amount","keypair","confirmOptions","programId","constants_1","associatedToken","transaction","web3_js_1","add","publicKey","transfer","fromPubkey","toPubkey","lamports","createAccount","newAccountPubkey","space","index_2","exports"],"sources":["/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@solana/spl-token/src/actions/createWrappedNativeAccount.ts"],"sourcesContent":["import {\n    ConfirmOptions,\n    Connection,\n    Keypair,\n    PublicKey,\n    sendAndConfirmTransaction,\n    Signer,\n    SystemProgram,\n    Transaction,\n} from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, NATIVE_MINT, TOKEN_PROGRAM_ID } from '../constants';\nimport {\n    createAssociatedTokenAccountInstruction,\n    createInitializeAccountInstruction,\n    createSyncNativeInstruction,\n} from '../instructions/index';\nimport { ACCOUNT_SIZE, getAssociatedTokenAddress, getMinimumBalanceForRentExemptAccount } from '../state/index';\nimport { createAccount } from './createAccount';\n\n/**\n * Create, initialize, and fund a new wrapped native SOL account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param owner          Owner of the new token account\n * @param amount         Number of lamports to wrap\n * @param keypair        Optional keypair, defaulting to the associated token account for the native mint and `owner`\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new wrapped native SOL account\n */\nexport async function createWrappedNativeAccount(\n    connection: Connection,\n    payer: Signer,\n    owner: PublicKey,\n    amount: number,\n    keypair?: Keypair,\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<PublicKey> {\n    // If the amount provided is explicitly 0 or NaN, just create the account without funding it\n    if (!amount) return await createAccount(connection, payer, NATIVE_MINT, owner, keypair, confirmOptions, programId);\n\n    // If a keypair isn't provided, create the account at the owner's ATA for the native mint and return its address\n    if (!keypair) {\n        const associatedToken = await getAssociatedTokenAddress(\n            NATIVE_MINT,\n            owner,\n            false,\n            programId,\n            ASSOCIATED_TOKEN_PROGRAM_ID\n        );\n\n        const transaction = new Transaction().add(\n            createAssociatedTokenAccountInstruction(\n                payer.publicKey,\n                associatedToken,\n                owner,\n                NATIVE_MINT,\n                programId,\n                ASSOCIATED_TOKEN_PROGRAM_ID\n            ),\n            SystemProgram.transfer({\n                fromPubkey: payer.publicKey,\n                toPubkey: associatedToken,\n                lamports: amount,\n            }),\n            createSyncNativeInstruction(associatedToken, programId)\n        );\n\n        await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n\n        return associatedToken;\n    }\n\n    // Otherwise, create the account with the provided keypair and return its public key\n    const lamports = await getMinimumBalanceForRentExemptAccount(connection);\n\n    const transaction = new Transaction().add(\n        SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: keypair.publicKey,\n            space: ACCOUNT_SIZE,\n            lamports,\n            programId,\n        }),\n        SystemProgram.transfer({\n            fromPubkey: payer.publicKey,\n            toPubkey: keypair.publicKey,\n            lamports: amount,\n        }),\n        createInitializeAccountInstruction(keypair.publicKey, NATIVE_MINT, owner, programId)\n    );\n\n    await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n\n    return keypair.publicKey;\n}\n"]},"metadata":{},"sourceType":"script"}