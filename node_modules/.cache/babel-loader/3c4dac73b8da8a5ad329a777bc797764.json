{"ast":null,"code":"/**\n * this method uses indexeddb to store the messages\n * There is currently no observerAPI for idb\n * @link https://github.com/w3c/IndexedDB/issues/51\n * \n * When working on this, ensure to use these performance optimizations:\n * @link https://rxdb.info/slow-indexeddb.html\n */\nimport { sleep, randomInt, randomToken, microSeconds as micro, isNode, PROMISE_RESOLVED_VOID } from '../util.js';\nexport var microSeconds = micro;\nimport { ObliviousSet } from 'oblivious-set';\nimport { fillOptionsWithDefaults } from '../options';\nvar DB_PREFIX = 'pubkey.broadcast-channel-0-';\nvar OBJECT_STORE_ID = 'messages';\n/**\n * Use relaxed durability for faster performance on all transactions.\n * @link https://nolanlawson.com/2021/08/22/speeding-up-indexeddb-reads-and-writes/\n */\n\nexport var TRANSACTION_SETTINGS = {\n  durability: 'relaxed'\n};\nexport var type = 'idb';\nexport function getIdb() {\n  if (typeof indexedDB !== 'undefined') return indexedDB;\n\n  if (typeof window !== 'undefined') {\n    if (typeof window.mozIndexedDB !== 'undefined') return window.mozIndexedDB;\n    if (typeof window.webkitIndexedDB !== 'undefined') return window.webkitIndexedDB;\n    if (typeof window.msIndexedDB !== 'undefined') return window.msIndexedDB;\n  }\n\n  return false;\n}\n/**\n * If possible, we should explicitly commit IndexedDB transactions\n * for better performance.\n * @link https://nolanlawson.com/2021/08/22/speeding-up-indexeddb-reads-and-writes/\n */\n\nexport function commitIndexedDBTransaction(tx) {\n  if (tx.commit) {\n    tx.commit();\n  }\n}\nexport function createDatabase(channelName) {\n  var IndexedDB = getIdb(); // create table\n\n  var dbName = DB_PREFIX + channelName;\n  /**\n   * All IndexedDB databases are opened without version\n   * because it is a bit faster, especially on firefox\n   * @link http://nparashuram.com/IndexedDB/perf/#Open%20Database%20with%20version\n   */\n\n  var openRequest = IndexedDB.open(dbName);\n\n  openRequest.onupgradeneeded = function (ev) {\n    var db = ev.target.result;\n    db.createObjectStore(OBJECT_STORE_ID, {\n      keyPath: 'id',\n      autoIncrement: true\n    });\n  };\n\n  var dbPromise = new Promise(function (res, rej) {\n    openRequest.onerror = function (ev) {\n      return rej(ev);\n    };\n\n    openRequest.onsuccess = function () {\n      res(openRequest.result);\n    };\n  });\n  return dbPromise;\n}\n/**\n * writes the new message to the database\n * so other readers can find it\n */\n\nexport function writeMessage(db, readerUuid, messageJson) {\n  var time = new Date().getTime();\n  var writeObject = {\n    uuid: readerUuid,\n    time: time,\n    data: messageJson\n  };\n  var tx = db.transaction([OBJECT_STORE_ID], 'readwrite', TRANSACTION_SETTINGS);\n  return new Promise(function (res, rej) {\n    tx.oncomplete = function () {\n      return res();\n    };\n\n    tx.onerror = function (ev) {\n      return rej(ev);\n    };\n\n    var objectStore = tx.objectStore(OBJECT_STORE_ID);\n    objectStore.add(writeObject);\n    commitIndexedDBTransaction(tx);\n  });\n}\nexport function getAllMessages(db) {\n  var tx = db.transaction(OBJECT_STORE_ID, 'readonly', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  return new Promise(function (res) {\n    objectStore.openCursor().onsuccess = function (ev) {\n      var cursor = ev.target.result;\n\n      if (cursor) {\n        ret.push(cursor.value); //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n\n        cursor[\"continue\"]();\n      } else {\n        commitIndexedDBTransaction(tx);\n        res(ret);\n      }\n    };\n  });\n}\nexport function getMessagesHigherThan(db, lastCursorId) {\n  var tx = db.transaction(OBJECT_STORE_ID, 'readonly', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  var keyRangeValue = IDBKeyRange.bound(lastCursorId + 1, Infinity);\n  /**\n   * Optimization shortcut,\n   * if getAll() can be used, do not use a cursor.\n   * @link https://rxdb.info/slow-indexeddb.html\n   */\n\n  if (objectStore.getAll) {\n    var getAllRequest = objectStore.getAll(keyRangeValue);\n    return new Promise(function (res, rej) {\n      getAllRequest.onerror = function (err) {\n        return rej(err);\n      };\n\n      getAllRequest.onsuccess = function (e) {\n        res(e.target.result);\n      };\n    });\n  }\n\n  function openCursor() {\n    // Occasionally Safari will fail on IDBKeyRange.bound, this\n    // catches that error, having it open the cursor to the first\n    // item. When it gets data it will advance to the desired key.\n    try {\n      keyRangeValue = IDBKeyRange.bound(lastCursorId + 1, Infinity);\n      return objectStore.openCursor(keyRangeValue);\n    } catch (e) {\n      return objectStore.openCursor();\n    }\n  }\n\n  return new Promise(function (res, rej) {\n    var openCursorRequest = openCursor();\n\n    openCursorRequest.onerror = function (err) {\n      return rej(err);\n    };\n\n    openCursorRequest.onsuccess = function (ev) {\n      var cursor = ev.target.result;\n\n      if (cursor) {\n        if (cursor.value.id < lastCursorId + 1) {\n          cursor[\"continue\"](lastCursorId + 1);\n        } else {\n          ret.push(cursor.value);\n          cursor[\"continue\"]();\n        }\n      } else {\n        commitIndexedDBTransaction(tx);\n        res(ret);\n      }\n    };\n  });\n}\nexport function removeMessagesById(db, ids) {\n  var tx = db.transaction([OBJECT_STORE_ID], 'readwrite', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  return Promise.all(ids.map(function (id) {\n    var deleteRequest = objectStore[\"delete\"](id);\n    return new Promise(function (res) {\n      deleteRequest.onsuccess = function () {\n        return res();\n      };\n    });\n  }));\n}\nexport function getOldMessages(db, ttl) {\n  var olderThen = new Date().getTime() - ttl;\n  var tx = db.transaction(OBJECT_STORE_ID, 'readonly', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  return new Promise(function (res) {\n    objectStore.openCursor().onsuccess = function (ev) {\n      var cursor = ev.target.result;\n\n      if (cursor) {\n        var msgObk = cursor.value;\n\n        if (msgObk.time < olderThen) {\n          ret.push(msgObk); //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n\n          cursor[\"continue\"]();\n        } else {\n          // no more old messages,\n          commitIndexedDBTransaction(tx);\n          res(ret);\n          return;\n        }\n      } else {\n        res(ret);\n      }\n    };\n  });\n}\nexport function cleanOldMessages(db, ttl) {\n  return getOldMessages(db, ttl).then(function (tooOld) {\n    return removeMessagesById(db, tooOld.map(function (msg) {\n      return msg.id;\n    }));\n  });\n}\nexport function create(channelName, options) {\n  options = fillOptionsWithDefaults(options);\n  return createDatabase(channelName).then(function (db) {\n    var state = {\n      closed: false,\n      lastCursorId: 0,\n      channelName: channelName,\n      options: options,\n      uuid: randomToken(),\n\n      /**\n       * emittedMessagesIds\n       * contains all messages that have been emitted before\n       * @type {ObliviousSet}\n       */\n      eMIs: new ObliviousSet(options.idb.ttl * 2),\n      // ensures we do not read messages in parrallel\n      writeBlockPromise: PROMISE_RESOLVED_VOID,\n      messagesCallback: null,\n      readQueuePromises: [],\n      db: db\n    };\n    /**\n     * Handle abrupt closes that do not originate from db.close().\n     * This could happen, for example, if the underlying storage is\n     * removed or if the user clears the database in the browser's\n     * history preferences.\n     */\n\n    db.onclose = function () {\n      state.closed = true;\n      if (options.idb.onclose) options.idb.onclose();\n    };\n    /**\n     * if service-workers are used,\n     * we have no 'storage'-event if they post a message,\n     * therefore we also have to set an interval\n     */\n\n\n    _readLoop(state);\n\n    return state;\n  });\n}\n\nfunction _readLoop(state) {\n  if (state.closed) return;\n  readNewMessages(state).then(function () {\n    return sleep(state.options.idb.fallbackInterval);\n  }).then(function () {\n    return _readLoop(state);\n  });\n}\n\nfunction _filterMessage(msgObj, state) {\n  if (msgObj.uuid === state.uuid) return false; // send by own\n\n  if (state.eMIs.has(msgObj.id)) return false; // already emitted\n\n  if (msgObj.data.time < state.messagesCallbackTime) return false; // older then onMessageCallback\n\n  return true;\n}\n/**\n * reads all new messages from the database and emits them\n */\n\n\nfunction readNewMessages(state) {\n  // channel already closed\n  if (state.closed) return PROMISE_RESOLVED_VOID; // if no one is listening, we do not need to scan for new messages\n\n  if (!state.messagesCallback) return PROMISE_RESOLVED_VOID;\n  return getMessagesHigherThan(state.db, state.lastCursorId).then(function (newerMessages) {\n    var useMessages = newerMessages\n    /**\n     * there is a bug in iOS where the msgObj can be undefined some times\n     * so we filter them out\n     * @link https://github.com/pubkey/broadcast-channel/issues/19\n     */\n    .filter(function (msgObj) {\n      return !!msgObj;\n    }).map(function (msgObj) {\n      if (msgObj.id > state.lastCursorId) {\n        state.lastCursorId = msgObj.id;\n      }\n\n      return msgObj;\n    }).filter(function (msgObj) {\n      return _filterMessage(msgObj, state);\n    }).sort(function (msgObjA, msgObjB) {\n      return msgObjA.time - msgObjB.time;\n    }); // sort by time\n\n    useMessages.forEach(function (msgObj) {\n      if (state.messagesCallback) {\n        state.eMIs.add(msgObj.id);\n        state.messagesCallback(msgObj.data);\n      }\n    });\n    return PROMISE_RESOLVED_VOID;\n  });\n}\n\nexport function close(channelState) {\n  channelState.closed = true;\n  channelState.db.close();\n}\nexport function postMessage(channelState, messageJson) {\n  channelState.writeBlockPromise = channelState.writeBlockPromise.then(function () {\n    return writeMessage(channelState.db, channelState.uuid, messageJson);\n  }).then(function () {\n    if (randomInt(0, 10) === 0) {\n      /* await (do not await) */\n      cleanOldMessages(channelState.db, channelState.options.idb.ttl);\n    }\n  });\n  return channelState.writeBlockPromise;\n}\nexport function onMessage(channelState, fn, time) {\n  channelState.messagesCallbackTime = time;\n  channelState.messagesCallback = fn;\n  readNewMessages(channelState);\n}\nexport function canBeUsed() {\n  if (isNode) return false;\n  var idb = getIdb();\n  if (!idb) return false;\n  return true;\n}\nexport function averageResponseTime(options) {\n  return options.idb.fallbackInterval * 2;\n}\nexport default {\n  create: create,\n  close: close,\n  onMessage: onMessage,\n  postMessage: postMessage,\n  canBeUsed: canBeUsed,\n  type: type,\n  averageResponseTime: averageResponseTime,\n  microSeconds: microSeconds\n};","map":{"version":3,"sources":["/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/broadcast-channel/dist/esbrowser/methods/indexed-db.js"],"names":["sleep","randomInt","randomToken","microSeconds","micro","isNode","PROMISE_RESOLVED_VOID","ObliviousSet","fillOptionsWithDefaults","DB_PREFIX","OBJECT_STORE_ID","TRANSACTION_SETTINGS","durability","type","getIdb","indexedDB","window","mozIndexedDB","webkitIndexedDB","msIndexedDB","commitIndexedDBTransaction","tx","commit","createDatabase","channelName","IndexedDB","dbName","openRequest","open","onupgradeneeded","ev","db","target","result","createObjectStore","keyPath","autoIncrement","dbPromise","Promise","res","rej","onerror","onsuccess","writeMessage","readerUuid","messageJson","time","Date","getTime","writeObject","uuid","data","transaction","oncomplete","objectStore","add","getAllMessages","ret","openCursor","cursor","push","value","getMessagesHigherThan","lastCursorId","keyRangeValue","IDBKeyRange","bound","Infinity","getAll","getAllRequest","err","e","openCursorRequest","id","removeMessagesById","ids","all","map","deleteRequest","getOldMessages","ttl","olderThen","msgObk","cleanOldMessages","then","tooOld","msg","create","options","state","closed","eMIs","idb","writeBlockPromise","messagesCallback","readQueuePromises","onclose","_readLoop","readNewMessages","fallbackInterval","_filterMessage","msgObj","has","messagesCallbackTime","newerMessages","useMessages","filter","sort","msgObjA","msgObjB","forEach","close","channelState","postMessage","onMessage","fn","canBeUsed","averageResponseTime"],"mappings":"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","sourcesContent":["/**\n * this method uses indexeddb to store the messages\n * There is currently no observerAPI for idb\n * @link https://github.com/w3c/IndexedDB/issues/51\n * \n * When working on this, ensure to use these performance optimizations:\n * @link https://rxdb.info/slow-indexeddb.html\n */\nimport { sleep, randomInt, randomToken, microSeconds as micro, isNode, PROMISE_RESOLVED_VOID } from '../util.js';\nexport var microSeconds = micro;\nimport { ObliviousSet } from 'oblivious-set';\nimport { fillOptionsWithDefaults } from '../options';\nvar DB_PREFIX = 'pubkey.broadcast-channel-0-';\nvar OBJECT_STORE_ID = 'messages';\n/**\n * Use relaxed durability for faster performance on all transactions.\n * @link https://nolanlawson.com/2021/08/22/speeding-up-indexeddb-reads-and-writes/\n */\n\nexport var TRANSACTION_SETTINGS = {\n  durability: 'relaxed'\n};\nexport var type = 'idb';\nexport function getIdb() {\n  if (typeof indexedDB !== 'undefined') return indexedDB;\n\n  if (typeof window !== 'undefined') {\n    if (typeof window.mozIndexedDB !== 'undefined') return window.mozIndexedDB;\n    if (typeof window.webkitIndexedDB !== 'undefined') return window.webkitIndexedDB;\n    if (typeof window.msIndexedDB !== 'undefined') return window.msIndexedDB;\n  }\n\n  return false;\n}\n/**\n * If possible, we should explicitly commit IndexedDB transactions\n * for better performance.\n * @link https://nolanlawson.com/2021/08/22/speeding-up-indexeddb-reads-and-writes/\n */\n\nexport function commitIndexedDBTransaction(tx) {\n  if (tx.commit) {\n    tx.commit();\n  }\n}\nexport function createDatabase(channelName) {\n  var IndexedDB = getIdb(); // create table\n\n  var dbName = DB_PREFIX + channelName;\n  /**\n   * All IndexedDB databases are opened without version\n   * because it is a bit faster, especially on firefox\n   * @link http://nparashuram.com/IndexedDB/perf/#Open%20Database%20with%20version\n   */\n\n  var openRequest = IndexedDB.open(dbName);\n\n  openRequest.onupgradeneeded = function (ev) {\n    var db = ev.target.result;\n    db.createObjectStore(OBJECT_STORE_ID, {\n      keyPath: 'id',\n      autoIncrement: true\n    });\n  };\n\n  var dbPromise = new Promise(function (res, rej) {\n    openRequest.onerror = function (ev) {\n      return rej(ev);\n    };\n\n    openRequest.onsuccess = function () {\n      res(openRequest.result);\n    };\n  });\n  return dbPromise;\n}\n/**\n * writes the new message to the database\n * so other readers can find it\n */\n\nexport function writeMessage(db, readerUuid, messageJson) {\n  var time = new Date().getTime();\n  var writeObject = {\n    uuid: readerUuid,\n    time: time,\n    data: messageJson\n  };\n  var tx = db.transaction([OBJECT_STORE_ID], 'readwrite', TRANSACTION_SETTINGS);\n  return new Promise(function (res, rej) {\n    tx.oncomplete = function () {\n      return res();\n    };\n\n    tx.onerror = function (ev) {\n      return rej(ev);\n    };\n\n    var objectStore = tx.objectStore(OBJECT_STORE_ID);\n    objectStore.add(writeObject);\n    commitIndexedDBTransaction(tx);\n  });\n}\nexport function getAllMessages(db) {\n  var tx = db.transaction(OBJECT_STORE_ID, 'readonly', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  return new Promise(function (res) {\n    objectStore.openCursor().onsuccess = function (ev) {\n      var cursor = ev.target.result;\n\n      if (cursor) {\n        ret.push(cursor.value); //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n\n        cursor[\"continue\"]();\n      } else {\n        commitIndexedDBTransaction(tx);\n        res(ret);\n      }\n    };\n  });\n}\nexport function getMessagesHigherThan(db, lastCursorId) {\n  var tx = db.transaction(OBJECT_STORE_ID, 'readonly', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  var keyRangeValue = IDBKeyRange.bound(lastCursorId + 1, Infinity);\n  /**\n   * Optimization shortcut,\n   * if getAll() can be used, do not use a cursor.\n   * @link https://rxdb.info/slow-indexeddb.html\n   */\n\n  if (objectStore.getAll) {\n    var getAllRequest = objectStore.getAll(keyRangeValue);\n    return new Promise(function (res, rej) {\n      getAllRequest.onerror = function (err) {\n        return rej(err);\n      };\n\n      getAllRequest.onsuccess = function (e) {\n        res(e.target.result);\n      };\n    });\n  }\n\n  function openCursor() {\n    // Occasionally Safari will fail on IDBKeyRange.bound, this\n    // catches that error, having it open the cursor to the first\n    // item. When it gets data it will advance to the desired key.\n    try {\n      keyRangeValue = IDBKeyRange.bound(lastCursorId + 1, Infinity);\n      return objectStore.openCursor(keyRangeValue);\n    } catch (e) {\n      return objectStore.openCursor();\n    }\n  }\n\n  return new Promise(function (res, rej) {\n    var openCursorRequest = openCursor();\n\n    openCursorRequest.onerror = function (err) {\n      return rej(err);\n    };\n\n    openCursorRequest.onsuccess = function (ev) {\n      var cursor = ev.target.result;\n\n      if (cursor) {\n        if (cursor.value.id < lastCursorId + 1) {\n          cursor[\"continue\"](lastCursorId + 1);\n        } else {\n          ret.push(cursor.value);\n          cursor[\"continue\"]();\n        }\n      } else {\n        commitIndexedDBTransaction(tx);\n        res(ret);\n      }\n    };\n  });\n}\nexport function removeMessagesById(db, ids) {\n  var tx = db.transaction([OBJECT_STORE_ID], 'readwrite', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  return Promise.all(ids.map(function (id) {\n    var deleteRequest = objectStore[\"delete\"](id);\n    return new Promise(function (res) {\n      deleteRequest.onsuccess = function () {\n        return res();\n      };\n    });\n  }));\n}\nexport function getOldMessages(db, ttl) {\n  var olderThen = new Date().getTime() - ttl;\n  var tx = db.transaction(OBJECT_STORE_ID, 'readonly', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  return new Promise(function (res) {\n    objectStore.openCursor().onsuccess = function (ev) {\n      var cursor = ev.target.result;\n\n      if (cursor) {\n        var msgObk = cursor.value;\n\n        if (msgObk.time < olderThen) {\n          ret.push(msgObk); //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n\n          cursor[\"continue\"]();\n        } else {\n          // no more old messages,\n          commitIndexedDBTransaction(tx);\n          res(ret);\n          return;\n        }\n      } else {\n        res(ret);\n      }\n    };\n  });\n}\nexport function cleanOldMessages(db, ttl) {\n  return getOldMessages(db, ttl).then(function (tooOld) {\n    return removeMessagesById(db, tooOld.map(function (msg) {\n      return msg.id;\n    }));\n  });\n}\nexport function create(channelName, options) {\n  options = fillOptionsWithDefaults(options);\n  return createDatabase(channelName).then(function (db) {\n    var state = {\n      closed: false,\n      lastCursorId: 0,\n      channelName: channelName,\n      options: options,\n      uuid: randomToken(),\n\n      /**\n       * emittedMessagesIds\n       * contains all messages that have been emitted before\n       * @type {ObliviousSet}\n       */\n      eMIs: new ObliviousSet(options.idb.ttl * 2),\n      // ensures we do not read messages in parrallel\n      writeBlockPromise: PROMISE_RESOLVED_VOID,\n      messagesCallback: null,\n      readQueuePromises: [],\n      db: db\n    };\n    /**\n     * Handle abrupt closes that do not originate from db.close().\n     * This could happen, for example, if the underlying storage is\n     * removed or if the user clears the database in the browser's\n     * history preferences.\n     */\n\n    db.onclose = function () {\n      state.closed = true;\n      if (options.idb.onclose) options.idb.onclose();\n    };\n    /**\n     * if service-workers are used,\n     * we have no 'storage'-event if they post a message,\n     * therefore we also have to set an interval\n     */\n\n\n    _readLoop(state);\n\n    return state;\n  });\n}\n\nfunction _readLoop(state) {\n  if (state.closed) return;\n  readNewMessages(state).then(function () {\n    return sleep(state.options.idb.fallbackInterval);\n  }).then(function () {\n    return _readLoop(state);\n  });\n}\n\nfunction _filterMessage(msgObj, state) {\n  if (msgObj.uuid === state.uuid) return false; // send by own\n\n  if (state.eMIs.has(msgObj.id)) return false; // already emitted\n\n  if (msgObj.data.time < state.messagesCallbackTime) return false; // older then onMessageCallback\n\n  return true;\n}\n/**\n * reads all new messages from the database and emits them\n */\n\n\nfunction readNewMessages(state) {\n  // channel already closed\n  if (state.closed) return PROMISE_RESOLVED_VOID; // if no one is listening, we do not need to scan for new messages\n\n  if (!state.messagesCallback) return PROMISE_RESOLVED_VOID;\n  return getMessagesHigherThan(state.db, state.lastCursorId).then(function (newerMessages) {\n    var useMessages = newerMessages\n    /**\n     * there is a bug in iOS where the msgObj can be undefined some times\n     * so we filter them out\n     * @link https://github.com/pubkey/broadcast-channel/issues/19\n     */\n    .filter(function (msgObj) {\n      return !!msgObj;\n    }).map(function (msgObj) {\n      if (msgObj.id > state.lastCursorId) {\n        state.lastCursorId = msgObj.id;\n      }\n\n      return msgObj;\n    }).filter(function (msgObj) {\n      return _filterMessage(msgObj, state);\n    }).sort(function (msgObjA, msgObjB) {\n      return msgObjA.time - msgObjB.time;\n    }); // sort by time\n\n    useMessages.forEach(function (msgObj) {\n      if (state.messagesCallback) {\n        state.eMIs.add(msgObj.id);\n        state.messagesCallback(msgObj.data);\n      }\n    });\n    return PROMISE_RESOLVED_VOID;\n  });\n}\n\nexport function close(channelState) {\n  channelState.closed = true;\n  channelState.db.close();\n}\nexport function postMessage(channelState, messageJson) {\n  channelState.writeBlockPromise = channelState.writeBlockPromise.then(function () {\n    return writeMessage(channelState.db, channelState.uuid, messageJson);\n  }).then(function () {\n    if (randomInt(0, 10) === 0) {\n      /* await (do not await) */\n      cleanOldMessages(channelState.db, channelState.options.idb.ttl);\n    }\n  });\n  return channelState.writeBlockPromise;\n}\nexport function onMessage(channelState, fn, time) {\n  channelState.messagesCallbackTime = time;\n  channelState.messagesCallback = fn;\n  readNewMessages(channelState);\n}\nexport function canBeUsed() {\n  if (isNode) return false;\n  var idb = getIdb();\n  if (!idb) return false;\n  return true;\n}\nexport function averageResponseTime(options) {\n  return options.idb.fallbackInterval * 2;\n}\nexport default {\n  create: create,\n  close: close,\n  onMessage: onMessage,\n  postMessage: postMessage,\n  canBeUsed: canBeUsed,\n  type: type,\n  averageResponseTime: averageResponseTime,\n  microSeconds: microSeconds\n};"]},"metadata":{},"sourceType":"module"}