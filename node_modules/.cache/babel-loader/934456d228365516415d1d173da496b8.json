{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.syncNative = void 0;\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst constants_1 = require(\"../constants\");\n\nconst index_1 = require(\"../instructions/index\");\n/**\n * Sync the balance of a native SPL token account to the underlying system account's lamports\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Native account to sync\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\n\n\nfunction syncNative(connection, payer, account, confirmOptions) {\n  let programId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : constants_1.TOKEN_PROGRAM_ID;\n  return __awaiter(this, void 0, void 0, function* () {\n    const transaction = new web3_js_1.Transaction().add((0, index_1.createSyncNativeInstruction)(account, programId));\n    return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer], confirmOptions);\n  });\n}\n\nexports.syncNative = syncNative;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AASA;;AACA;AAEA;;;;;;;;;;;;;AAWA,SAAsBA,UAAtB,CACIC,UADJ,EAEIC,KAFJ,EAGIC,OAHJ,EAIIC,cAJJ,EAKgC;AAAA,MAA5BC,SAA4B,uEAAhBC,4BAAgB;;AAE5B,UAAMC,WAAW,GAAG,IAAIC,qBAAJ,GAAkBC,GAAlB,CAAsB,yCAA4BN,OAA5B,EAAqCE,SAArC,CAAtB,CAApB;AAEA,WAAO,MAAM,yCAA0BJ,UAA1B,EAAsCM,WAAtC,EAAmD,CAACL,KAAD,CAAnD,EAA4DE,cAA5D,CAAb;AACH;AAAA;;AAVDM","names":["syncNative","connection","payer","account","confirmOptions","programId","constants_1","transaction","web3_js_1","add","exports"],"sources":["/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@solana/spl-token/src/actions/syncNative.ts"],"sourcesContent":["import {\n    ConfirmOptions,\n    Connection,\n    PublicKey,\n    sendAndConfirmTransaction,\n    Signer,\n    Transaction,\n    TransactionSignature,\n} from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport { createSyncNativeInstruction } from '../instructions/index';\n\n/**\n * Sync the balance of a native SPL token account to the underlying system account's lamports\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Native account to sync\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function syncNative(\n    connection: Connection,\n    payer: Signer,\n    account: PublicKey,\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const transaction = new Transaction().add(createSyncNativeInstruction(account, programId));\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n}\n"]},"metadata":{},"sourceType":"script"}