{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { PublicKey, SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from './../constants.mjs';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from './../errors.mjs';\nimport { TokenInstruction } from './types.mjs';\n/** TODO: docs */\n\nexport const initializeMintInstructionData = struct([u8('instruction'), u8('decimals'), publicKey('mintAuthority'), u8('freezeAuthorityOption'), publicKey('freezeAuthority')]);\n/**\n * Construct an InitializeMint instruction\n *\n * @param mint            Token mint account\n * @param decimals        Number of decimals in token account amounts\n * @param mintAuthority   Minting authority\n * @param freezeAuthority Optional authority that can freeze token accounts\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nexport function createInitializeMintInstruction(mint, decimals, mintAuthority, freezeAuthority) {\n  let programId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : TOKEN_PROGRAM_ID;\n  const keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }];\n  const data = Buffer.alloc(initializeMintInstructionData.span);\n  initializeMintInstructionData.encode({\n    instruction: TokenInstruction.InitializeMint,\n    decimals,\n    mintAuthority,\n    freezeAuthorityOption: freezeAuthority ? 1 : 0,\n    freezeAuthority: freezeAuthority || new PublicKey(0)\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\n * Decode an InitializeMint instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nexport function decodeInitializeMintInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== initializeMintInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      mint,\n      rent\n    },\n    data\n  } = decodeInitializeMintInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.InitializeMint) throw new TokenInvalidInstructionTypeError();\n  if (!mint || !rent) throw new TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId,\n    keys: {\n      mint,\n      rent\n    },\n    data\n  };\n}\n/**\n * Decode an InitializeMint instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nexport function decodeInitializeMintInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [mint, rent],\n    data\n  } = _ref;\n  const {\n    instruction,\n    decimals,\n    mintAuthority,\n    freezeAuthorityOption,\n    freezeAuthority\n  } = initializeMintInstructionData.decode(data);\n  return {\n    programId,\n    keys: {\n      mint,\n      rent\n    },\n    data: {\n      instruction,\n      decimals,\n      mintAuthority,\n      freezeAuthority: freezeAuthorityOption ? freezeAuthority : null\n    }\n  };\n}","map":{"version":3,"mappings":"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","names":["struct","u8","publicKey","PublicKey","SYSVAR_RENT_PUBKEY","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","TokenInstruction","initializeMintInstructionData","createInitializeMintInstruction","mint","decimals","mintAuthority","freezeAuthority","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","InitializeMint","freezeAuthorityOption","decodeInitializeMintInstruction","equals","length","rent","decodeInitializeMintInstructionUnchecked","decode"],"sources":["/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@solana/spl-token/src/instructions/initializeMint.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { AccountMeta, PublicKey, SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors';\nimport { TokenInstruction } from './types';\n\n/** TODO: docs */\nexport interface InitializeMintInstructionData {\n    instruction: TokenInstruction.InitializeMint;\n    decimals: number;\n    mintAuthority: PublicKey;\n    freezeAuthorityOption: 1 | 0;\n    freezeAuthority: PublicKey;\n}\n\n/** TODO: docs */\nexport const initializeMintInstructionData = struct<InitializeMintInstructionData>([\n    u8('instruction'),\n    u8('decimals'),\n    publicKey('mintAuthority'),\n    u8('freezeAuthorityOption'),\n    publicKey('freezeAuthority'),\n]);\n\n/**\n * Construct an InitializeMint instruction\n *\n * @param mint            Token mint account\n * @param decimals        Number of decimals in token account amounts\n * @param mintAuthority   Minting authority\n * @param freezeAuthority Optional authority that can freeze token accounts\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeMintInstruction(\n    mint: PublicKey,\n    decimals: number,\n    mintAuthority: PublicKey,\n    freezeAuthority: PublicKey | null,\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = [\n        { pubkey: mint, isSigner: false, isWritable: true },\n        { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n    ];\n\n    const data = Buffer.alloc(initializeMintInstructionData.span);\n    initializeMintInstructionData.encode(\n        {\n            instruction: TokenInstruction.InitializeMint,\n            decimals,\n            mintAuthority,\n            freezeAuthorityOption: freezeAuthority ? 1 : 0,\n            freezeAuthority: freezeAuthority || new PublicKey(0),\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid InitializeMint instruction */\nexport interface DecodedInitializeMintInstruction {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta;\n        rent: AccountMeta;\n    };\n    data: {\n        instruction: TokenInstruction.InitializeMint;\n        decimals: number;\n        mintAuthority: PublicKey;\n        freezeAuthority: PublicKey | null;\n    };\n}\n\n/**\n * Decode an InitializeMint instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeMintInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedInitializeMintInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeMintInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { mint, rent },\n        data,\n    } = decodeInitializeMintInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeMint) throw new TokenInvalidInstructionTypeError();\n    if (!mint || !rent) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            mint,\n            rent,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated InitializeMint instruction */\nexport interface DecodedInitializeMintInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta | undefined;\n        rent: AccountMeta | undefined;\n    };\n    data: {\n        instruction: number;\n        decimals: number;\n        mintAuthority: PublicKey;\n        freezeAuthority: PublicKey | null;\n    };\n}\n\n/**\n * Decode an InitializeMint instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeMintInstructionUnchecked({\n    programId,\n    keys: [mint, rent],\n    data,\n}: TransactionInstruction): DecodedInitializeMintInstructionUnchecked {\n    const { instruction, decimals, mintAuthority, freezeAuthorityOption, freezeAuthority } =\n        initializeMintInstructionData.decode(data);\n\n    return {\n        programId,\n        keys: {\n            mint,\n            rent,\n        },\n        data: {\n            instruction,\n            decimals,\n            mintAuthority,\n            freezeAuthority: freezeAuthorityOption ? freezeAuthority : null,\n        },\n    };\n}\n"]},"metadata":{},"sourceType":"module"}