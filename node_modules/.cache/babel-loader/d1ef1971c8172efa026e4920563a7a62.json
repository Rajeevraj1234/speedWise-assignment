{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from './../constants.mjs';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from './../errors.mjs';\nimport { addSigners } from './internal.mjs';\nimport { TokenInstruction } from './types.mjs';\n/** TODO: docs */\n\nexport const thawAccountInstructionData = struct([u8('instruction')]);\n/**\n * Construct a ThawAccount instruction\n *\n * @param account      Account to thaw\n * @param mint         Mint account\n * @param authority    Mint freeze authority\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nexport function createThawAccountInstruction(account, mint, authority) {\n  let multiSigners = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  let programId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : TOKEN_PROGRAM_ID;\n  const keys = addSigners([{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: mint,\n    isSigner: false,\n    isWritable: false\n  }], authority, multiSigners);\n  const data = Buffer.alloc(thawAccountInstructionData.span);\n  thawAccountInstructionData.encode({\n    instruction: TokenInstruction.ThawAccount\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\n * Decode a ThawAccount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nexport function decodeThawAccountInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== thawAccountInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account,\n      mint,\n      authority,\n      multiSigners\n    },\n    data\n  } = decodeThawAccountInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.ThawAccount) throw new TokenInvalidInstructionTypeError();\n  if (!account || !mint || !authority) throw new TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId,\n    keys: {\n      account,\n      mint,\n      authority,\n      multiSigners\n    },\n    data\n  };\n}\n/**\n * Decode a ThawAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nexport function decodeThawAccountInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [account, mint, authority, ...multiSigners],\n    data\n  } = _ref;\n  return {\n    programId,\n    keys: {\n      account,\n      mint,\n      authority,\n      multiSigners\n    },\n    data: thawAccountInstructionData.decode(data)\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,MAAT,EAAiBC,EAAjB,QAA2B,uBAA3B;AACA,SAAyCC,sBAAzC,QAAuE,iBAAvE;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SACIC,gCADJ,EAEIC,gCAFJ,EAGIC,mCAHJ,EAIIC,gCAJJ,QAKO,iBALP;AAMA,SAASC,UAAT,QAA2B,gBAA3B;AACA,SAASC,gBAAT,QAAiC,aAAjC;AAOA;;AACA,OAAO,MAAMC,0BAA0B,GAAGV,MAAM,CAA6B,CAACC,EAAE,CAAC,aAAD,CAAH,CAA7B,CAAzC;AAEP;;;;;;;;;;;;AAWA,OAAM,SAAUU,4BAAV,CACFC,OADE,EAEFC,IAFE,EAGFC,SAHE,EAK0B;AAAA,MAD5BC,YAC4B,uEADH,EACG;AAAA,MAA5BC,SAA4B,uEAAhBb,gBAAgB;AAE5B,QAAMc,IAAI,GAAGT,UAAU,CACnB,CACI;AAAEU,UAAM,EAAEN,OAAV;AAAmBO,YAAQ,EAAE,KAA7B;AAAoCC,cAAU,EAAE;AAAhD,GADJ,EAEI;AAAEF,UAAM,EAAEL,IAAV;AAAgBM,YAAQ,EAAE,KAA1B;AAAiCC,cAAU,EAAE;AAA7C,GAFJ,CADmB,EAKnBN,SALmB,EAMnBC,YANmB,CAAvB;AASA,QAAMM,IAAI,GAAGC,MAAM,CAACC,KAAP,CAAab,0BAA0B,CAACc,IAAxC,CAAb;AACAd,4BAA0B,CAACe,MAA3B,CAAkC;AAAEC,eAAW,EAAEjB,gBAAgB,CAACkB;AAAhC,GAAlC,EAAiFN,IAAjF;AAEA,SAAO,IAAInB,sBAAJ,CAA2B;AAAEe,QAAF;AAAQD,aAAR;AAAmBK;AAAnB,GAA3B,CAAP;AACH;AAgBD;;;;;;;;;AAQA,OAAM,SAAUO,4BAAV,CACFF,WADE,EAE0B;AAAA,MAA5BV,SAA4B,uEAAhBb,gBAAgB;AAE5B,MAAI,CAACuB,WAAW,CAACV,SAAZ,CAAsBa,MAAtB,CAA6Bb,SAA7B,CAAL,EAA8C,MAAM,IAAIV,mCAAJ,EAAN;AAC9C,MAAIoB,WAAW,CAACL,IAAZ,CAAiBS,MAAjB,KAA4BpB,0BAA0B,CAACc,IAA3D,EAAiE,MAAM,IAAIpB,gCAAJ,EAAN;AAEjE,QAAM;AACFa,QAAI,EAAE;AAAEL,aAAF;AAAWC,UAAX;AAAiBC,eAAjB;AAA4BC;AAA5B,KADJ;AAEFM;AAFE,MAGFU,qCAAqC,CAACL,WAAD,CAHzC;AAIA,MAAIL,IAAI,CAACK,WAAL,KAAqBjB,gBAAgB,CAACkB,WAA1C,EAAuD,MAAM,IAAIpB,gCAAJ,EAAN;AACvD,MAAI,CAACK,OAAD,IAAY,CAACC,IAAb,IAAqB,CAACC,SAA1B,EAAqC,MAAM,IAAIT,gCAAJ,EAAN,CAVT,CAY5B;;AAEA,SAAO;AACHW,aADG;AAEHC,QAAI,EAAE;AACFL,aADE;AAEFC,UAFE;AAGFC,eAHE;AAIFC;AAJE,KAFH;AAQHM;AARG,GAAP;AAUH;AAgBD;;;;;;;;AAOA,OAAM,SAAUU,qCAAV,OAImB;AAAA,MAJ6B;AAClDf,aADkD;AAElDC,QAAI,EAAE,CAACL,OAAD,EAAUC,IAAV,EAAgBC,SAAhB,EAA2B,GAAGC,YAA9B,CAF4C;AAGlDM;AAHkD,GAI7B;AACrB,SAAO;AACHL,aADG;AAEHC,QAAI,EAAE;AACFL,aADE;AAEFC,UAFE;AAGFC,eAHE;AAIFC;AAJE,KAFH;AAQHM,QAAI,EAAEX,0BAA0B,CAACsB,MAA3B,CAAkCX,IAAlC;AARH,GAAP;AAUH","names":["struct","u8","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","addSigners","TokenInstruction","thawAccountInstructionData","createThawAccountInstruction","account","mint","authority","multiSigners","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","ThawAccount","decodeThawAccountInstruction","equals","length","decodeThawAccountInstructionUnchecked","decode"],"sources":["/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@solana/spl-token/src/instructions/thawAccount.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { AccountMeta, PublicKey, Signer, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors';\nimport { addSigners } from './internal';\nimport { TokenInstruction } from './types';\n\n/** TODO: docs */\nexport interface ThawAccountInstructionData {\n    instruction: TokenInstruction.ThawAccount;\n}\n\n/** TODO: docs */\nexport const thawAccountInstructionData = struct<ThawAccountInstructionData>([u8('instruction')]);\n\n/**\n * Construct a ThawAccount instruction\n *\n * @param account      Account to thaw\n * @param mint         Mint account\n * @param authority    Mint freeze authority\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createThawAccountInstruction(\n    account: PublicKey,\n    mint: PublicKey,\n    authority: PublicKey,\n    multiSigners: Signer[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners(\n        [\n            { pubkey: account, isSigner: false, isWritable: true },\n            { pubkey: mint, isSigner: false, isWritable: false },\n        ],\n        authority,\n        multiSigners\n    );\n\n    const data = Buffer.alloc(thawAccountInstructionData.span);\n    thawAccountInstructionData.encode({ instruction: TokenInstruction.ThawAccount }, data);\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid ThawAccount instruction */\nexport interface DecodedThawAccountInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        mint: AccountMeta;\n        authority: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.ThawAccount;\n    };\n}\n\n/**\n * Decode a ThawAccount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeThawAccountInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedThawAccountInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== thawAccountInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, mint, authority, multiSigners },\n        data,\n    } = decodeThawAccountInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.ThawAccount) throw new TokenInvalidInstructionTypeError();\n    if (!account || !mint || !authority) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            authority,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated ThawAccount instruction */\nexport interface DecodedThawAccountInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        mint: AccountMeta | undefined;\n        authority: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n    };\n}\n\n/**\n * Decode a ThawAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeThawAccountInstructionUnchecked({\n    programId,\n    keys: [account, mint, authority, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedThawAccountInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            authority,\n            multiSigners,\n        },\n        data: thawAccountInstructionData.decode(data),\n    };\n}\n"]},"metadata":{},"sourceType":"module"}