{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TokenInvalidInstructionTypeError = exports.TokenInvalidInstructionDataError = exports.TokenInvalidInstructionKeysError = exports.TokenInvalidInstructionProgramError = exports.TokenOwnerOffCurveError = exports.TokenInvalidOwnerError = exports.TokenInvalidMintError = exports.TokenInvalidAccountSizeError = exports.TokenInvalidAccountOwnerError = exports.TokenAccountNotFoundError = exports.TokenError = void 0;\n/** Base class for errors */\n\nclass TokenError extends Error {\n  constructor(message) {\n    super(message);\n  }\n\n}\n\nexports.TokenError = TokenError;\n/** Thrown if an account is not found at the expected address */\n\nclass TokenAccountNotFoundError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenAccountNotFoundError';\n  }\n\n}\n\nexports.TokenAccountNotFoundError = TokenAccountNotFoundError;\n/** Thrown if a program state account is not owned by the expected token program */\n\nclass TokenInvalidAccountOwnerError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenInvalidAccountOwnerError';\n  }\n\n}\n\nexports.TokenInvalidAccountOwnerError = TokenInvalidAccountOwnerError;\n/** Thrown if the byte length of an program state account doesn't match the expected size */\n\nclass TokenInvalidAccountSizeError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenInvalidAccountSizeError';\n  }\n\n}\n\nexports.TokenInvalidAccountSizeError = TokenInvalidAccountSizeError;\n/** Thrown if the mint of a token account doesn't match the expected mint */\n\nclass TokenInvalidMintError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenInvalidMintError';\n  }\n\n}\n\nexports.TokenInvalidMintError = TokenInvalidMintError;\n/** Thrown if the owner of a token account doesn't match the expected owner */\n\nclass TokenInvalidOwnerError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenInvalidOwnerError';\n  }\n\n}\n\nexports.TokenInvalidOwnerError = TokenInvalidOwnerError;\n/** Thrown if the owner of a token account is a PDA (Program Derived Address) */\n\nclass TokenOwnerOffCurveError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenOwnerOffCurveError';\n  }\n\n}\n\nexports.TokenOwnerOffCurveError = TokenOwnerOffCurveError;\n/** Thrown if an instruction's program is invalid */\n\nclass TokenInvalidInstructionProgramError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenInvalidInstructionProgramError';\n  }\n\n}\n\nexports.TokenInvalidInstructionProgramError = TokenInvalidInstructionProgramError;\n/** Thrown if an instruction's keys are invalid */\n\nclass TokenInvalidInstructionKeysError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenInvalidInstructionKeysError';\n  }\n\n}\n\nexports.TokenInvalidInstructionKeysError = TokenInvalidInstructionKeysError;\n/** Thrown if an instruction's data is invalid */\n\nclass TokenInvalidInstructionDataError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenInvalidInstructionDataError';\n  }\n\n}\n\nexports.TokenInvalidInstructionDataError = TokenInvalidInstructionDataError;\n/** Thrown if an instruction's type is invalid */\n\nclass TokenInvalidInstructionTypeError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenInvalidInstructionTypeError';\n  }\n\n}\n\nexports.TokenInvalidInstructionTypeError = TokenInvalidInstructionTypeError;","map":{"version":3,"mappings":";;;;;;AAAA;;AACA,MAAsBA,UAAtB,SAAyCC,KAAzC,CAA8C;AAC1CC,cAAYC,OAAZ,EAA4B;AACxB,UAAMA,OAAN;AACH;;AAHyC;;AAA9CC;AAMA;;AACA,MAAaC,yBAAb,SAA+CL,UAA/C,CAAyD;AAAzDE;;AACI,gBAAO,2BAAP;AACH;;AAFwD;;AAAzDE;AAIA;;AACA,MAAaE,6BAAb,SAAmDN,UAAnD,CAA6D;AAA7DE;;AACI,gBAAO,+BAAP;AACH;;AAF4D;;AAA7DE;AAIA;;AACA,MAAaG,4BAAb,SAAkDP,UAAlD,CAA4D;AAA5DE;;AACI,gBAAO,8BAAP;AACH;;AAF2D;;AAA5DE;AAIA;;AACA,MAAaI,qBAAb,SAA2CR,UAA3C,CAAqD;AAArDE;;AACI,gBAAO,uBAAP;AACH;;AAFoD;;AAArDE;AAIA;;AACA,MAAaK,sBAAb,SAA4CT,UAA5C,CAAsD;AAAtDE;;AACI,gBAAO,wBAAP;AACH;;AAFqD;;AAAtDE;AAIA;;AACA,MAAaM,uBAAb,SAA6CV,UAA7C,CAAuD;AAAvDE;;AACI,gBAAO,yBAAP;AACH;;AAFsD;;AAAvDE;AAIA;;AACA,MAAaO,mCAAb,SAAyDX,UAAzD,CAAmE;AAAnEE;;AACI,gBAAO,qCAAP;AACH;;AAFkE;;AAAnEE;AAIA;;AACA,MAAaQ,gCAAb,SAAsDZ,UAAtD,CAAgE;AAAhEE;;AACI,gBAAO,kCAAP;AACH;;AAF+D;;AAAhEE;AAIA;;AACA,MAAaS,gCAAb,SAAsDb,UAAtD,CAAgE;AAAhEE;;AACI,gBAAO,kCAAP;AACH;;AAF+D;;AAAhEE;AAIA;;AACA,MAAaU,gCAAb,SAAsDd,UAAtD,CAAgE;AAAhEE;;AACI,gBAAO,kCAAP;AACH;;AAF+D;;AAAhEE","names":["TokenError","Error","constructor","message","exports","TokenAccountNotFoundError","TokenInvalidAccountOwnerError","TokenInvalidAccountSizeError","TokenInvalidMintError","TokenInvalidOwnerError","TokenOwnerOffCurveError","TokenInvalidInstructionProgramError","TokenInvalidInstructionKeysError","TokenInvalidInstructionDataError","TokenInvalidInstructionTypeError"],"sources":["/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@solana/spl-token/src/errors.ts"],"sourcesContent":["/** Base class for errors */\nexport abstract class TokenError extends Error {\n    constructor(message?: string) {\n        super(message);\n    }\n}\n\n/** Thrown if an account is not found at the expected address */\nexport class TokenAccountNotFoundError extends TokenError {\n    name = 'TokenAccountNotFoundError';\n}\n\n/** Thrown if a program state account is not owned by the expected token program */\nexport class TokenInvalidAccountOwnerError extends TokenError {\n    name = 'TokenInvalidAccountOwnerError';\n}\n\n/** Thrown if the byte length of an program state account doesn't match the expected size */\nexport class TokenInvalidAccountSizeError extends TokenError {\n    name = 'TokenInvalidAccountSizeError';\n}\n\n/** Thrown if the mint of a token account doesn't match the expected mint */\nexport class TokenInvalidMintError extends TokenError {\n    name = 'TokenInvalidMintError';\n}\n\n/** Thrown if the owner of a token account doesn't match the expected owner */\nexport class TokenInvalidOwnerError extends TokenError {\n    name = 'TokenInvalidOwnerError';\n}\n\n/** Thrown if the owner of a token account is a PDA (Program Derived Address) */\nexport class TokenOwnerOffCurveError extends TokenError {\n    name = 'TokenOwnerOffCurveError';\n}\n\n/** Thrown if an instruction's program is invalid */\nexport class TokenInvalidInstructionProgramError extends TokenError {\n    name = 'TokenInvalidInstructionProgramError';\n}\n\n/** Thrown if an instruction's keys are invalid */\nexport class TokenInvalidInstructionKeysError extends TokenError {\n    name = 'TokenInvalidInstructionKeysError';\n}\n\n/** Thrown if an instruction's data is invalid */\nexport class TokenInvalidInstructionDataError extends TokenError {\n    name = 'TokenInvalidInstructionDataError';\n}\n\n/** Thrown if an instruction's type is invalid */\nexport class TokenInvalidInstructionTypeError extends TokenError {\n    name = 'TokenInvalidInstructionTypeError';\n}\n"]},"metadata":{},"sourceType":"script"}