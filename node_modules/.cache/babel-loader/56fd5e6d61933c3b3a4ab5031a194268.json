{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeSetAuthorityInstructionUnchecked = exports.decodeSetAuthorityInstruction = exports.createSetAuthorityInstruction = exports.setAuthorityInstructionData = exports.AuthorityType = void 0;\n\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\n\nconst buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst constants_1 = require(\"../constants\");\n\nconst errors_1 = require(\"../errors\");\n\nconst internal_1 = require(\"./internal\");\n\nconst types_1 = require(\"./types\");\n/** Authority types defined by the program */\n\n\nvar AuthorityType;\n\n(function (AuthorityType) {\n  AuthorityType[AuthorityType[\"MintTokens\"] = 0] = \"MintTokens\";\n  AuthorityType[AuthorityType[\"FreezeAccount\"] = 1] = \"FreezeAccount\";\n  AuthorityType[AuthorityType[\"AccountOwner\"] = 2] = \"AccountOwner\";\n  AuthorityType[AuthorityType[\"CloseAccount\"] = 3] = \"CloseAccount\";\n})(AuthorityType = exports.AuthorityType || (exports.AuthorityType = {}));\n/** TODO: docs */\n\n\nexports.setAuthorityInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_1.u8)('authorityType'), (0, buffer_layout_1.u8)('newAuthorityOption'), (0, buffer_layout_utils_1.publicKey)('newAuthority')]);\n/**\n * Construct a SetAuthority instruction\n *\n * @param account          Address of the token account\n * @param currentAuthority Current authority of the specified type\n * @param authorityType    Type of authority to set\n * @param newAuthority     New authority of the account\n * @param multiSigners     Signing accounts if `currentAuthority` is a multisig\n * @param programId        SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nfunction createSetAuthorityInstruction(account, currentAuthority, authorityType, newAuthority) {\n  let multiSigners = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  let programId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : constants_1.TOKEN_PROGRAM_ID;\n  const keys = (0, internal_1.addSigners)([{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }], currentAuthority, multiSigners);\n  const data = Buffer.alloc(exports.setAuthorityInstructionData.span);\n  exports.setAuthorityInstructionData.encode({\n    instruction: types_1.TokenInstruction.SetAuthority,\n    authorityType,\n    newAuthorityOption: newAuthority ? 1 : 0,\n    newAuthority: newAuthority || new web3_js_1.PublicKey(0)\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n\nexports.createSetAuthorityInstruction = createSetAuthorityInstruction;\n/**\n * Decode a SetAuthority instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nfunction decodeSetAuthorityInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constants_1.TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new errors_1.TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== exports.setAuthorityInstructionData.span) throw new errors_1.TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account,\n      currentAuthority,\n      multiSigners\n    },\n    data\n  } = decodeSetAuthorityInstructionUnchecked(instruction);\n  if (data.instruction !== types_1.TokenInstruction.SetAuthority) throw new errors_1.TokenInvalidInstructionTypeError();\n  if (!account || !currentAuthority) throw new errors_1.TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId,\n    keys: {\n      account,\n      currentAuthority,\n      multiSigners\n    },\n    data\n  };\n}\n\nexports.decodeSetAuthorityInstruction = decodeSetAuthorityInstruction;\n/**\n * Decode a SetAuthority instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nfunction decodeSetAuthorityInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [account, currentAuthority, ...multiSigners],\n    data\n  } = _ref;\n  const {\n    instruction,\n    authorityType,\n    newAuthorityOption,\n    newAuthority\n  } = exports.setAuthorityInstructionData.decode(data);\n  return {\n    programId,\n    keys: {\n      account,\n      currentAuthority,\n      multiSigners\n    },\n    data: {\n      instruction,\n      authorityType,\n      newAuthority: newAuthorityOption ? newAuthority : null\n    }\n  };\n}\n\nexports.decodeSetAuthorityInstructionUnchecked = decodeSetAuthorityInstructionUnchecked;","map":{"version":3,"mappings":"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","names":["AuthorityType","exports","createSetAuthorityInstruction","account","currentAuthority","authorityType","newAuthority","multiSigners","programId","constants_1","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","types_1","SetAuthority","newAuthorityOption","web3_js_1","decodeSetAuthorityInstruction","equals","errors_1","length","decodeSetAuthorityInstructionUnchecked","decode"],"sources":["/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@solana/spl-token/src/instructions/setAuthority.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { AccountMeta, PublicKey, Signer, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors';\nimport { addSigners } from './internal';\nimport { TokenInstruction } from './types';\n\n/** Authority types defined by the program */\nexport enum AuthorityType {\n    MintTokens = 0,\n    FreezeAccount = 1,\n    AccountOwner = 2,\n    CloseAccount = 3,\n}\n\n/** TODO: docs */\nexport interface SetAuthorityInstructionData {\n    instruction: TokenInstruction.SetAuthority;\n    authorityType: AuthorityType;\n    newAuthorityOption: 1 | 0;\n    newAuthority: PublicKey;\n}\n\n/** TODO: docs */\nexport const setAuthorityInstructionData = struct<SetAuthorityInstructionData>([\n    u8('instruction'),\n    u8('authorityType'),\n    u8('newAuthorityOption'),\n    publicKey('newAuthority'),\n]);\n\n/**\n * Construct a SetAuthority instruction\n *\n * @param account          Address of the token account\n * @param currentAuthority Current authority of the specified type\n * @param authorityType    Type of authority to set\n * @param newAuthority     New authority of the account\n * @param multiSigners     Signing accounts if `currentAuthority` is a multisig\n * @param programId        SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createSetAuthorityInstruction(\n    account: PublicKey,\n    currentAuthority: PublicKey,\n    authorityType: AuthorityType,\n    newAuthority: PublicKey | null,\n    multiSigners: Signer[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners([{ pubkey: account, isSigner: false, isWritable: true }], currentAuthority, multiSigners);\n\n    const data = Buffer.alloc(setAuthorityInstructionData.span);\n    setAuthorityInstructionData.encode(\n        {\n            instruction: TokenInstruction.SetAuthority,\n            authorityType,\n            newAuthorityOption: newAuthority ? 1 : 0,\n            newAuthority: newAuthority || new PublicKey(0),\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid SetAuthority instruction */\nexport interface DecodedSetAuthorityInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        currentAuthority: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.SetAuthority;\n        authorityType: AuthorityType;\n        newAuthority: PublicKey | null;\n    };\n}\n\n/**\n * Decode a SetAuthority instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeSetAuthorityInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedSetAuthorityInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== setAuthorityInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, currentAuthority, multiSigners },\n        data,\n    } = decodeSetAuthorityInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.SetAuthority) throw new TokenInvalidInstructionTypeError();\n    if (!account || !currentAuthority) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            currentAuthority,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated SetAuthority instruction */\nexport interface DecodedSetAuthorityInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        currentAuthority: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n        authorityType: AuthorityType;\n        newAuthority: PublicKey | null;\n    };\n}\n\n/**\n * Decode a SetAuthority instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeSetAuthorityInstructionUnchecked({\n    programId,\n    keys: [account, currentAuthority, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedSetAuthorityInstructionUnchecked {\n    const { instruction, authorityType, newAuthorityOption, newAuthority } = setAuthorityInstructionData.decode(data);\n\n    return {\n        programId,\n        keys: {\n            account,\n            currentAuthority,\n            multiSigners,\n        },\n        data: {\n            instruction,\n            authorityType,\n            newAuthority: newAuthorityOption ? newAuthority : null,\n        },\n    };\n}\n"]},"metadata":{},"sourceType":"script"}