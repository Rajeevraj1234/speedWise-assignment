{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from './../constants.mjs';\nimport { createApproveCheckedInstruction } from './../instructions/index.mjs';\nimport { getSigners } from './internal.mjs';\n/**\n * Approve a delegate to transfer up to a maximum number of tokens from an account, asserting the token mint and\n * decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Address of the account\n * @param delegate       Account authorized to perform a transfer tokens from the source account\n * @param owner          Owner of the source account\n * @param amount         Maximum number of tokens the delegate may transfer\n * @param decimals       Number of decimals in approve amount\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\n\nexport async function approveChecked(connection, payer, mint, account, delegate, owner, amount, decimals) {\n  let multiSigners = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : [];\n  let confirmOptions = arguments.length > 9 ? arguments[9] : undefined;\n  let programId = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : TOKEN_PROGRAM_ID;\n  const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n  const transaction = new Transaction().add(createApproveCheckedInstruction(account, mint, delegate, ownerPublicKey, amount, decimals, multiSigners, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}","map":{"version":3,"mappings":"AAAA,SAIIA,yBAJJ,EAMIC,WANJ,QAQO,iBARP;AASA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,+BAAT,QAAgD,6BAAhD;AACA,SAASC,UAAT,QAA2B,gBAA3B;AAEA;;;;;;;;;;;;;;;;;;AAiBA,OAAO,eAAeC,cAAf,CACHC,UADG,EAEHC,KAFG,EAGHC,IAHG,EAIHC,OAJG,EAKHC,QALG,EAMHC,KANG,EAOHC,MAPG,EAQHC,QARG,EAWyB;AAAA,MAF5BC,YAE4B,uEAFH,EAEG;AAAA,MAD5BC,cAC4B;AAAA,MAA5BC,SAA4B,0EAAhBd,gBAAgB;AAE5B,QAAM,CAACe,cAAD,EAAiBC,OAAjB,IAA4Bd,UAAU,CAACO,KAAD,EAAQG,YAAR,CAA5C;AAEA,QAAMK,WAAW,GAAG,IAAIlB,WAAJ,GAAkBmB,GAAlB,CAChBjB,+BAA+B,CAC3BM,OAD2B,EAE3BD,IAF2B,EAG3BE,QAH2B,EAI3BO,cAJ2B,EAK3BL,MAL2B,EAM3BC,QAN2B,EAO3BC,YAP2B,EAQ3BE,SAR2B,CADf,CAApB;AAaA,SAAO,MAAMhB,yBAAyB,CAACM,UAAD,EAAaa,WAAb,EAA0B,CAACZ,KAAD,EAAQ,GAAGW,OAAX,CAA1B,EAA+CH,cAA/C,CAAtC;AACH","names":["sendAndConfirmTransaction","Transaction","TOKEN_PROGRAM_ID","createApproveCheckedInstruction","getSigners","approveChecked","connection","payer","mint","account","delegate","owner","amount","decimals","multiSigners","confirmOptions","programId","ownerPublicKey","signers","transaction","add"],"sources":["/home/rajeev/Internship/Get-NFTs-in-Wallet-Adapter/node_modules/@solana/spl-token/src/actions/approveChecked.ts"],"sourcesContent":["import {\n    ConfirmOptions,\n    Connection,\n    PublicKey,\n    sendAndConfirmTransaction,\n    Signer,\n    Transaction,\n    TransactionSignature,\n} from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport { createApproveCheckedInstruction } from '../instructions/index';\nimport { getSigners } from './internal';\n\n/**\n * Approve a delegate to transfer up to a maximum number of tokens from an account, asserting the token mint and\n * decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Address of the account\n * @param delegate       Account authorized to perform a transfer tokens from the source account\n * @param owner          Owner of the source account\n * @param amount         Maximum number of tokens the delegate may transfer\n * @param decimals       Number of decimals in approve amount\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function approveChecked(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    account: PublicKey,\n    delegate: PublicKey,\n    owner: Signer | PublicKey,\n    amount: number | bigint,\n    decimals: number,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n\n    const transaction = new Transaction().add(\n        createApproveCheckedInstruction(\n            account,\n            mint,\n            delegate,\n            ownerPublicKey,\n            amount,\n            decimals,\n            multiSigners,\n            programId\n        )\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n"]},"metadata":{},"sourceType":"module"}